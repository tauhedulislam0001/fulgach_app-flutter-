%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1910.i126.054.S.m005.c13.gardener compositions-03.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 6/10/2021
%%BoundingBox: 0 0 530 482
%%HiResBoundingBox: 0 0 529.1173 482
%%CropBox: 0 0 529.1173 482
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1910.i126.054.S.m005.c13.gardener compositions</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-06-10T16:38:19+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-06-10T16:38:19+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-06-10T16:38:19+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>216</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FVD6lH9f8A&#xA;rvJ/UEXohK/AFLcieP8AN75X4Q4+PrVJt1z9f9SA23pely/0gScuRSn7BHf54z47HDVdb/QqvliH&#xA;Yqg7jVLe3maOUMAgqXALdq7AVJ+jKZZgJUWccZPJU0/UbLUbOO8splntpRVJF+4gg7gg7EHcZaDa&#xA;cuKWORjIUQiMLW7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWM/mJ&#xA;5v8A8K+WptRiVJL52WKxhlD8HkY78inZIwzncbDrkJzERZcrR4BlyAS2j1pjfkn81tT1rWIdEvNK&#xA;aW7nDS/X7ReFosKgVb947uaH5HfpkMeYT5Nms08YS9IkI/0q/Q9IlmiijeSVgkaDk7HYADucslIR&#xA;FnkHBSBfNdvdORZyxRRgOjPdH0z6hX90yipqpP2tqjNZHtOEz6CAN/q236fBnwEJrFJfx/U4WCTt&#xA;x4304NOLBOoX/KbM0SmOEbH+cfh+ksUZmQh5T+Yb6pFr90LjUjBB6SS2QibgY4SvHiVqpZ2ljk3F&#xA;diPo1mtB4gXcaHhMQAPeq/kbH5ha11W+vBL+hdQkS50yScxmSRyXSZz6dKV4LWo36+5zcIIG7DtS&#xA;cSYgc47fDo9Ry51TsVdirsVdirsVdirsVdirsVdirsVdirsVdiqA16+fT9Iur5QSLWNppAoBbgg5&#xA;NSvtlWYkRJDZiiJSAPVgX5a+ddR1jzPqljI0j2PAzRxyuJWgdGRT8dK8JeZ4qSacdtjlGm1EpmiH&#xA;N1ekjjgJAvTMzHXOxV2KuxV2KuxVQvb23s4DNMaLWiqPtM3Wgr32yM5iIspAs08w/MTzHq09naG4&#xA;02B9PiuUeZN5pBz5RxsrFV+1yo1E70BO+YWeYyxoOdoTwT9TI/LUWnaB5VOqWlus8t03OeSJeNaH&#xA;hRiRsiUpQbV+dcE8n5fCZ1fuac2TxJc9gktiLi/mu7q5eRoHPKeJCf3r1qiU9j92aTQYZZ5SnOzD&#xA;qP5x6D8cmnNk4QAOaUapG9vOYndROm8iJ9kFuij5DMXXYRjyVtxda5DyHwZYpWFlveehBOsF60Ny&#xA;SsgiNeEqruQxHQ+Fcnpa4TUuGfd0Px/Wy4zGQIGzMdJ88yrpvq3kT8KFILllJHqAVAfuR79fnm70&#xA;mukRUwe74uQdLxi47S6hjdhat5itoZdasIze+qTaXEgBkkkf4Vl4tUL2418BQADM7VADJ6DZ+5wN&#xA;LORh6hQ+961mSrsVdirsVdirsVdirsVdirsVdirsVdirsVU5rm3g4+tKkXM0TmwWp8BXFIiTyVKi&#xA;tK74oWTwRTwSQTKHhlUpIh6FWFCPuxISDRsPFPKfla2hv5bm3RleG59C6t5ZGkeFYJR6cVT+zw4O&#xA;p7rmmnEid/w1s7iepEsVH6nqeiahM13LaSuXXjziLGpHSq/jmXpspMjEutyRFWneZzQ7FXYq7FXY&#xA;q88vdeGseYb9YnraaYxs4lHQyCjTP9LUUf6vvmJryQIx792WlPEZHu2QV55sshO0lnavqcJUI8sI&#xA;LKrxs1R9k13PVa/hlWOMJCpSESO9uyRyR3ETIFEXXmjS4vJ6QNJcWNwZSDE44FzMzO/IKzfu2LkU&#xA;8aCmUaufi4uDGTxXW3d5+VM/ys4ndJ31R4bMWlupHM83ckGpJ2K8CRuAKe2a3UZxhxeBHnzMvPy+&#xA;5o8CXHxS+AStixYlySxNWJ61981BJJstqnIqkcj1WtMVRWo69PB5HtYY1Ed/c3UkcV56aBkggEbE&#xA;KwArVpAN67VHhnX9iaeOfEeMXRcbVa3JiI4SkHlLzLrFj550ifUJxdWAl9NgxEXp+urQmWgHE8ed&#xA;T3zcjRjFEiA2+1xpa4ZpCU7Eh8n0bmO5LsVdirsVdirsVdirsVdirsVdiqD1LVbPT7d552JCFQyJ&#xA;QsORoNq5j6jUwxRMpdEgWo/4k0P1Io/rsYaVQ6VJAAIr8RpRT7NTK/5QwWBxDf8AHw+KeErptcsR&#xA;pl3f2rfXVtIXmeC3o0rcFLcQu3xNxoteuXYs8MguJBXhNvBbPWPM3mTWE8x6hZRXVyshhg0+5jbi&#xA;ls372EQRhk5O1Woz8q7HMTNnPEYu5xenEADUSefe970i0mito5blRHdOg9SJTUISKlajrmXixcO5&#xA;5uoySBO3JV1S6Frp889K8ENB0qTsPxOHPPhgSuKHFIB5jc6h6OrWWq24ET6nJJp88Lb82gha4jkI&#xA;FK+lwK1/y/lTVxyGWMnudgcHDMRKaaP5ktRrECXU0VvePKkSxFgvPmwjATkdyxNAMGllKUga6o1W&#xA;EQHPYh6Jm6dY7FXYq7FVG9meGznmSnOON3WvSqqSMIG6JGg+W9Ev7211D6zBIfUFS4JIDctjWnzz&#xA;ZZcMckeEulxZZQlxBnf5bw3GoGLRYikL2tuCXfdWWIqlQBQ8m5VpnPansmYkZcQol6jT9sY5gR4T&#xA;YDNNf/Lt7rR7qJ9TWL92zep6NAtAa1+JtuNQdspGi8P18XJtOvB24ft/Ywl4o7aGEFiY4lWMMxqa&#xA;AUG+crkyyySJLXlyGZsoae8hUk15E9ga/jkaakDPJ655A/FWipTt88ISyj8xNGmsfKXl2GZaSW4m&#xA;jlANQGlCuRUbdVz0HsjGceIRPOnUdob0Xm6QmW6tI1qWlZFFOtWIH8c2snWgWX1Rmod+7FXYq7FX&#xA;Yq7FXYq7FXYq7FUv1/Vm0nSp9QFu1z6ABMasF2JpUk9h7A5Rqc/hQM6ukgWXjk2vXV/K01zVppCF&#xA;aTudqDw6AZxGWcpyMpGyXJ5Kv1lhsNx79crpbZD5b1K2sjdvK288SwxrXZjJIqdO5HKv35tuxpAT&#xA;kOvCWGQ8vem8Nrp1tq9reIWS5mYAKtOJVBVtqeG305usWMcXid39jZPOeAY+jLL7VLCwEDXcywrc&#xA;yCGFmrQuVLAVA22U7nNgZANOLBPJfCLoWfc8a/PPzR5k03zVYaZa3MsGl39iCioxQNdJM5pUUrUB&#xA;F9qj3rIwEhRFs8G27FPy9u7nV9WFzc3rTrp6yGCB3kkKtOKMRzJVeQG9NzT2zA15EMfDEUC5+EcU&#xA;rPNGWN9FqP5jaZPD8SR6jBCjbbiK4ANCOxNSM2mgwjHp/Mgl5/tDMZ6qukSA9tufMbQea49NlYQ2&#xA;ghZpGegDMV5qwY77UIzT5NdwajgO0a6/NzBHZT1nziLC6u4I4fUa2SinsZSFYVG3wgHKNX2uMWUw&#xA;rkPtTHHYtMfLF5Pe6Jb3NwxaeTmZCfHm34U6ZnaDMcmESPM397GQoofzF5z0LQOEd5K0l3KQIbGA&#xA;epO/I0FEqKfSRXtmaAxTtlVlKsAysKEHcEHAr5XjtJLTULuzlBWS3dopAdiGRip/Vm3ibdCRRpm3&#xA;5O3IXzTAK1M8Myb7moHL/jTKdSPQ5GjPre55rnbJDrPlrStRuljuNOEkU/J5ryNxGyOAQtVqC1a/&#xA;f1zX59FjnPeF3zN0zEiGD2X5fXSeYNS0ZpLe6jitLKeC/kV43hWaS6jZjCpZJpG9AVqyJUA8eoNY&#xA;7Lwg8vvcgzjwiVdT+hm2geWvKlnO0+mW4N1aMbeSZjIzq6rRvtmlSG3KjLtNpsEZGUBvE115/Fx5&#xA;SJSn83bX1vKglA3trmOQn2YNH+txm30p9Tg6wXD4vI/KVq115s0KELypcxOy9QViYO3/AAqnMzKa&#xA;iXX4Rcx730lmqd27FXYq7FXYq7FXYq7FXYq7FUBr2lnVdIutPEgiNwvESFQ4FCD0PyyjU4fFxmF1&#xA;aQaLwyUXGnXMtpcxUmgcqynqGG33ZxOTGYyMTzDkc1aK+gaRVIND1rsK5ClQV9qc73FulsxT0WDq&#xA;xofjB2P0Z2fs5oI+FLJIWZ2P839p+4Oo1+eQmIj+Hf4s78m69DcWgtryslxGWSOWnI0I5KdvcUoM&#xA;l2pKGnyAdMn6PwHO7P4s0CesP0q95Hb6izXN9E0qXAQ2EaOVczREIVqnxA8D9IJGaDFqDcs1Xx0I&#xA;jzFCvlu7KOSenyek/j+1Ffmx5U0rXbDS7i+VhcafcepHwahKMvxoSO3JUNRvtm17V10tPiBj9cjT&#xA;XoMQnOjyeOeRPIGp6t52vLOC/fTLZWlnmaDdhEklFUCoFSWAHhm3lgBgDLdxRrhxmMeic+UdAXQ/&#xA;zHsNMvqxJaXTqrEFuTIrNFSm55txpt3zOl/d7dzpwSc9y52mfmr8w9BfWTNpMdzqcFS5m9KSJAX3&#xA;YJzXk1D7DOP1XYs8mQkS9JN/jd32Mwrc0fct1v8AMny808M2l2F7MpREvFn9OAKUULQMS/xcRvtT&#xA;LNR2EJkEGqAHyYwnHez9jOfLHmXUvNuip/hiB9G0qMmCXU7wJJOXX7YtYkZ0bc/3rmlf2W3puMOG&#xA;OKAgOQaCbLItB8naHosj3FvG09/LUzahct6tw5PUlz0r34gVy0lCd4FeCebtFEH5nXVpxPo6hNDM&#xA;lduQuCvP/hywzY4Zei3U54VlrvW+ULOfy9+ZEOmTkiS1uzArEU5JMpRG/wBkrg/ThmeLGSjEODKB&#xA;5vfc1rt3YqxrR1vR541v620bMdO00x+kCAI/rF/xBqTU++U4hOzxV8O5tl9A95/QyQKoJIABbqfH&#xA;tltNSS+drL675T1SACp9BpFHiYv3g/FMtwmphqzxuBeS/lNZNcedreUdLKCeZvkw9H/mbmbqTUXX&#xA;aSNz9z3XNc7Z2KuxV2KuxV2KuxV2KuxV2KuxVjvmTy/5NkL6nrno2opwku5Zfq6kmgHJiyqTRaCu&#xA;YWfQ4ch4pDdnDiOweSX3mPyE2uxaPY6rC1vOiwjVY7WV2idJVKApwdJZHRSnNVVd+R3zH/K6eJ5B&#xA;z44JVfDv3I78wbHSrPzFbHTJI2tXt0UpG4co6VSjblh8PHrnR9ncPhAQ+npTzGviRk35oTyvPA+p&#xA;y6f6pQ3amFZIn4PFM4/dOGFeJ57V8DlfaWmhqMZG3HDceRbtBlnhmJEHgnt5FPvysi8+J5mvIrqG&#xA;UaBGXBn1FK3DEU48HFDUk/6tO1c0mjwGBsgAnm9FrJ45RsfUzDzRN9Zvhag/DGvA/wCs/X+Gc/27&#xA;m8TOIDlH7z+A36CHDj4u9JPy6tNO0WDWtf1O4hsbe7u2t4Jrl1iQRwMwNHcgfE5I/wBjnc6nINg8&#xA;3o8JNkDmxXz9588jalr2nXmhX/r6vayKzOsbiJvRYOnxsoBYEbUqCO/QZDTaiJPB3t2s0OSMfEr6&#xA;XnPnlNLg8yajdeXjJc6G7mZmWNlFv6jUpUDj6TOf3daGm1NtxE2G0xINFLdI0bVfMLSppsbfVoOH&#xA;1u9YERx+s4jjWv8AM7sAB179ASDaH19pOlWGkaZbaZp8Qgs7SNYoY17Ko6nxJ6k9zvlSovFXkqfm&#xA;DaX0l3JCLlb9pZ2tbpp3j9IIzCFfq4rGVCBeasfiNScW0QTPzXYjUPNHkzX4o2CXjRJIGH2QGW5j&#xA;U+9C9flmThl6ZB1+ox/vInzU/wA09Da01LTfN1qm9pLFHqHH+UODFIaDs3wk/wCrh087uLDVQoiY&#xA;6PSwQQCDUHocxXOQWr65o+jWhu9VvYbK2GwkncICaV4rX7R9hvgMgObKEDI0BbB9F/M3yHfeeb9o&#xA;NZh4XdhY29vJKHhR5YJrxpEDSqi1AmSnjXauVDLEy5uTPTZBAbdT+h6LlziLZI0kjaNxyRwVZT3B&#xA;FCMVLzP8pNFNnrWvtKD6tm4s1bsf3jl/+ILmZqZ2A4GjhUpeWz07MNz3Yq7FXYq7FXYq7FXYq7FX&#xA;YqtlQvGyB2jLAgOtOQr3FQR+GKQwnV/yd8oaxdm81Vr29uT/ALsmuXcgeAB2A9hlJwA87cqOsnEU&#xA;K+Svpv5U+VNMIOnpJauF4+pGIuZHgXMZb8cw59l45/UZH4sjr8h7lG+/KPy3evLJNc3oll3eRJYw&#xA;30fu9s2WEnHjGOO0Q6+WOMsniEXL7PkgLb8h/JtrKJre51GKcHkJVuFDAg1rUR5SMIBsXbnS1k5C&#xA;iAR7mWjy5N6axvrOoSIooAzw+FDyIiBav+UTkcun4xRlIDyNNcc9G+GP4+KnH5Qs43Vxd3J4moBM&#xA;VNvlGM18ew8AN+r5t57QyEVskerfk15L1a8e81BbmedyTVp24rUkkKtOKip6DNkcIPO2vHq5QFRo&#xA;D3KVp+SHkG0uI54beUPEwdQ0nJaqaiqkUI9jgGniN2UtdkIINUVe0/KDypZzzTWkl7btPUSLFcGN&#xA;SjdUKqACn+Sa4RgiOVolrJyFGj8E+07yloun6SmlWsIis47iO6VI1SL97DKkyE+kqA/HGta9Rtlw&#xA;cWRspzih2KvK9W/Ja7utWv7yz1dLa3vJnmWAwlinqHkQDzHc4tgyPRrnSbeZLFKALp8qTQCnQohQ&#xA;e32WONkcmoxB5q2oWUN9YXFnOiyxXEbRvG9eJDCm9N/uwgkbhSARR5JDPpXnk2sdtaavZ2qxIEWU&#xA;WrSykKKVYySFK/7HKZCZ6hyIHFHmCfiwzXPyX1vXZ/X1jzAL2XoplhJCg9kHOij/AFcplp5E2S5k&#xA;NfCIoRpJZP8AnGaNumsKn+rE38XOD8se9l/KI/m/ayHy5+VXnfy6Fj0rzlLHbLsLWWETQgeySMyr&#xA;/saZZHFIci05NVjnzg9D02PXEj46jNbTuFoJII3iq3iVZ5PwOXDi6uHMx6W3pulpZTXcica3spuJ&#xA;+IIrIVVCep2ogwgy6lhwxHLqjsKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrXliR0R3VXkJEakgFiBU0Heg&#xA;FcBkAQD1Vimla5Bp+oXVpdTvIh5tGOby8THK0KwxRAPIWYoxpUnpmHikYT4T3d/nyA5/gN0oE1Sb&#xA;6NcavdTTXV1GYLOTa1t5BwmQKaH1E49T/rn8cswmZkSfp6dD8q/T8GEgByTbMlg7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYqh77UbKwh9a7lWJOgruSfAAbnKc2eGIXM0EgWwfzH5ukvuMFg0&#xA;kFutfUavFnPT9k/Z+nOa7Q7VOX047jH726EK5pFDrF/aqyQ3csSuKEK7D3zW49TliPTIj4syAsHm&#xA;TXQwK6jMBSpBkY9O25OWjWZh/HL5seEM48nebJtWd7O7UG6ij9QTIKKyghTUdmBI6Z0XZnaEs1xk&#xA;PUPtapxplGbZg7FXYq7FXn/5pebda05Y9H0MMmpXcPqfWgK+mhkEdVB+0/Wm+3XMLVajgIDstFoh&#xA;liZE0AaSz8kvL+uWZ1bVNR1C5u4rtkRFuGk5NKBylkZXZvi+JV5fPL8GbxI3Vfa06vHGBABv4U9T&#xA;y5w2B6nKNN8zXV2kFRZIstnZR8i11dXYMIRSKBakpXlUb8qfDUYHCBk2ABF/G+7u3cmAuIH4pBRX&#xA;Nh5bguVkmFx5omf1r++oBHE878pRErbkbUCqOUgA/ZX4CcoqQjfEOv8AazN5OX0/j8eTI/LHmZ7+&#xA;Y2kjrMiqfRvOSK0pDHrEDzQ034sAfn1M8OY8XDKvLvLRkx0ybMtqdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVeeefr2N9VCKjiS2jCOWPwnl8Q4j/AGW5rnJ9tZBLNw7+kftb8Y2YnJLJShbc&#xA;9VpSmakBmo4UOIqKeOKpv5F1k6Z5htrMlDDd/uZmYAEFt04nt8VPnmz7Lz8GUDpLZjMWHr2dc0Ox&#xA;V2KrZZYoYnlldY4o1LSSMQqqqipJJ2AAxV4Prn5yW2t64kZshFoULOtregF7kOQVMroaD02X9gb9&#xA;612zF1WLjjXUPUaTsjLCHF/Een6D3Hz5Mx/K38xNG1NpNCINrcxENZmVgPrCsPioKmjKQfhqdtx3&#xA;pLTw4I04PanZ+WB4zuOtdHpOZDpWCSve6l+YF4mn0kXS44lEknxQQXMsbBpnUFS7pCxRFXqWapFM&#xA;p5y2csVHGL6sgsfKGmWuotqReafUJKNNcyOecjj9puPEUpQBB8AA2XInTRMxI3YaJZCRXRNhaWwu&#xA;GuPTX12ADSU3otaf8SOW+HG+Kt2u1XJq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmfn/wA0avbe&#xA;cbPTrNbl7OCBZLmOCQwcnlZgpLKQzqOAr4ZDLqRjgRQ4j1Lk4Ozzl9ZlUR0HVl3k3Ur7U9Le8vLc&#xA;wSNKyR1fmJEUD418PiJH0ZVpiTGz1XVYxCfCE9kLhGKAF6HiD0r2y83WzjPLNY0nWYedzqcTD1X4&#xA;tIzK3J2BNPhJ7LnEarTZ4HjyDmebkxI5BI7iMIRStD45igpKlhQ7FUX5U0Ntc8wmJbg2wtVE/qKO&#xA;TH03UUG60NW65n9n6bxslXVbokaD2rOycd2KuxV55+fGuy6V+Xd1HCzJLqcsdgHU0osnJ5B8mjiZ&#xA;T88Ic7s3Fx54jzv5Pmqyuwgo32G3+RyucX0KE2ceUfKmsDVbTWLm1J05kM1saj4mVS0TFAeYWo5B&#xA;qUPTvmJnzAQIH1Oq1Wqj64iW5NfDu7r5vWX8265Dpk1xymaOJCSfSLGp2AD8TuxIA+eYENRmIoE/&#xA;J0E9LiB6fNl3lKwuLLR0W6iWO7md5rllXg0kjmrSON/ib33pSubXTCQh6ubq9VKJn6eSr5g1eDSb&#xA;WO6uLmK2hLiMvMyqGdvsqORFSadBvhzzlEWGGLHxmgEj8u/mXo2s68dGTh60sZmsbiGQTRToo+Mb&#xA;BTG60NVPh1yePJxBy83Z8oYvEBsXRHIj9Y82YZY692KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpmVFL&#xA;MQqqKsT0AGAkAWUgW898y6hBfXS3VxDGbZCIIHAKyhZXVQS43ozUqvTOZydpyzZOGI9IsjvNC/7H&#xA;a48fhR3O559ya+WdfkgvY9GvOAilUnT5FHGhU/FC3bYEcTmz7M1oy499pRNH48v1e/3uBqoGOSuk&#xA;uXw5suzaNCF1W1uLrT5oLaX0Z3X93L4EGvzFelR0ynUY5TxmMTUj1SDu8hv1eFZUeMmWIlWj/aDA&#xA;0P3ZwhiYyo8w5KU3F8yM0bQmOVNijDiQfcdckYkGiqm98zRHgArDrU77+GClZv8AlHHpvrXsrSA6&#xA;lQKkRFCIerMprvVqV22oPHN/2IIXI/x/oasj0vOhanYq7FXi/wDzk/NdJ5c0ZE/3la9ZpRtT1FiI&#xA;j9/ss+EOZocxxT4hzD59tXYqX8TSnywl2su1MniccdvLo+jvJFvqXmHy7bazYrEUkrDLah6NE8J4&#xA;UFQBTiAw36HNLm0E+IkbtP5zHylYLJIdP1K71iz0vUJZGS1aK/ltvUDLxjdjCZKctvVjqo8V9jk8&#xA;GPMJgS5e9oyzx8BlHnyZxm1dWwL8ybbzEuoaZqVkpl0m1huU1BQSfTZvTdJTGvxNtGyVAJHLwJOY&#xA;2pgTHZztHKO4P1Hk808iR3F5+bGnXPlrT4oNJtY5murpUUK8Lji/JgBVlLKF3J8T1yGlE6uTsddW&#xA;PGYSPqPS30RmY6B2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVj3nvVjpugOyo0klzItvGidSWqx3OwHF&#xA;DWvbMDtISOExBri2+H42cvRRvIPJ55q91e3GjTM8AQmMsiQs0p5Uqv7Kn7VO2c7ptNKGeBjv6h5d&#xA;XaZojw5iX80pGt5eW1764+CdGqokq3HcGm55fjWmegZNLiyYTGNURzjX6Hio5Zwygy5g9Xr/AJX8&#xA;wy3kCW2ovH9fA+3GCiSbdQGLUPtXNFpNWJjhP1fe9FqdKYbjkyHM5w1k1vBOoWaNZVVgyh1DAMOh&#xA;Fe4yMoCXMWtsC1TR9Itr6LSL22jZHnjksZ2+AiwVi0sXIEH9wTx/1WTwzEy6XFM+qN/qcoeocX4v&#xA;9qUj8s7m90uK/wBOl4NcM0kVtcVVhbsf3NWA+2UozAgdadt9Xm7G2vGfmxlMA0yPyN5Hn0S4kvb0&#xA;o1wycIwpJK1PxV7dvfMjs3s+WKRlOr6Nc52zPNy1uxV2KvIf+cm7fn5GsJgCTDqUYPgFeGYH8QMI&#xA;bcPN83xFlteSmhFThcp7h/zjr5k/R76npGoMYLaaH9IQvL8KgwikxqfFOLfJchxg8i158UtjT1/y&#xA;1FdNZXeuSwk3+rt9ZS3c8SkCrxtYST9n92AzeDs2Rj397VkqxHoPwVPyR5tuPNGnSagdOaxtQ7R2&#xA;8plWVZTG7xycaBT8Dx06UPbGMieYplnxQhXDLi+FIfz/AKzpltphsp7hBOXguJLVWQzGCOdSx9M7&#xA;8TxpXCQSREfxX9xaJRMYcdHhBG/xDHL7WtK8vW1newBLMB0mWEhEdlZw0yBOnJkZgadzmHp4S8Sh&#xA;v0LZqM1w4pHfz5vTVZXUMpDKwqrDcEHuMzmpvFXYq7FXYq7FXYq7FXYq7FXYq7FXYqhdR0uw1K3+&#xA;r3sImiDBwCSpDDoQykMDvTY9NsjOAkKIsM4TlA2DReXefZj5Z1q2t7GINY3EPqGJ2JIfmwIVj0FK&#xA;da5HF2NiyRJBMT9n4+LHUdtZccgCIyH2/q+xi2qXsN5dK/D02pTgCTXuT2GbXQ6U4IcJPE6nW6oZ&#xA;p8QHC9C1TRRaw6XFpsrNe6oeNvA4DqnGFpnfkWj+BeNNz3Gc5n7PAJMe/l+16bBruIDi7uaZWOq+&#xA;Z9GaOz1pIrmDgrx3kZIfckNEyEsCy0ry5eAp3GfpcUyBE83A1eaEfUGUWWoWl7F6lu4YD7S9GX5j&#xA;LpwMTu1Y8kZiwwzzhbTXt/pmkXprI18jQXNAPWsZlaO5hPSjKGCnxqh61zGmLIDnYTQMh3fb0Z3l&#xA;ziOxV2KuxV2KsG/O7Tor78stZVyqtbpHcxu/ZopVag92Wqj54Qzxn1PnP8svKUfmrzFb6NNyW3mh&#xA;uGmmQVMXGJ/TkpUdJeGEuTOVC2oNUWKJS5ZGKgN03qKEGmaecfUXeQn6QXvn5c+bvNd15SvtZ1iM&#xA;SaVa28s9nqEjASyegG5qVHVRwPxNT6e2bp5TI35On1sMYl6dpdR0bt/N9n5Q8i6TpVnE2p+aJLGO&#xA;S20W1RpJmmmX1GeRI/iWMOxLMeuZDhEWWE6kG1/zNAbvl/j/APRMytYW6h4oJ3jWJRNyLBWCyOwV&#xA;fskhie2YpnkgSTvZ2ro7jT54cAxkfu9jK/x3/qSTzDp/mmFYLTzNOJNWtIF9RVYOB6n7yjlfhL8S&#xA;AxHh365uNJhjGFjq8z2vljPOeD6Oj0D8mfOl7NDdaLqLmS00+3Nzb3LVJjiRlVoz4gcqr4dOlKV6&#xA;qMYjiYaPIT6S9YiljljWWJg8bgMjqagg9xmKCCLDnLsKuxV2KuxV2KuxV2KuxV2KuxV2KuxV5j+d&#xA;lsTHo9yBskk0bH/W4Mv/ABE5sNCeYdZ2iPpLzqV6XkK+x/H/AGszujgE7h7Pp6GTzLoMbg0stFle&#xA;nYPM9ugPX+WJhmjyfUXocf0D4MmvLOC7t2gmXkjdPEHsRjCZibDGcBIUWJIkumXx4fDJGaHrRh7+&#xA;xzOJ44utAOOSL8yTQ3cOhXyLVodUtgfFfUJiIJ8KuD92a7NCiPe7nTZOIGv5pZRha3Yq7FXYq7FX&#xA;lX/ORutNaeRotLiYetq91HEydzFD++Yj5OqD6cIbcI3TD8lfy+/wv5dF5excdY1JVecMPiih6xxe&#xA;x/ab327Ylcs7LzL8nvIlh5i81ao2rQmbT9DkaP6u32JJC7LGr0pUKEJI70FdutBwDitzJ6uQgAOb&#xA;2b8w0trXyTNpdqqWwv3t9Ls4I1CL/pUyQ8EVaAURmoB4ZbWzgxJJso3XvKFvf21wNNnOjalchI5d&#xA;VtEC3RiSg4CQFW+yBTfbbwwsQUsn0vyh+X+iTajp+nxJeFfSW4cc7m4lfekkzVkbkRybfJ4sfEaa&#xA;82bhjZeJX+oXd9Nc6hdymWW4LSMxpvX/AD29s2oFDZ0kpEmyvtnvdH0+D1oXWHUkEoIYqGQu3AMP&#xA;cwlh8s5rtXRzzZLEqFVTu9DCsdvS/wApfNq3upXWipHIFWH60eXHitGCGlCSa8lyrQabLhsSIMfx&#xA;5ORkj1eo5smp2KuxV2KuxV2KuxV2KuxV2KpF558wz+XfKmoazbxpLPaonppJXhykkWMFgtCQvOtA&#xA;RXpUZPHHilSQLLwu+/5yE86s8ciC0toZENFW3atQdm+N5Tvv92Zg08OrPhDO9e1qbzZ+Uuma+6Ks&#xA;vrpJcBK8QySSWzEA7gFjWhwacCOUh1/aEfR7ilPmXy59U8q+X9WVKSOzJct3ImYyQ/QFB+/MjFlu&#xA;couDmxVCMnougp6vmrUJNitjp9hZch/vw+rPJ/wkkeaqXMu6jtEMnwKk2tqscySbVkUgLtVivz9s&#xA;thOg4ueO9sM1zVpzFGtsjpEk0MsiGisskMyyK1Aa9FNfH7s0eu7QlIjh9MRzvmDz97l6SHDd9Xol&#xA;jdQzwKEuEuJEUCV0oPiGxJUfZqQds2WHIJDYiR6qQqxTRSqWicOoJUspqKjqKjwycZA8kL8krsVd&#xA;irEvMfktdf8AOOialqHGTS9FjlkhtqV53UrLQv24II1Pz9sFs4yoFluFg87sdP1byZBrn6K0mTVN&#xA;S1nU7q/jMa8YIopX/dI7VFeIqeK+PUZVPIRyDlY4RmRxSoMHu9P/ADaub+S/nsrppJH9Qx8V9MEd&#xA;OKV2p2I3zGEs125ksWlIrb9LNNJ87+b7HRI7ebyjqN5qUZIrUpG9STyaSRSy9aUocvGaR5x3cX8p&#xA;jHKYr7WE+dL382fMcsJu/K80FpCGEUECu7VelWZqmp2/lGW4dTkgfp2a9RocEx9e/wBiVN5O853U&#xA;PpxaHeR0pzEkZT6BXY/RmzjqIkXydDk0s4yrn5hfeeV/zBktPq99pV9dqqRxwVVpCkcPIoikV4hS&#xA;+3h2zFz8JNh2WiMoxIkyz8n/AC1rmm3891q1hcQPzRo5JIGRmpHJGUqStF/e1Pw0JA8Mx5Gg5E5A&#xA;mnsgNQD0r47YWt2KuxV2KuxV2KuxV2KuxV2KsW/NHS9Q1TyHq1jp8LXF3KkZjhT7TBJkduI7kKpI&#xA;A3PQb5ZhIEhbKPN83X/5f+e7146eX74NyC09CUChqN2ZEApyzPOSPe2Eh6f+W+keb18iaj5R1HQb&#xA;u3UTlra7mKIih2Dj4XKswEkdSU5dcxZ5RGYkGjPjE4kWzjXbTzBrGgtosGhi0hKxqs91dRDgImDA&#xA;qsInLH4aU2+eVY8pjLiYZcIlDhTvQ9N/Q2lTPM8l5ezO91fzhKSTTsBXjGtaAKoRFHQAD3yoHZuO&#xA;5Y1J+Ynm1LpgfI2omxU7TiRGmIr19FVP4PlXiy/mlyRp4V9Yti/mnzT511O99Sx8q6ksMTfuRPby&#xA;H4SFBqigdSD+3TNfnwyyT4jdDo349Nir1THwYpPL+aTDjHoF8qHYx/VWAPTqSrN28co/ICqo18XI&#xA;GPT94+aNtrj8zZElA0PVre9lj9MMvrLA5CFV9RW4jivYGuVjQ5QdieE8++ve1Sx4/wCdGmReWvNn&#xA;51abHHbar5XXUraNeKtEBaygdvsho6DwCD55tscpxFcOzXkwYTylT0/RNZk1KHlNp91p04ALw3SA&#xA;b9+LqWU/fX2zJjK+jhZMfD1BTLJNbsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:fb1572ae-6fb6-7246-8997-6d96bf050c32</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:fb1572ae-6fb6-7246-8997-6d96bf050c32</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:6992e4fc-68e1-4ba1-86fb-36e56801e831</stRef:instanceID>
            <stRef:documentID>xmp.did:c9c4a859-8a94-5a42-8596-1cf237eff02e</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:882a786b-f066-3641-851d-3971987876d5</stEvt:instanceID>
                  <stEvt:when>2019-10-28T10:42:53+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f6a6ace6-11f8-8d4a-a726-fd94f29c2819</stEvt:instanceID>
                  <stEvt:when>2019-10-28T11:31:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c9c4a859-8a94-5a42-8596-1cf237eff02e</stEvt:instanceID>
                  <stEvt:when>2021-06-10T13:16:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fb1572ae-6fb6-7246-8997-6d96bf050c32</stEvt:instanceID>
                  <stEvt:when>2021-06-10T16:38:19+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>529.117268</stDim:w>
            <stDim:h>482.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -482 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 482 li
529.117 482 li
529.117 0 li
cp
clp
448.664 436.802 mo
451.649 435.873 453.478 434.2 454.255 431.69 cv
456.77 423.565 447.19 409.765 447.092 409.626 cv
448.447 408.63 li
448.864 409.225 458.636 423.299 455.864 432.264 cv
454.924 435.299 452.681 437.388 449.194 438.473 cv
447.775 438.914 446.348 439.14 444.916 439.207 cv
445.215 437.423 li
446.396 437.349 447.548 437.149 448.664 436.802 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.317647 .254902 .27451 rgb
f
403.947 373.1 mo
404.433 373.716 404.952 374.355 405.771 374.623 cv
406.591 374.89 407.804 374.642 408.366 373.867 cv
408.606 373.535 408.695 373.161 408.778 372.8 cv
409.428 369.97 410.079 367.139 410.729 364.309 cv
412.208 366.083 413.805 367.932 416.303 368.562 cv
417.374 363.625 418.446 358.689 419.517 353.753 cv
422.502 354.935 424.153 357.693 424.673 360.674 cv
425.192 363.656 424.718 366.881 424.244 370.058 cv
426.13 367.995 428.016 365.931 429.902 363.868 cv
432.245 366.985 428.701 371.955 428.557 376.079 cv
430.351 373.255 432.332 370.495 434.482 367.822 cv
435.246 366.874 436.547 365.772 437.504 366.216 cv
437.999 366.446 438.121 367.011 438.177 367.534 cv
438.625 371.779 436.959 376.564 433.665 380.492 cv
434.438 380.262 435.211 380.031 435.985 379.801 cv
434.435 381.823 432.724 383.768 430.873 385.61 cv
433.699 384.915 436.572 384.911 439.06 385.599 cv
434.334 389.249 428.814 392.029 423.146 393.614 cv
412.491 394.546 li
412.349 395.035 412.207 395.524 412.066 396.013 cv
410.728 391.859 408.826 387.94 406.406 384.352 cv
405.302 382.715 404.082 381.128 403.426 379.253 cv
402.77 377.379 402.739 375.132 403.947 373.1 cv
cp
.607843 .607843 .215686 rgb
f
352.227 206.211 mo
359.912 212.263 361.963 220.764 353.196 231.965 cv
317.089 210.471 li
328.952 194.942 335.452 193.004 352.227 206.211 cv
cp
.686275 .152941 .305882 rgb
f
352.227 206.211 mo
353.841 207.482 355.188 208.868 356.257 210.357 cv
351.072 214.836 341.701 217.492 331.033 216.85 cv
329.708 216.77 328.414 216.625 327.137 216.452 cv
317.089 210.471 li
328.952 194.942 335.452 193.004 352.227 206.211 cv
cp
.827451 .215686 .364706 rgb
f
312.705 214.226 mo
314.436 212.876 320.547 209.291 322.978 208.835 cv
325.948 208.277 329.249 209.871 332.206 211.453 cv
338.536 214.84 344.763 218.472 350.235 223.064 cv
355.662 227.618 360.354 233.208 362.885 239.469 cv
364.145 242.585 364.85 245.995 363.906 248.875 cv
362.735 252.443 359.294 254.544 355.852 256.09 cv
356.794 256.332 356.929 257.715 356.392 258.393 cv
355.856 259.071 354.957 259.429 354.522 260.181 cv
354.283 260.595 354.206 261.094 354.037 261.547 cv
353.386 263.292 351.193 264.173 349.219 263.48 cv
349.018 263.409 348.819 263.248 348.674 263.07 cv
348.543 264.496 347.56 265.701 346.273 266.319 cv
344.779 267.036 342.947 267.079 341.16 266.872 cv
335.967 266.271 330.71 263.585 326.912 259.571 cv
324.227 257.78 li
323.824 259.568 322.238 260.903 320.302 261.08 cv
318.363 261.257 316.164 260.263 314.87 258.619 cv
314.33 257.933 313.874 257.096 313.069 256.747 cv
311.877 256.232 310.787 257.101 309.599 257.278 cv
307.132 257.645 304.868 255.078 303.338 252.866 cv
301.592 250.341 299.818 247.763 298.824 244.968 cv
297.195 240.393 297.829 235.666 299.46 231.609 cv
300.444 229.159 310.774 215.732 312.705 214.226 cv
cp
.486275 .176471 .219608 rgb
f
293.145 327.323 mo
296.874 321.973 305.423 293.098 317.979 267.734 cv
326.389 295.079 li
324.027 303.005 304.39 334.314 300.502 338.277 cv
296.614 342.24 289.417 332.673 293.145 327.323 cv
cp
.929412 .878431 .737255 rgb
f
311.565 302.081 mo
315.924 292.796 319.085 283.982 320.802 276.914 cv
326.389 295.079 li
324.027 303.005 304.39 334.314 300.502 338.277 cv
297.906 340.922 293.04 337.348 291.191 333.09 cv
296.896 328.277 304.755 316.584 311.565 302.081 cv
cp
.866667 .803922 .65098 rgb
f
316.65 285.684 mo
314.178 285.756 312.161 286.082 309.981 285.92 cv
312.601 280.033 315.068 273.615 317.979 267.734 cv
316.65 285.684 li
cp
f
375.126 419.691 mo
392.157 421.384 458.59 451.86 458.59 451.86 cv
338.977 451.86 li
375.126 419.691 li
cp
.298039 .490196 .576471 rgb
f
325.881 297.364 mo
332.927 327.84 342.337 339.691 339.396 362.549 cv
338.842 366.861 311.836 395.214 295.707 434.694 cv
292.309 443.012 298.196 451.86 307.148 451.86 cv
341.885 451.86 li
352.678 451.86 358.306 445.661 363.204 435.968 cv
376.003 410.636 403.57 362.855 401.911 352.123 cv
399.662 337.575 377.038 324.877 373.55 314.718 cv
370.062 304.559 362.105 271.915 347.832 264.719 cv
333.558 257.524 325.881 297.364 325.881 297.364 cv
cp
.380392 .576471 .686275 rgb
f
354.796 434.085 mo
374.373 401.805 374.197 361.861 367.192 347.529 cv
358.123 328.975 339.894 326.108 339.727 359.336 cv
341.43 338.517 332.588 326.376 325.881 297.364 cv
325.881 297.364 333.558 257.524 347.832 264.719 cv
362.105 271.915 370.062 304.559 373.55 314.718 cv
377.038 324.877 399.662 337.575 401.911 352.123 cv
403.57 362.855 380.397 410.636 367.597 435.968 cv
362.7 445.662 352.678 451.86 341.885 451.86 cv
335.985 451.86 li
342.323 445.044 349.208 443.3 354.796 434.085 cv
cp
.298039 .490196 .576471 rgb
f
453.472 442.313 mo
458.527 442.815 478.244 451.86 478.244 451.86 cv
447.641 451.86 li
453.472 442.313 li
cp
.929412 .878431 .737255 rgb
f
412.769 390.087 mo
413.575 390.552 414.426 391.031 415.404 391.075 cv
416.381 391.12 417.51 390.565 417.706 389.675 cv
417.79 389.295 417.696 388.913 417.603 388.545 cv
416.874 385.659 416.145 382.773 415.416 379.887 cv
417.819 381.206 420.381 382.565 423.269 382.521 cv
421.932 377.504 420.596 372.487 419.259 367.47 cv
422.923 367.829 425.991 370.048 428.001 372.775 cv
430.012 375.502 431.118 378.721 432.2 381.895 cv
433.125 379.424 434.05 376.953 434.975 374.482 cv
438.934 376.866 437.736 382.557 439.628 386.554 cv
440.082 383.377 440.759 380.212 441.656 377.088 cv
441.974 375.979 442.772 374.583 443.979 374.762 cv
444.602 374.854 445.008 375.364 445.324 375.852 cv
447.887 379.81 448.535 384.837 447.079 389.463 cv
447.763 389.041 448.447 388.62 449.131 388.198 cv
448.533 390.541 447.73 392.853 446.732 395.102 cv
449.304 393.701 452.265 392.951 455.171 392.964 cv
452.101 397.696 447.783 401.799 442.72 404.793 cv
432.19 408.456 li
432.286 408.962 432.382 409.468 432.477 409.975 cv
429.043 406.334 425.143 403.067 420.871 400.25 cv
418.923 398.966 416.879 397.76 415.275 396.13 cv
413.672 394.501 412.528 392.352 412.769 390.087 cv
cp
.698039 .709804 .262745 rgb
f
387.413 386.913 mo
388.189 387.347 389.007 387.793 389.911 387.802 cv
390.815 387.812 391.816 387.221 391.933 386.329 cv
391.984 385.948 391.871 385.571 391.759 385.209 cv
390.883 382.365 390.008 379.521 389.132 376.678 cv
391.439 377.904 393.896 379.165 396.554 379.019 cv
394.968 374.078 393.382 369.137 391.796 364.197 cv
395.197 364.424 398.18 366.521 400.225 369.161 cv
402.271 371.801 403.517 374.963 404.739 378.08 cv
405.417 375.59 406.094 373.101 406.772 370.612 cv
410.587 372.841 409.886 378.542 411.912 382.449 cv
412.105 379.274 412.506 376.104 413.111 372.966 cv
413.326 371.852 413.962 370.436 415.087 370.57 cv
415.668 370.64 416.079 371.133 416.404 371.606 cv
419.045 375.451 419.997 380.426 418.983 385.077 cv
419.583 384.634 420.184 384.19 420.784 383.746 cv
420.398 386.097 419.822 388.424 419.061 390.696 cv
421.332 389.211 424.007 388.361 426.686 388.271 cv
424.192 393.085 420.503 397.316 416.049 400.473 cv
406.606 404.488 li
406.73 404.987 406.854 405.487 406.978 405.987 cv
403.556 402.49 399.732 399.379 395.597 396.73 cv
393.711 395.522 391.743 394.396 390.15 392.833 cv
388.557 391.27 387.351 389.173 387.413 386.913 cv
cp
.647059 .647059 .239216 rgb
f
389.477 392.319 mo
451.961 397.398 li
437.797 451.86 li
396.781 451.86 li
389.477 392.319 li
cp
.447059 .364706 .384314 rgb
f
317.535 267.897 mo
314.333 277.47 312.881 318.739 314.816 320.432 cv
316.75 322.125 354.778 320.009 356.547 318.316 cv
358.315 316.623 351.848 269.176 348.788 265.618 cv
345.727 262.06 334.907 259.41 331.518 258.563 cv
328.13 257.717 318.388 265.345 317.535 267.897 cv
cp
.380392 .576471 .686275 rgb
f
335.637 283.167 mo
328.222 284.848 321.138 285.671 314.953 285.715 cv
315.572 277.991 316.453 271.132 317.535 267.897 cv
318.388 265.345 328.13 257.717 331.518 258.563 cv
334.907 259.41 345.727 262.06 348.788 265.618 cv
349.694 266.672 350.9 271.589 352.101 278.014 cv
347.192 280.037 341.62 281.811 335.637 283.167 cv
cp
.298039 .490196 .576471 rgb
f
346.264 316.683 mo
345.857 314.489 336.587 278.808 344.645 262.832 cv
346.416 263.675 347.919 264.608 348.788 265.618 cv
351.848 269.176 360.839 319.204 359.07 320.897 cv
357.302 322.59 316.75 322.126 314.816 320.432 cv
314.755 320.379 314.697 320.285 314.642 320.155 cv
326.641 319.903 346.615 318.569 346.264 316.683 cv
cp
f
365.027 313.269 mo
368.172 311.031 365.181 285.949 355.418 273.088 cv
353.458 270.507 350.923 270.965 348.444 269.396 cv
344.814 267.098 344.778 296.649 352.273 310.683 cv
354.077 314.06 362.218 315.266 365.027 313.269 cv
cp
.211765 .396078 .458824 rgb
f
363.248 310.441 mo
365.867 308.527 363.439 287.122 355.355 276.159 cv
353.733 273.958 351.625 274.353 349.569 273.017 cv
346.558 271.061 346.462 296.284 352.658 308.252 cv
354.149 311.132 360.91 312.15 363.248 310.441 cv
cp
.827451 .745098 .54902 rgb
f
321.95 263.193 mo
325.252 260.553 330.251 257.072 332.265 257.576 cv
334.611 258.162 339.769 260.6 344.198 262.618 cv
338.729 276.461 343.747 297.525 342.337 299.198 cv
340.553 301.314 320.325 301.455 319.093 300.044 cv
318.113 298.922 318.171 276.099 321.95 263.193 cv
cp
.929412 .878431 .737255 rgb
f
332.265 257.576 mo
334.611 258.162 339.769 260.6 344.198 262.618 cv
341.953 268.299 341.476 275.196 341.595 281.47 cv
341.565 281.537 341.534 281.603 341.503 281.669 cv
339.6 282.211 337.642 282.713 335.637 283.167 cv
329.702 284.513 323.981 285.306 318.76 285.593 cv
319.14 278.225 320.097 269.519 321.95 263.193 cv
325.252 260.553 330.251 257.072 332.265 257.576 cv
cp
.866667 .803922 .65098 rgb
f
317.955 334.629 mo
322.037 328.772 333.392 297.618 347.137 269.851 cv
351.221 264.881 362.16 275.568 356.778 294.699 cv
354.327 303.41 333.287 343.184 329.03 347.522 cv
324.773 351.861 313.873 340.487 317.955 334.629 cv
cp
.929412 .878431 .737255 rgb
f
321.828 340.43 mo
326.085 336.091 347.125 296.318 349.576 287.607 cv
351.812 279.659 351.213 273.199 349.477 268.683 cv
354.252 268.472 361.318 278.56 356.778 294.699 cv
354.327 303.41 333.287 343.184 329.03 347.522 cv
326.106 350.502 320.05 346.069 317.865 341.103 cv
319.37 341.597 320.796 341.482 321.828 340.43 cv
cp
.866667 .803922 .65098 rgb
f
339.074 260.281 mo
338.81 241.138 330.739 228.087 330.739 228.087 cv
322.57 233.59 li
324.878 261.103 li
325.16 269.286 332.832 270.802 339.074 260.281 cv
cp
.823529 .458824 .345098 rgb
f
315.654 258.137 mo
333.813 249.714 339.264 242.561 341.007 231.803 cv
342.751 221.045 334.786 204.546 326.436 204.451 cv
318.085 204.356 311.656 210.88 308.797 227.072 cv
306.587 239.594 315.654 258.137 315.654 258.137 cv
cp
.929412 .72549 .517647 rgb
f
326.343 224.662 mo
321.803 220.467 316.693 217.706 311.709 216.405 cv
315.116 207.959 320.246 204.38 326.436 204.451 cv
334.786 204.546 342.751 221.045 341.007 231.803 cv
340.368 235.746 339.222 239.201 337.145 242.415 cv
335.615 236.195 331.932 229.827 326.343 224.662 cv
cp
.905882 .607843 .411765 rgb
f
264.716 358.363 mo
277.035 354.911 298.632 341.126 302.302 336.196 cv
305.971 331.265 300.565 321.863 295.563 325.683 cv
290.292 329.709 264.968 355.695 263.968 357.108 cv
262.968 358.52 264.716 358.363 264.716 358.363 cv
cp
.929412 .72549 .517647 rgb
f
263.968 357.108 mo
264.649 356.145 276.621 343.777 285.85 334.718 cv
285.976 337.453 286.768 339.353 288.241 339.875 cv
291.56 341.053 297.08 334.798 300.648 325.868 cv
303.266 328.037 304.658 333.03 302.302 336.196 cv
298.632 341.126 277.035 354.911 264.716 358.363 cv
264.716 358.363 262.968 358.52 263.968 357.108 cv
cp
.905882 .607843 .411765 rgb
f
284.598 371.766 mo
298.138 368.592 322.252 354.611 326.474 349.417 cv
330.697 344.223 325.284 333.727 319.67 337.649 cv
313.752 341.782 285.001 368.873 283.847 370.363 cv
282.693 371.853 284.598 371.766 284.598 371.766 cv
cp
.929412 .72549 .517647 rgb
f
283.847 370.363 mo
284.655 369.32 298.98 355.738 309.535 346.262 cv
309.524 349.366 310.376 351.635 312.083 352.239 cv
315.272 353.368 320.205 348.285 323.101 340.886 cv
323.567 339.697 323.942 338.525 324.247 337.383 cv
327.602 339.341 329.48 345.72 326.474 349.417 cv
322.252 354.611 298.138 368.592 284.598 371.766 cv
284.598 371.766 282.693 371.853 283.847 370.363 cv
cp
.905882 .607843 .411765 rgb
f
283.73 353.574 mo
279.567 332.143 li
251.425 362.882 li
252.947 364.098 li
283.73 353.574 li
cp
.317647 .247059 .262745 rgb
f
307.475 367.778 mo
305.198 344.782 li
271.985 376.709 li
273.91 378.161 li
307.475 367.778 li
cp
f
320.321 325.864 mo
332.835 322.337 336.67 338.845 336.67 338.845 cv
336.67 338.845 332.86 349.991 324.576 351.876 cv
325.765 344.65 321.733 338.737 315.597 340.928 cv
316.336 332.452 320.321 325.864 320.321 325.864 cv
cp
.686275 .152941 .305882 rgb
f
296.766 312.52 mo
307.733 309.306 312.191 325.182 312.191 325.182 cv
312.191 325.182 308.839 335.336 301.58 337.053 cv
302.631 330.47 299.316 323.613 292.157 327.85 cv
292.276 320.762 294.513 313.68 296.766 312.52 cv
cp
f
327.814 208.62 mo
328.956 207.238 330.901 207.427 332.459 208.03 cv
335.851 209.342 338.703 212.061 341.172 215.054 cv
342.933 217.188 344.578 219.561 345.36 222.376 cv
346.858 227.771 344.946 233.583 343.063 238.838 cv
343.063 238.838 334.86 236.54 333.389 230.265 cv
331.06 220.333 326.341 213.348 326.9 210.781 cv
327.071 209.995 327.33 209.206 327.814 208.62 cv
cp
.486275 .176471 .219608 rgb
f
343.456 218.154 mo
325.795 204.166 316.098 208.919 312.572 214.426 cv
312.572 214.426 292.202 189.563 306.849 186.127 cv
328.526 181.042 343.456 218.154 343.456 218.154 cv
cp
.929412 .878431 .737255 rgb
f
276.694 374.237 mo
272.636 376.979 267.325 378.44 266.978 380.259 cv
266.631 382.079 271.768 387.084 275.145 383.342 cv
278.522 379.601 281.418 373.16 281.418 373.16 cv
276.694 374.237 li
cp
.317647 .247059 .262745 rgb
f
275.695 374.03 mo
270.748 376.022 261.099 374.93 260.828 376.072 cv
260.57 377.157 271.835 379.229 273.353 378.447 cv
274.929 377.635 277.689 373.227 275.695 374.03 cv
cp
f
272.594 375.25 mo
266.973 382.051 258.994 382.812 258.6 383.65 cv
258.205 384.489 264.631 384.798 268.864 381.703 cv
273.098 378.608 272.594 375.25 272.594 375.25 cv
cp
f
274.638 376.578 mo
269.771 383.881 260.846 386.247 260.492 387.298 cv
260.143 388.336 267.252 386.98 271.041 383.306 cv
274.477 379.975 274.638 376.578 274.638 376.578 cv
cp
f
277.639 377.916 mo
272.103 385.655 265.266 387.733 265.108 388.404 cv
264.957 389.049 269.944 388.162 273.374 385.076 cv
277.366 381.483 277.639 377.916 277.639 377.916 cv
cp
f
256.313 358.458 mo
252.255 361.201 246.944 362.661 246.597 364.48 cv
246.25 366.3 251.387 371.305 254.764 367.564 cv
258.141 363.823 261.037 357.382 261.037 357.382 cv
256.313 358.458 li
cp
f
255.314 358.251 mo
250.367 360.243 240.719 359.151 240.447 360.293 cv
240.189 361.378 251.455 363.45 252.973 362.668 cv
254.548 361.857 257.308 357.448 255.314 358.251 cv
cp
f
252.214 359.472 mo
246.592 366.272 238.613 367.033 238.219 367.872 cv
237.824 368.71 244.25 369.02 248.483 365.924 cv
252.717 362.829 252.214 359.472 252.214 359.472 cv
cp
f
254.257 360.799 mo
249.39 368.102 240.466 370.468 240.112 371.52 cv
239.762 372.557 246.871 371.201 250.66 367.527 cv
254.096 364.196 254.257 360.799 254.257 360.799 cv
cp
f
257.258 362.137 mo
251.723 369.876 244.885 371.955 244.727 372.626 cv
244.576 373.271 249.563 372.384 252.993 369.297 cv
256.985 365.704 257.258 362.137 257.258 362.137 cv
cp
f
392.245 395.67 mo
437.264 399.361 li
435.956 425.229 415.695 445.654 400.966 447.415 cv
400.151 447.512 399.341 447.532 398.533 447.508 cv
392.245 395.67 li
cp
.537255 .462745 .486275 rgb
f
400.149 436.125 mo
395.637 398.926 li
403.127 399.54 li
403.498 402.033 403.792 404.649 403.975 407.375 cv
404.835 420.165 403.199 431.323 400.149 436.125 cv
cp
.737255 .65098 .682353 rgb
f
443.154 419.597 mo
446.474 412.071 448.772 404.523 450.113 397.248 cv
451.961 397.398 li
437.797 451.86 li
420.503 451.86 li
429.345 443.805 437.356 432.736 443.154 419.597 cv
cp
.509804 .423529 .447059 rgb
f
397.146 399.461 mo
397.212 397.604 398.784 396.099 400.658 396.099 cv
402.531 396.099 403.998 397.604 403.932 399.461 cv
403.867 401.317 402.295 402.822 400.421 402.822 cv
398.547 402.822 397.081 401.317 397.146 399.461 cv
cp
.317647 .254902 .27451 rgb
f
399.487 398.47 mo
400.909 397.578 li
416.88 423.996 432.783 438.203 445.215 437.423 cv
444.916 439.207 li
444.81 439.212 444.706 439.234 444.601 439.237 cv
427.236 439.741 409.169 414.486 399.487 398.47 cv
cp
f
398.673 399.461 mo
398.709 398.44 399.574 397.612 400.604 397.612 cv
401.635 397.612 402.441 398.44 402.405 399.461 cv
402.37 400.482 401.505 401.309 400.474 401.309 cv
399.444 401.309 398.637 400.482 398.673 399.461 cv
cp
.537255 .462745 .486275 rgb
f
341.379 261.329 mo
338.923 256.565 li
329.379 267.849 li
334.044 274.363 li
341.379 261.329 li
cp
.686275 .152941 .305882 rgb
f
323.203 273.132 mo
330.573 267.126 li
324.49 259.382 li
322.933 262.132 li
323.203 273.132 li
cp
f
347.137 269.851 mo
349.544 266.922 354.312 269.463 356.736 275.934 cv
352.316 278.094 347.157 280.061 341.503 281.669 cv
341.534 281.603 341.565 281.537 341.595 281.47 cv
343.389 277.582 345.239 273.685 347.137 269.851 cv
cp
.866667 .803922 .65098 rgb
f
298.969 327.208 mo
302.922 325.053 305.756 320.549 305.94 315.324 cv
305.948 315.089 305.936 314.86 305.934 314.628 cv
310.293 318.434 312.191 325.182 312.191 325.182 cv
312.191 325.182 308.839 335.336 301.58 337.053 cv
302.221 333.038 301.311 329.659 298.969 327.208 cv
cp
.576471 .121569 .27451 rgb
f
321.023 340.9 mo
324.416 338.425 327.462 334.488 329.377 329.625 cv
329.639 328.961 329.868 328.297 330.075 327.635 cv
334.951 331.471 336.67 338.845 336.67 338.845 cv
336.67 338.845 334.379 351.007 323.521 352.135 cv
324.312 347.33 324.188 343.409 321.023 340.9 cv
cp
f
343.753 384.401 mo
334.286 399.504 317.802 429.586 320.782 451.86 cv
314.123 451.86 li
314.878 422.068 332.162 396.304 342.48 383.512 cv
343.095 382.749 344.274 383.571 343.753 384.401 cv
cp
.298039 .490196 .576471 rgb
f
341.1 386.728 mo
357.755 378.108 li
344.533 380.799 li
332.918 378.546 li
341.1 386.728 li
cp
f
325.488 228.246 mo
325.794 226.218 326.676 224.724 327.455 224.917 cv
328.234 225.111 328.611 226.915 328.299 228.939 cv
327.988 230.953 327.111 232.426 326.338 232.237 cv
325.565 232.047 325.184 230.264 325.488 228.246 cv
cp
.352941 .286275 .286275 rgb
f
310.814 224.625 mo
311.087 222.576 311.949 221.067 312.738 221.263 cv
313.527 221.459 313.938 223.282 313.658 225.327 cv
313.38 227.362 312.521 228.85 311.739 228.658 cv
310.957 228.466 310.541 226.664 310.814 224.625 cv
cp
f
324.542 216.52 mo
330.637 219.511 li
331.382 219.876 331.811 220.86 331.595 221.706 cv
331.17 223.38 li
330.956 224.221 330.181 224.61 329.439 224.248 cv
323.372 221.293 li
322.624 220.929 322.183 219.945 322.39 219.094 cv
322.802 217.401 li
323.01 216.545 323.79 216.15 324.542 216.52 cv
cp
.486275 .176471 .219608 rgb
f
311.257 215.107 mo
316.049 214.138 li
316.638 214.019 317.156 214.647 317.207 215.54 cv
317.307 217.305 li
317.357 218.192 316.922 219.005 316.337 219.123 cv
311.573 220.084 li
310.988 220.202 310.467 219.581 310.41 218.696 cv
310.296 216.936 li
310.238 216.046 310.668 215.226 311.257 215.107 cv
cp
f
309.339 221.91 mo
317.82 223.951 li
316.628 232.472 li
316.331 234.593 314.5 235.929 312.534 235.467 cv
311.298 235.176 li
309.327 234.712 307.949 232.614 308.226 230.482 cv
309.339 221.91 li
cp
.980392 .941176 .858824 rgb
f
320.161 225.055 mo
330.147 227.487 li
328.835 235.99 li
328.516 238.055 326.831 239.382 325.067 238.961 cv
321.616 238.139 li
319.845 237.716 318.646 235.695 318.942 233.616 cv
320.161 225.055 li
cp
f
345.247 230.745 mo
345.42 232.987 li
309.195 224.074 li
309.475 221.906 li
345.247 230.745 li
cp
f
309.895 223.869 mo
316.022 225.338 li
315.173 231.502 li
314.961 233.041 313.634 234.013 312.208 233.676 cv
311.312 233.464 li
309.882 233.127 308.886 231.604 309.087 230.059 cv
309.895 223.869 li
cp
.929412 .72549 .517647 rgb
f
321.542 226.775 mo
328.419 228.427 li
327.486 234.537 li
327.253 236.063 325.769 236.99 324.168 236.611 cv
323.162 236.374 li
321.558 235.995 320.435 234.448 320.656 232.915 cv
321.542 226.775 li
cp
f
326.159 231.902 mo
325.385 231.713 325.002 229.928 325.306 227.909 cv
325.322 227.799 325.356 227.712 325.375 227.606 cv
328.142 228.275 li
328.129 228.387 328.135 228.488 328.117 228.602 cv
327.808 230.618 326.932 232.092 326.159 231.902 cv
cp
.352941 .286275 .286275 rgb
f
311.55 228.321 mo
310.767 228.129 310.349 226.326 310.62 224.285 cv
310.631 224.201 310.657 224.135 310.669 224.052 cv
313.481 224.732 li
313.471 224.82 313.478 224.899 313.466 224.988 cv
313.19 227.024 312.333 228.513 311.55 228.321 cv
cp
f
318.472 228.818 mo
318.472 228.818 318.581 229.238 318.71 229.884 cv
316.941 232.213 314.626 236.384 318.569 236.987 cv
318.52 237.097 318.495 237.227 318.439 237.33 cv
311.511 237.452 317.09 230.181 318.472 228.818 cv
cp
.823529 .458824 .345098 rgb
f
313.988 241.058 mo
323.995 242.706 li
323.995 242.706 321.809 249.426 317.761 248.184 cv
313.713 246.943 313.988 241.058 313.988 241.058 cv
cp
.176471 .0901961 .101961 rgb
f
322.093 244.918 mo
322.736 243.828 323.071 242.807 323.071 242.807 cv
314.727 241.433 li
314.727 241.433 314.658 242.957 315.179 244.486 cv
322.093 244.918 li
cp
.980392 .941176 .858824 rgb
f
337.785 232.456 mo
340.454 228.913 344.175 227.285 346.097 228.819 cv
348.019 230.353 347.413 234.468 344.745 238.01 cv
342.077 241.553 338.356 243.181 336.434 241.647 cv
334.512 240.113 335.117 235.998 337.785 232.456 cv
cp
.929412 .72549 .517647 rgb
f
339.248 233.623 mo
340.795 231.57 342.952 230.626 344.066 231.515 cv
345.18 232.404 344.829 234.789 343.282 236.843 cv
341.736 238.896 339.579 239.84 338.465 238.951 cv
337.351 238.062 337.702 235.676 339.248 233.623 cv
cp
.823529 .458824 .345098 rgb
f
337.943 236.584 mo
338.955 235.24 340.465 234.702 341.316 235.381 cv
342.166 236.06 342.036 237.699 341.024 239.042 cv
340.012 240.386 338.502 240.924 337.651 240.245 cv
336.801 239.566 336.932 237.927 337.943 236.584 cv
cp
.929412 .72549 .517647 rgb
f
206.308 252.182 mo
203.717 251.034 203.104 252.294 202.829 254.098 cv
202.558 255.886 202.721 257.548 205.257 258.753 cv
207.854 259.987 210.89 259.153 211.208 257.318 cv
211.528 255.465 208.961 253.357 206.308 252.182 cv
cp
f
210.213 247.231 mo
206.761 245.305 205.587 246.357 204.772 248.051 cv
203.964 249.729 203.809 251.416 207.166 253.388 cv
210.609 255.41 214.18 255.71 215.068 253.995 cv
215.963 252.263 213.755 249.207 210.213 247.231 cv
cp
f
213.629 239.931 mo
210.268 238.138 209.068 239.278 208.205 241.057 cv
207.35 242.819 207.142 244.555 210.408 246.396 cv
213.755 248.283 217.281 248.401 218.217 246.6 cv
219.162 244.782 217.076 241.77 213.629 239.931 cv
cp
f
217.144 229.235 mo
216.535 228.75 212.691 229.024 206.977 227.488 cv
202.967 226.41 198.945 230.616 199.975 235.197 cv
202.977 236.799 215.934 236.323 217.535 234.92 cv
219.284 233.387 218.471 230.294 217.144 229.235 cv
cp
f
241.449 192.518 mo
239.538 190.382 237.837 190.555 229.198 187.324 cv
225.999 186.128 222.452 187.414 220.661 190.372 cv
218.54 193.874 li
216.986 196.44 216.308 202.148 218.696 205.463 cv
221.202 208.943 225.04 209.464 228.456 210.561 cv
237.41 213.437 243.809 195.156 241.449 192.518 cv
cp
.905882 .607843 .411765 rgb
f
230.257 180.854 mo
227.917 178.369 222.297 180.042 217.84 184.392 cv
213.556 188.572 207.427 192.141 209.416 194.508 cv
211.434 196.91 221.276 197.464 225.837 193.349 cv
230.589 189.062 232.635 183.378 230.257 180.854 cv
cp
.929412 .72549 .517647 rgb
f
240.992 298.647 mo
234.065 298.647 li
211.852 421.227 li
218.779 421.227 li
240.992 298.647 li
cp
.4 .321569 .321569 rgb
f
214.524 406.481 mo
211.852 421.227 li
218.779 421.227 li
220.983 409.066 li
214.524 406.481 li
cp
.337255 .254902 .254902 rgb
f
237.198 319.579 mo
240.992 298.647 li
234.065 298.647 li
230.74 316.994 li
237.198 319.579 li
cp
.278431 .207843 .207843 rgb
f
190.19 416.234 mo
240.125 419.273 li
231.289 450.274 li
186.623 446.622 li
190.19 416.234 li
cp
.592157 .72549 .729412 rgb
f
208.605 417.355 mo
207.723 425.657 209.368 432.422 212.594 432.94 cv
215.982 433.483 219.869 426.938 221.508 418.14 cv
208.605 417.355 li
cp
.658824 .8 .8 rgb
f
145.025 147.733 mo
171.509 172.962 176.104 177.728 186.697 182.116 cv
197.291 186.503 189.081 214.475 180.871 215.298 cv
172.661 216.12 147.551 207.282 138.74 192.59 cv
129.929 177.898 145.025 147.733 145.025 147.733 cv
cp
.827451 .215686 .364706 rgb
f
186.146 195.675 mo
151.988 187.313 150.722 163.542 141.629 155.606 cv
137.779 165.569 132.767 182.63 138.74 192.59 cv
147.551 207.282 172.661 216.12 180.871 215.298 cv
186.578 214.726 192.278 201.039 191.669 191.271 cv
189.988 193.79 188.023 196.135 186.146 195.675 cv
cp
.717647 .152941 .341176 rgb
f
109.93 106.379 mo
106.406 94.7808 109.036 89.05 113.807 86.5941 cv
118.577 84.138 127.104 80.454 131.639 82.6371 cv
136.174 84.8203 140.878 99.2241 140.878 99.2241 cv
109.93 106.379 li
cp
.898039 .811765 .603922 rgb
f
131.639 82.6371 mo
127.384 80.5886 119.614 83.7056 114.731 86.127 cv
114.682 91.8239 120.024 98.277 128.186 101.685 cv
128.444 101.793 128.702 101.88 128.96 101.979 cv
140.878 99.2241 li
140.878 99.2241 136.174 84.8203 131.639 82.6371 cv
cp
.956863 .886275 .729412 rgb
f
150.239 104.481 mo
151.215 99.3864 149.262 94.731 145.878 94.0829 cv
142.494 93.4349 138.96 97.0396 137.984 102.134 cv
137.009 107.229 138.961 111.884 142.345 112.533 cv
145.729 113.181 149.264 109.576 150.239 104.481 cv
cp
.776471 .337255 .219608 rgb
f
125.444 99.0049 mo
123.636 98.8893 121.872 99.5045 120.131 99.9848 cv
117.216 100.789 114.178 101.237 111.136 101.311 cv
108.205 101.382 104.628 101.398 103.155 103.635 cv
101.834 105.64 103.147 108.068 103.851 110.266 cv
103.974 110.648 104.076 111.062 103.922 111.44 cv
103.494 112.491 101.542 112.465 100.99 113.474 cv
100.371 114.604 102.043 115.684 102.138 116.924 cv
102.174 117.388 101.98 117.845 101.941 118.311 cv
101.829 119.627 102.996 120.799 104.378 121.307 cv
105.759 121.815 107.318 121.804 108.827 121.784 cv
107.618 124.445 108.578 127.552 110.59 129.755 cv
112.602 131.959 115.517 133.39 118.496 134.491 cv
122.423 125.32 li
124.355 122.112 126.288 118.905 128.22 115.697 cv
130.027 112.699 131.88 109.543 131.866 106.181 cv
131.852 102.82 129.278 99.2498 125.444 99.0049 cv
cp
f
151.242 157.674 mo
150.403 148.886 140.547 143.482 130.263 140.192 cv
119.98 136.901 102.909 143.482 95.916 149.035 cv
78.9995 162.469 59.5769 203.757 64.1016 258.466 cv
142.416 255.172 li
135.646 222.891 153.4 180.277 151.242 157.674 cv
cp
.4 .286275 .337255 rgb
f
108.384 216.36 mo
118.533 182.586 115.264 152.071 106.104 143.363 cv
101.972 145.079 98.3347 147.115 95.9158 149.035 cv
78.9995 162.469 59.5769 203.757 64.1016 258.466 cv
94.4582 260.457 li
100.155 246.531 103.529 232.516 108.384 216.36 cv
cp
.337255 .231373 .286275 rgb
f
130.263 140.192 mo
119.98 136.901 102.909 143.482 95.9158 149.035 cv
92.857 151.465 89.7172 154.817 86.6508 158.982 cv
89.1282 159.631 91.9773 160.108 95.2946 160.363 cv
98.6547 160.606 102.069 160.78 105.541 160.861 cv
122.228 161.25 137.839 159.664 151.068 156.602 cv
149.559 148.448 140.119 143.345 130.263 140.192 cv
cp
.34902 .239216 .294118 rgb
f
141.809 449.934 mo
150.891 416.922 170.931 346.875 170.575 339.423 cv
170.219 331.972 139.724 247.694 139.724 247.694 cv
76.2634 245.605 li
76.2634 245.605 107.651 303.926 132.858 341.477 cv
136.422 371.915 133.036 413.841 141.809 449.934 cv
cp
.4 .286275 .337255 rgb
f
76.2634 245.605 mo
76.2634 245.605 105.682 304.489 130.889 342.04 cv
134.389 371.929 133.229 412.677 141.378 447.993 cv
147.091 405.215 150.277 342.413 149.456 335.57 cv
148.551 328.025 124.994 264.383 118.228 246.986 cv
76.2634 245.605 li
cp
.337255 .231373 .286275 rgb
f
341.969 452.402 mo
225.147 452.402 li
225.147 452.402 286.911 434.832 296.858 432.795 cv
306.804 430.757 341.969 452.402 341.969 452.402 cv
cp
.537255 .266667 .203922 rgb
f
54.5757 449.934 mo
74.3203 421.963 114.084 362.043 116.277 354.914 cv
118.471 347.784 121.488 293.623 121.488 293.623 cv
132.858 282.189 li
126.424 248.649 li
64.3538 235.917 li
62.1857 258.247 65.0651 311.125 78.0224 353.268 cv
71.0462 383.109 58.5707 413.006 54.5757 449.934 cv
cp
.4 .286275 .337255 rgb
f
55.6009 448.476 mo
63.502 414.879 87.4269 381.768 93.7549 354.699 cv
94.2894 328.041 93.6487 275.451 99.9439 244.421 cv
105.511 216.981 64.3212 217.467 63.5564 235.76 cv
61.3882 258.09 62.793 311.431 75.7504 353.574 cv
68.7741 383.416 58.5707 413.006 54.5757 449.934 cv
54.9072 449.465 55.2583 448.964 55.6009 448.476 cv
cp
.337255 .231373 .286275 rgb
f
68.5614 228.014 mo
67.4647 237.111 91.1854 247.553 96.3273 238.503 cv
101.469 229.453 113.192 184.617 111.753 169.191 cv
111.212 163.399 105.252 153.314 100.441 153.56 cv
80.3534 154.589 72.0579 199.014 68.5614 228.014 cv
cp
.647059 .12549 .32549 rgb
f
119.157 170.22 mo
119.98 179.269 114.906 195.586 119.568 196.957 cv
124.23 198.328 139.244 195.86 141.987 192.021 cv
143.488 189.919 146.767 177.485 147.873 165.604 cv
148.984 153.652 141.718 142.492 130.289 138.826 cv
130.212 138.801 130.135 138.777 130.058 138.752 cv
122.345 136.284 110.117 140.316 103.272 144.615 cv
113.255 151.445 118.535 163.379 119.157 170.22 cv
cp
.827451 .215686 .364706 rgb
f
147.354 157.623 mo
145.428 148.951 139.107 141.655 130.289 138.826 cv
130.212 138.801 130.135 138.777 130.058 138.752 cv
122.345 136.284 110.117 140.316 103.272 144.615 cv
109.525 148.893 113.931 155.173 116.505 160.95 cv
118.202 161.033 119.925 161.08 121.676 161.08 cv
131.3 161.08 140.185 159.794 147.354 157.623 cv
cp
.717647 .152941 .341176 rgb
f
113.905 139.691 mo
116.277 129.085 120.055 113.651 120.055 113.651 cv
141.575 119.007 li
138.768 145.539 li
130.341 151.878 122.037 150.908 113.905 139.691 cv
cp
.823529 .458824 .345098 rgb
f
110.391 159.483 mo
133.626 191.09 145.401 205.32 156.255 212.172 cv
167.109 219.024 152.269 244.242 142.992 243.041 cv
133.714 241.84 103.529 221.922 94.5506 206.313 cv
71.711 166.606 98.0032 142.631 110.391 159.483 cv
cp
.827451 .215686 .364706 rgb
f
151.968 222.341 mo
142.691 221.14 112.505 201.221 103.527 185.613 cv
97.0025 174.27 94.4982 164.219 94.523 156.029 cv
85.4344 161.997 77.5781 181.841 92.179 207.225 cv
101.157 222.834 133.714 241.84 142.992 243.041 cv
150.319 243.99 161.107 228.46 159.972 218.513 cv
157.302 221.096 154.439 222.661 151.968 222.341 cv
cp
.717647 .152941 .341176 rgb
f
74.9374 452.402 mo
50.8737 452.402 li
50.8737 452.402 52.1414 442.269 56.4268 441.707 cv
60.7122 441.146 74.9374 452.402 74.9374 452.402 cv
cp
.956863 .909804 .827451 rgb
f
160.908 452.402 mo
136.845 452.402 li
136.845 452.402 138.112 442.269 142.398 441.707 cv
146.683 441.146 160.908 452.402 160.908 452.402 cv
cp
f
266.144 452.402 mo
149.322 452.402 li
149.322 452.402 189.908 423.882 198.684 421.688 cv
207.459 419.495 266.144 452.402 266.144 452.402 cv
cp
.658824 .376471 .298039 rgb
f
196.966 201.91 mo
199.502 191.63 194.608 181.854 186.036 180.074 cv
177.463 178.293 168.417 183.117 165.465 195.368 cv
162.514 207.619 168.279 215.519 176.851 217.299 cv
185.424 219.079 194.43 212.189 196.966 201.91 cv
cp
.898039 .823529 .639216 rgb
f
168.619 187.731 mo
170.788 191.186 174.23 193.45 178.328 194.301 cv
184.52 195.587 190.925 192.335 194.968 186.565 cv
192.941 183.256 189.857 180.867 186.035 180.073 cv
179.552 178.727 172.803 181.166 168.619 187.731 cv
cp
.937255 .898039 .780392 rgb
f
178.798 215.284 mo
198.852 217.73 223.595 210.463 225.978 208.818 cv
228.362 207.172 231.937 189.69 228.163 188.045 cv
224.389 186.399 195.502 184.225 187.577 182.56 cv
170.463 178.965 162.866 213.341 178.798 215.284 cv
cp
.929412 .72549 .517647 rgb
f
213.153 208.975 mo
193.045 208.975 176.745 198.681 176.745 185.984 cv
176.745 185.948 176.753 185.913 176.753 185.876 cv
168.137 194.114 166.846 213.826 178.798 215.284 cv
198.852 217.73 223.595 210.463 225.978 208.818 cv
226.315 208.585 226.676 208.011 227.036 207.235 cv
222.756 208.351 218.072 208.975 213.153 208.975 cv
cp
.905882 .607843 .411765 rgb
f
163.229 343.074 mo
185.586 308.033 201.999 269.704 217.596 231.302 cv
233.139 193.036 247.977 154.327 267.553 117.879 cv
278.472 97.5497 290.901 78.0144 305.443 60.0729 cv
306.029 59.3494 303.023 59.6563 302.39 60.4374 cv
276.386 92.5198 255.729 129.224 239.343 166.942 cv
222.811 204.998 208.637 244.048 191.337 281.774 cv
181.65 302.899 170.957 323.589 158.449 343.194 cv
157.924 344.016 162.471 344.262 163.229 343.074 cv
cp
.537255 .266667 .203922 rgb
f
238.67 178.909 mo
260.513 150.465 291.307 128.582 324.56 115.16 cv
333.939 111.374 343.589 108.317 353.435 106.009 cv
354.083 105.858 355.38 105.468 355.002 104.603 cv
354.657 103.817 352.445 104.16 351.905 104.287 cv
316.038 112.691 282.577 130.792 255.937 156.245 cv
248.4 163.446 241.44 171.233 235.092 179.5 cv
234.482 180.294 236.641 180.491 236.948 180.492 cv
237.932 180.494 238.032 179.74 238.67 178.909 cv
cp
f
287.205 133.869 mo
299.413 116.121 315.61 101.304 334.46 90.8592 cv
337.286 89.2932 334.515 88.2929 332.652 89.3248 cv
313.2 100.104 297.17 115.943 284.562 134.274 cv
283.138 136.345 286.157 135.393 287.205 133.869 cv
cp
f
269.442 113.743 mo
285.317 91.2408 305.667 76.1985 327.696 61.8886 cv
333.925 57.8426 340.417 53.8551 346.714 49.9164 cv
349.452 48.2039 347.011 47.4 345.011 48.6511 cv
322.388 62.8017 299.611 77.131 280.421 95.857 cv
274.991 101.156 265.306 114.492 266.161 114.74 cv
267.329 115.079 268.675 114.666 269.442 113.743 cv
cp
f
284.131 88.7637 mo
286.665 70.4341 288.802 53.0441 290.606 36.092 cv
290.88 33.5181 287.508 29.8084 287.486 32.0627 cv
287.314 49.4633 287.578 65.454 281.111 89.4627 cv
280.439 91.9584 283.819 91.0071 284.131 88.7637 cv
cp
f
249.051 150.298 mo
248.335 137.288 245.703 125.954 247.853 113.01 cv
249.899 100.69 258.176 89.6937 264.521 79.0948 cv
265.1 78.1272 262.85 77.6694 262.27 78.6384 cv
255.788 89.4646 247.204 101.235 245.288 113.859 cv
243.316 126.842 244.844 140.203 245.561 153.235 cv
245.658 154.999 249.051 150.298 249.051 150.298 cv
cp
f
248.684 107.173 mo
247.822 96.5853 247.679 86.8412 244.349 76.7541 cv
243.984 75.6487 241.661 75.1009 242.022 76.1928 cv
245.352 86.2799 245.825 97.963 246.687 108.551 cv
246.86 110.671 248.684 107.173 248.684 107.173 cv
cp
f
317.587 118.082 mo
327.299 119.474 339.578 119.146 348.16 124.358 cv
349.072 124.912 351.447 124.386 350.504 123.814 cv
341.383 118.274 330.173 117.534 319.852 116.055 cv
318.894 115.918 317.241 116.048 316.543 116.819 cv
315.817 117.62 316.907 117.984 317.587 118.082 cv
cp
f
315.288 131.421 mo
314.818 130.043 314.335 128.603 313.297 127.583 cv
311.785 126.097 309.451 125.849 307.337 126.006 cv
305.219 126.163 302.96 126.74 301.622 128.389 cv
301.431 128.624 301.258 128.889 301.21 129.188 cv
301.175 129.413 301.213 129.641 301.257 129.864 cv
301.585 131.516 302.34 133.158 303.696 134.158 cv
304.577 134.808 305.653 135.146 306.733 135.331 cv
309.27 135.766 311.94 135.396 314.263 134.288 cv
316.066 133.149 li
315.706 132.627 315.493 132.021 315.288 131.421 cv
cp
.698039 .709804 .262745 rgb
f
256.202 112.43 mo
255.192 112.208 254.139 111.969 253.136 112.224 cv
251.675 112.594 250.663 113.921 249.978 115.263 cv
249.292 116.608 248.808 118.194 249.317 119.616 cv
249.389 119.819 249.486 120.022 249.651 120.161 cv
249.774 120.265 249.927 120.327 250.078 120.382 cv
251.203 120.793 252.479 120.94 253.587 120.485 cv
254.307 120.19 254.91 119.66 255.421 119.073 cv
256.621 117.691 257.382 115.933 257.566 114.111 cv
257.54 112.595 li
257.09 112.622 256.643 112.527 256.202 112.43 cv
cp
f
337.552 95.1432 mo
336.313 95.6594 335.019 96.1913 333.947 97.1941 cv
332.385 98.6546 331.659 100.77 331.314 102.661 cv
330.969 104.555 330.938 106.548 331.996 107.64 cv
332.147 107.795 332.326 107.933 332.562 107.955 cv
332.738 107.972 332.935 107.922 333.128 107.868 cv
334.562 107.46 336.082 106.67 337.209 105.383 cv
337.942 104.547 338.46 103.556 338.854 102.573 cv
339.781 100.261 340.075 97.8853 339.683 95.8704 cv
339.149 94.3265 li
338.639 94.6859 338.091 94.9184 337.552 95.1432 cv
cp
f
347.72 96.8375 mo
346.76 96.9459 345.76 97.054 344.819 97.5319 cv
343.447 98.228 342.522 99.5439 341.905 100.781 cv
341.287 102.021 340.866 103.391 341.378 104.357 cv
341.452 104.495 341.548 104.626 341.706 104.689 cv
341.825 104.736 341.971 104.741 342.115 104.742 cv
343.187 104.748 344.395 104.507 345.432 103.843 cv
346.105 103.412 346.662 102.832 347.131 102.231 cv
348.234 100.82 348.913 99.2375 349.046 97.767 cv
348.986 96.5933 li
348.562 96.7393 348.137 96.7904 347.72 96.8375 cv
cp
f
321.232 107.069 mo
320.457 106.515 319.651 105.934 318.664 105.707 cv
317.227 105.376 315.742 105.873 314.534 106.51 cv
313.323 107.149 312.178 108.032 311.97 109.199 cv
311.94 109.366 311.931 109.542 312.011 109.702 cv
312.07 109.822 312.175 109.925 312.281 110.023 cv
313.07 110.749 314.11 111.357 315.28 111.49 cv
316.04 111.577 316.805 111.458 317.517 111.263 cv
319.191 110.804 320.655 109.914 321.647 108.753 cv
322.317 107.714 li
321.914 107.552 321.569 107.31 321.232 107.069 cv
cp
f
308.572 67.8245 mo
307.797 67.2709 306.991 66.6895 306.005 66.4625 cv
304.567 66.1317 303.083 66.6284 301.874 67.2662 cv
300.664 67.9051 299.519 68.788 299.31 69.9551 cv
299.28 70.1217 299.272 70.2978 299.351 70.4579 cv
299.41 70.5777 299.515 70.6804 299.621 70.7782 cv
300.41 71.5048 301.451 72.113 302.62 72.2461 cv
303.381 72.3326 304.146 72.2136 304.857 72.0184 cv
306.531 71.56 307.995 70.6702 308.988 69.5083 cv
309.658 68.4694 li
309.255 68.308 308.91 68.0657 308.572 67.8245 cv
cp
f
286.767 110.938 mo
286.158 112.135 285.518 113.379 285.352 114.837 cv
285.11 116.962 285.929 119.043 286.893 120.706 cv
287.858 122.372 289.126 123.909 290.64 124.054 cv
290.856 124.075 291.081 124.064 291.275 123.927 cv
291.421 123.826 291.538 123.66 291.65 123.493 cv
292.477 122.254 293.122 120.666 293.145 118.956 cv
293.161 117.844 292.913 116.753 292.576 115.749 cv
291.782 113.389 290.465 111.39 288.861 110.11 cv
287.453 109.281 li
287.298 109.885 287.032 110.417 286.767 110.938 cv
cp
f
295.606 105.635 mo
294.946 106.34 294.255 107.071 293.848 108.045 cv
293.255 109.464 293.404 111.066 293.737 112.408 cv
294.07 113.752 294.638 115.068 295.655 115.472 cv
295.8 115.529 295.958 115.567 296.119 115.512 cv
296.24 115.47 296.354 115.38 296.465 115.287 cv
297.285 114.596 298.048 113.629 298.407 112.452 cv
298.64 111.687 298.688 110.884 298.656 110.123 cv
298.58 108.333 298.071 106.689 297.219 105.483 cv
296.412 104.628 li
296.184 105.014 295.894 105.328 295.606 105.635 cv
cp
f
238.084 100.486 mo
237.988 101.446 237.883 102.447 238.151 103.468 cv
238.542 104.955 239.634 106.137 240.713 107.001 cv
241.794 107.867 243.045 108.567 244.098 108.27 cv
244.248 108.228 244.396 108.162 244.491 108.02 cv
244.562 107.914 244.598 107.772 244.629 107.631 cv
244.861 106.585 244.88 105.353 244.45 104.2 cv
244.171 103.451 243.721 102.784 243.233 102.198 cv
242.086 100.823 240.682 99.8254 239.273 99.3852 cv
238.113 99.1959 li
238.166 99.6414 238.126 100.067 238.084 100.486 cv
cp
f
252.642 72.6161 mo
251.965 73.6232 251.255 74.6697 250.947 75.9606 cv
250.497 77.8408 251.005 79.7983 251.688 81.3959 cv
252.373 82.9964 253.343 84.5147 254.685 84.8101 cv
254.877 84.8523 255.08 84.8669 255.27 84.7659 cv
255.411 84.6902 255.535 84.5549 255.653 84.4171 cv
256.531 83.395 257.283 82.041 257.491 80.5086 cv
257.626 79.5124 257.523 78.5065 257.33 77.5685 cv
256.876 75.3633 255.912 73.4255 254.612 72.1016 cv
253.439 71.2037 li
253.234 71.7291 252.937 72.1773 252.642 72.6161 cv
cp
f
261.154 68.8224 mo
260.485 69.3824 259.785 69.9631 259.313 70.793 cv
258.626 72.0017 258.585 73.4557 258.737 74.6962 cv
258.889 75.9392 259.255 77.1824 260.123 77.6556 cv
260.247 77.7231 260.385 77.774 260.536 77.7421 cv
260.649 77.7183 260.761 77.6495 260.871 77.5781 cv
261.682 77.048 262.473 76.2634 262.923 75.2465 cv
263.216 74.5853 263.346 73.8698 263.401 73.1832 cv
263.529 71.5688 263.251 70.0369 262.618 68.8618 cv
261.988 68.0064 li
261.741 68.3282 261.446 68.5784 261.154 68.8224 cv
cp
f
317.386 86.4766 mo
316.611 87.3946 315.799 88.3494 315.354 89.4749 cv
314.706 91.1146 314.989 92.7325 315.483 94.0286 cv
315.979 95.3268 316.764 96.5292 318.048 96.6578 cv
318.232 96.6761 318.43 96.67 318.627 96.5668 cv
318.774 96.4896 318.91 96.3632 319.041 96.2353 cv
320.015 95.2862 320.902 94.0662 321.275 92.7444 cv
321.517 91.8849 321.527 91.0392 321.44 90.2593 cv
321.237 88.4258 320.505 86.8662 319.375 85.8593 cv
318.323 85.2029 li
318.064 85.6684 317.723 86.0766 317.386 86.4766 cv
cp
f
336.586 41.5355 mo
335.811 42.4536 334.999 43.4083 334.554 44.5339 cv
333.906 46.1736 334.189 47.7915 334.684 49.0875 cv
335.179 50.3858 335.964 51.5881 337.249 51.7167 cv
337.432 51.7352 337.63 51.7289 337.827 51.6257 cv
337.974 51.5485 338.11 51.4221 338.241 51.2943 cv
339.215 50.3451 340.102 49.1251 340.475 47.8033 cv
340.717 46.944 340.727 46.0981 340.64 45.3182 cv
340.437 43.4847 339.705 41.9252 338.575 40.9183 cv
337.523 40.262 li
337.264 40.7274 336.923 41.1355 336.586 41.5355 cv
cp
f
232.739 77.4778 mo
233.051 78.6382 233.37 79.8502 234.041 80.858 cv
235.017 82.326 236.506 83.018 237.853 83.3522 cv
239.201 83.6868 240.637 83.7291 241.476 82.7479 cv
241.596 82.6079 241.704 82.4417 241.731 82.2213 cv
241.752 82.0565 241.726 81.8723 241.696 81.6917 cv
241.473 80.3503 240.978 78.9254 240.106 77.8647 cv
239.538 77.1752 238.85 76.684 238.16 76.3097 cv
236.539 75.4293 234.841 75.1397 233.369 75.4925 cv
232.229 75.9812 li
232.463 76.4598 232.604 76.9724 232.739 77.4778 cv
cp
f
262.43 92.8932 mo
261.229 92.8464 259.977 92.7926 258.816 93.1339 cv
257.124 93.631 256.022 94.8482 255.303 96.0349 cv
254.584 97.2237 254.118 98.5816 254.807 99.6737 cv
254.905 99.8297 255.032 99.9821 255.234 100.074 cv
255.386 100.142 255.569 100.172 255.751 100.197 cv
257.098 100.382 258.606 100.331 259.877 99.8126 cv
260.704 99.4753 261.377 98.9631 261.939 98.4156 cv
263.26 97.1285 264.04 95.5926 264.14 94.0823 cv
264.011 92.8494 li
263.484 92.931 262.953 92.9135 262.43 92.8932 cv
cp
f
325.235 84.8847 mo
324.516 85.4603 323.763 86.0577 323.262 86.8382 cv
322.532 87.9753 322.505 89.2338 322.685 90.2815 cv
322.865 91.3313 323.277 92.3517 324.224 92.6387 cv
324.359 92.6798 324.509 92.7045 324.672 92.6561 cv
324.794 92.6198 324.915 92.5449 325.033 92.4683 cv
325.906 91.8989 326.754 91.1129 327.23 90.1743 cv
327.539 89.564 327.672 88.9293 327.723 88.3301 cv
327.842 86.9213 327.522 85.6401 326.822 84.7154 cv
326.128 84.066 li
325.864 84.3775 325.548 84.6341 325.235 84.8847 cv
cp
f
295.844 53.3135 mo
295.253 54.3597 294.633 55.4487 294.405 56.6373 cv
294.073 58.3687 294.651 59.9061 295.378 61.0875 cv
296.106 62.2712 297.101 63.3067 298.387 63.1944 cv
298.571 63.1783 298.764 63.1355 298.938 62.9975 cv
299.068 62.8943 299.179 62.7449 299.284 62.5948 cv
300.065 61.4813 300.71 60.1176 300.83 58.7496 cv
300.908 57.8602 300.761 57.0272 300.531 56.277 cv
299.991 54.5133 298.982 53.1169 297.684 52.3375 cv
296.528 51.8881 li
296.36 52.3936 296.102 52.8578 295.844 53.3135 cv
cp
f
303.261 50.2911 mo
302.661 50.9902 302.033 51.717 301.686 52.577 cv
301.18 53.8298 301.387 55.0716 301.758 56.0677 cv
302.13 57.0657 302.724 57.9918 303.708 58.0979 cv
303.849 58.1131 304 58.1096 304.152 58.0316 cv
304.265 57.9733 304.37 57.8773 304.471 57.78 cv
305.223 57.0583 305.911 56.1286 306.204 55.1178 cv
306.395 54.4606 306.407 53.8124 306.345 53.2142 cv
306.201 51.8079 305.649 50.6082 304.789 49.8298 cv
303.986 49.3206 li
303.785 49.6758 303.522 49.9866 303.261 50.2911 cv
cp
f
353.991 115.352 mo
352.972 114.72 351.912 114.056 350.713 113.746 cv
348.965 113.293 347.331 113.695 346.048 114.264 cv
344.763 114.834 343.605 115.661 343.599 116.854 cv
343.598 117.025 343.624 117.207 343.749 117.379 cv
343.843 117.507 343.986 117.622 344.13 117.731 cv
345.2 118.544 346.54 119.253 347.934 119.48 cv
348.84 119.627 349.71 119.562 350.503 119.414 cv
352.366 119.067 353.896 118.256 354.82 117.128 cv
355.391 116.103 li
354.888 115.905 354.435 115.628 353.991 115.352 cv
cp
f
348.17 130.804 mo
348.153 129.605 348.139 128.355 347.752 127.177 cv
347.189 125.462 345.969 124.303 344.797 123.53 cv
343.624 122.756 342.302 122.228 341.294 122.867 cv
341.15 122.958 341.011 123.077 340.934 123.276 cv
340.876 123.424 340.857 123.606 340.843 123.787 cv
340.737 125.126 340.863 126.637 341.425 127.933 cv
341.79 128.776 342.315 129.473 342.867 130.06 cv
344.166 131.441 345.674 132.292 347.123 132.46 cv
348.294 132.388 li
348.189 131.857 348.178 131.327 348.17 130.804 cv
cp
f
360.776 121.239 mo
359.889 120.557 358.965 119.841 357.914 119.441 cv
356.383 118.857 354.938 119.078 353.801 119.486 cv
352.661 119.895 351.63 120.556 351.607 121.664 cv
351.603 121.822 351.623 121.993 351.731 122.164 cv
351.811 122.292 351.936 122.412 352.061 122.527 cv
352.991 123.382 354.16 124.167 355.384 124.508 cv
356.18 124.729 356.946 124.75 357.646 124.687 cv
359.291 124.538 360.65 123.928 361.48 122.967 cv
361.997 122.067 li
361.557 121.837 361.163 121.537 360.776 121.239 cv
cp
f
348.534 38.0576 mo
347.39 38.4172 346.195 38.7879 345.178 39.4948 cv
343.695 40.5244 342.933 42.0251 342.528 43.3684 cv
342.121 44.7141 341.993 46.1318 342.893 46.915 cv
343.022 47.0269 343.176 47.1259 343.388 47.1431 cv
343.547 47.1559 343.727 47.1219 343.904 47.0842 cv
345.218 46.8031 346.63 46.2502 347.711 45.3414 cv
348.414 44.7506 348.932 44.0489 349.337 43.3516 cv
350.289 41.7126 350.673 40.0241 350.42 38.5881 cv
350.016 37.4862 li
349.537 37.7388 349.032 37.9009 348.534 38.0576 cv
cp
f
336.109 63.5532 mo
335.057 62.9765 333.963 62.371 332.748 62.1259 cv
330.979 61.7686 329.369 62.2578 328.118 62.8948 cv
326.865 63.5329 325.753 64.4218 325.811 65.6136 cv
325.819 65.7838 325.855 65.9639 325.989 66.1287 cv
326.09 66.252 326.239 66.3585 326.389 66.4601 cv
327.501 67.2139 328.877 67.8499 330.282 68.0013 cv
331.195 68.0997 332.06 67.9879 332.843 67.7974 cv
334.685 67.3499 336.17 66.4582 337.032 65.2819 cv
337.547 64.2272 li
337.034 64.0569 336.567 63.8044 336.109 63.5532 cv
cp
f
297.629 35.2724 mo
296.471 35.5818 295.261 35.9002 294.214 36.5621 cv
292.687 37.5262 291.861 38.9925 291.397 40.3169 cv
290.932 41.6438 290.742 43.0547 291.608 43.8763 cv
291.731 43.9938 291.881 44.0994 292.092 44.1258 cv
292.25 44.1456 292.431 44.1195 292.61 44.0895 cv
293.935 43.866 295.369 43.375 296.489 42.5142 cv
297.217 41.9545 297.765 41.2759 298.2 40.597 cv
299.223 39.0008 299.68 37.3304 299.491 35.8846 cv
299.135 34.7661 li
298.646 34.9976 298.134 35.1375 297.629 35.2724 cv
cp
f
278.655 31.1874 mo
278.573 32.3847 278.481 33.633 278.768 34.8398 cv
279.185 36.5979 280.304 37.8568 281.407 38.7265 cv
282.511 39.598 283.784 40.2364 284.842 39.6848 cv
284.993 39.6061 285.142 39.4985 285.235 39.3073 cv
285.305 39.1643 285.339 38.9841 285.369 38.8054 cv
285.587 37.4785 285.588 35.9611 285.137 34.6212 cv
284.843 33.7499 284.379 33.0104 283.878 32.3781 cv
282.699 30.8911 281.268 29.915 279.838 29.6245 cv
278.665 29.5978 li
278.725 30.1358 278.692 30.6658 278.655 31.1874 cv
cp
f
279.67 46.6282 mo
279.671 47.6324 279.668 48.6798 279.964 49.6513 cv
280.395 51.0665 281.356 51.9896 282.282 52.5912 cv
283.21 53.1941 284.259 53.5848 285.07 53.0101 cv
285.186 52.928 285.298 52.8222 285.362 52.6531 cv
285.41 52.5266 285.427 52.373 285.44 52.2213 cv
285.539 51.0946 285.455 49.8334 285.021 48.7694 cv
284.738 48.0777 284.327 47.5142 283.893 47.0437 cv
282.872 45.9374 281.677 45.2836 280.523 45.1992 cv
279.588 45.3061 li
279.666 45.7466 279.669 46.1908 279.67 46.6282 cv
cp
f
352.345 51.4625 mo
351.315 51.024 350.242 50.5627 349.124 50.4387 cv
347.495 50.2578 346.152 50.8334 345.153 51.5139 cv
344.153 52.1955 343.319 53.0936 343.575 54.1718 cv
343.611 54.3258 343.673 54.4865 343.821 54.6254 cv
343.931 54.7293 344.081 54.814 344.231 54.8941 cv
345.346 55.4886 346.674 55.9547 347.945 55.9781 cv
348.77 55.9933 349.518 55.8214 350.179 55.5847 cv
351.735 55.0283 352.897 54.0974 353.459 52.9584 cv
353.735 51.9582 li
353.251 51.8452 352.794 51.6536 352.345 51.4625 cv
cp
f
301.234 140.401 mo
301.805 139.384 302.408 138.326 302.519 137.217 cv
302.681 135.602 301.766 134.258 300.72 133.255 cv
299.672 132.251 298.322 131.409 296.777 131.645 cv
296.556 131.679 296.327 131.738 296.135 131.883 cv
295.991 131.99 295.878 132.138 295.771 132.286 cv
294.979 133.384 294.385 134.696 294.429 135.957 cv
294.457 136.778 294.752 137.523 295.135 138.183 cv
296.035 139.737 297.454 140.907 299.137 141.484 cv
300.601 141.774 li
300.735 141.295 300.985 140.844 301.234 140.401 cv
cp
f
208.444 345.098 mo
198.213 332.36 182.682 325.189 167.38 319.463 cv
158.063 315.976 148.609 312.859 139.047 310.119 cv
136.966 312.489 134.849 314.918 133.65 317.835 cv
132.452 320.752 132.319 324.3 134.105 326.899 cv
135.107 328.357 136.672 329.491 137.16 331.193 cv
138.003 334.133 135.246 336.907 135.014 339.957 cv
134.83 342.392 136.26 344.608 137.288 346.823 cv
138.712 349.893 139.426 353.291 139.357 356.675 cv
137.033 359.482 136.42 363.424 137.048 367.014 cv
137.677 370.604 139.419 373.902 141.39 376.967 cv
143.55 380.327 146.014 383.491 148.743 386.409 cv
149.031 386.429 li
148.905 386.55 148.829 386.723 148.966 386.86 cv
149.283 387.177 149.816 386.971 150.215 386.767 cv
152.527 385.588 155.155 385.035 157.746 385.183 cv
158.793 385.242 159.906 385.402 160.842 384.928 cv
161.917 384.384 162.443 383.17 162.886 382.049 cv
163.521 380.444 164.155 378.839 164.79 377.234 cv
165.051 376.573 165.332 375.884 165.874 375.424 cv
166.497 374.894 167.352 374.761 168.148 374.576 cv
170.462 374.042 172.597 372.936 174.704 371.842 cv
178.139 370.057 181.573 368.273 185.008 366.489 cv
185.445 366.262 185.898 366.022 186.192 365.627 cv
186.585 365.102 186.626 364.405 186.738 363.758 cv
186.963 362.449 187.538 361.201 188.386 360.179 cv
189.079 359.344 189.948 358.659 190.572 357.772 cv
191.196 356.885 191.543 355.678 191.043 354.715 cv
196.431 350.83 202.287 347.593 208.444 345.098 cv
cp
.8 .411765 .321569 rgb
f
174.669 327.974 mo
161.452 321.866 148.36 317.131 136.001 313.797 cv
135.069 315.058 134.246 316.386 133.65 317.835 cv
132.452 320.752 132.319 324.299 134.105 326.899 cv
135.107 328.357 136.672 329.491 137.16 331.193 cv
138.003 334.133 135.246 336.907 135.014 339.957 cv
134.83 342.392 136.26 344.608 137.288 346.823 cv
138.713 349.893 139.426 353.291 139.357 356.675 cv
137.033 359.482 136.42 363.424 137.048 367.014 cv
137.677 370.604 139.419 373.902 141.39 376.967 cv
143.55 380.327 146.014 383.491 148.743 386.409 cv
149.031 386.429 li
148.905 386.55 148.829 386.723 148.966 386.86 cv
149.283 387.177 149.816 386.971 150.215 386.767 cv
152.527 385.588 155.155 385.035 157.746 385.183 cv
158.793 385.242 159.906 385.402 160.842 384.928 cv
161.917 384.384 162.443 383.17 162.886 382.049 cv
163.521 380.444 164.155 378.839 164.79 377.234 cv
165.051 376.573 165.332 375.884 165.874 375.424 cv
166.497 374.894 167.352 374.761 168.148 374.576 cv
170.462 374.042 172.597 372.936 174.704 371.842 cv
178.139 370.057 181.573 368.273 185.008 366.489 cv
185.445 366.262 185.898 366.022 186.192 365.627 cv
186.585 365.102 186.626 364.405 186.738 363.758 cv
186.963 362.449 187.538 361.201 188.386 360.179 cv
189.079 359.344 189.948 358.659 190.572 357.772 cv
191.196 356.885 191.543 355.678 191.043 354.715 cv
195.969 351.164 201.298 348.185 206.878 345.789 cv
197.218 339.433 186.389 333.39 174.669 327.974 cv
cp
.658824 .376471 .298039 rgb
f
206.683 345.664 mo
197.666 348.229 187.192 349.706 176.006 349.706 cv
160.336 349.706 146.049 346.819 135.236 342.077 cv
135.656 343.709 136.566 345.267 137.288 346.823 cv
138.713 349.893 139.426 353.291 139.357 356.675 cv
137.033 359.482 136.42 363.424 137.048 367.014 cv
137.677 370.604 139.419 373.902 141.39 376.967 cv
143.55 380.327 146.014 383.491 148.743 386.409 cv
149.031 386.429 li
148.905 386.55 148.829 386.723 148.966 386.86 cv
149.283 387.177 149.816 386.971 150.215 386.767 cv
152.527 385.588 155.155 385.035 157.746 385.183 cv
158.793 385.242 159.906 385.402 160.842 384.928 cv
161.917 384.384 162.443 383.17 162.886 382.049 cv
163.521 380.444 164.155 378.839 164.79 377.234 cv
165.051 376.573 165.332 375.884 165.874 375.424 cv
166.497 374.894 167.352 374.761 168.148 374.576 cv
170.462 374.042 172.597 372.936 174.704 371.842 cv
178.139 370.057 181.573 368.273 185.008 366.489 cv
185.445 366.262 185.898 366.022 186.192 365.627 cv
186.585 365.102 186.626 364.405 186.738 363.758 cv
186.963 362.449 187.538 361.201 188.386 360.179 cv
189.079 359.344 189.948 358.659 190.572 357.772 cv
191.196 356.885 191.543 355.678 191.043 354.715 cv
195.969 351.164 201.298 348.185 206.878 345.789 cv
206.814 345.747 206.747 345.706 206.683 345.664 cv
cp
.576471 .305882 .243137 rgb
f
188.56 354.348 mo
166.537 354.348 148.683 367.478 148.683 383.675 cv
148.683 384.601 148.748 385.514 148.862 386.417 cv
149.031 386.429 li
148.905 386.55 148.829 386.723 148.966 386.86 cv
149.283 387.177 149.816 386.971 150.215 386.767 cv
152.527 385.588 155.155 385.035 157.746 385.183 cv
158.793 385.242 159.906 385.402 160.842 384.928 cv
161.917 384.384 162.443 383.17 162.886 382.049 cv
163.521 380.444 164.155 378.839 164.79 377.234 cv
165.051 376.573 165.332 375.884 165.874 375.424 cv
166.497 374.894 167.352 374.761 168.148 374.576 cv
170.462 374.042 172.597 372.936 174.704 371.842 cv
178.139 370.057 181.573 368.273 185.008 366.489 cv
185.445 366.262 185.898 366.022 186.192 365.627 cv
186.585 365.102 186.626 364.405 186.738 363.758 cv
186.963 362.449 187.538 361.201 188.386 360.179 cv
189.079 359.344 189.948 358.659 190.572 357.772 cv
191.196 356.885 191.543 355.678 191.043 354.715 cv
191.179 354.617 191.322 354.53 191.459 354.433 cv
190.5 354.383 189.536 354.348 188.56 354.348 cv
cp
.517647 .262745 .211765 rgb
f
164.13 236.843 mo
169.953 228 168.604 217.151 161.117 212.61 cv
153.631 208.07 143.493 209.597 136.621 220.159 cv
129.749 230.721 132.546 240.092 140.032 244.633 cv
147.519 249.173 158.308 245.685 164.13 236.843 cv
cp
.898039 .823529 .639216 rgb
f
166.84 219.801 mo
165.801 216.824 163.88 214.286 161.117 212.61 cv
154.786 208.77 146.566 209.295 140.021 215.929 cv
141.211 218.991 143.415 221.535 146.362 223.322 cv
152.488 227.038 160.822 225.372 166.84 219.801 cv
cp
.937255 .898039 .780392 rgb
f
143.899 244.522 mo
161.998 254.995 191.123 253.169 194.006 252.47 cv
196.889 251.771 206.363 236.619 203.257 233.733 cv
200.15 230.847 168.954 219.162 161.287 215.226 cv
149.342 209.095 131.502 237.349 143.899 244.522 cv
cp
.929412 .72549 .517647 rgb
f
179.26 249.475 mo
159.794 243.597 146.75 229.773 150.124 218.6 cv
150.309 217.988 150.558 217.406 150.831 216.836 cv
141.809 223.07 134.917 239.325 143.899 244.522 cv
161.998 254.995 191.123 253.169 194.006 252.47 cv
194.222 252.417 194.483 252.262 194.764 252.059 cv
189.859 251.91 184.602 251.089 179.26 249.475 cv
cp
.905882 .607843 .411765 rgb
f
110.762 140.931 mo
114.563 136.782 li
119.422 141.929 125.33 146.235 132.964 149.159 cv
129.061 157.915 li
122.156 153.62 116.177 147.753 110.762 140.931 cv
cp
.898039 .823529 .639216 rgb
f
137.711 155.911 mo
132.339 148.915 li
135.129 147.544 137.342 145.127 139.146 141.97 cv
141.404 144.517 li
141.309 149.035 140.237 152.933 137.711 155.911 cv
cp
f
120.828 95.4488 mo
118.772 103.916 117.282 135.373 119.053 137.019 cv
120.825 138.665 139.656 142.865 144.121 139.989 cv
145.14 132.582 147.471 101.319 144.94 95.2957 cv
143.564 92.0183 121.937 90.8806 120.828 95.4488 cv
cp
.929412 .72549 .517647 rgb
f
138.732 107.538 mo
141.218 106.971 143.674 106.677 146.074 106.583 cv
146.036 101.388 145.718 97.1472 144.94 95.2956 cv
143.564 92.0183 121.937 90.8806 120.828 95.4488 cv
119.757 99.8603 118.84 110.51 118.458 119.936 cv
122.734 114.208 129.94 109.543 138.732 107.538 cv
cp
.905882 .607843 .411765 rgb
f
127.459 94.5757 mo
126.628 94.1509 125.335 94.4792 124.106 94.9089 cv
122.664 95.4133 121.16 96.0916 119.839 97.2595 cv
118.305 98.6171 117.233 100.466 116.683 102.132 cv
116.149 103.751 116.045 105.245 115.997 106.658 cv
115.842 111.225 116.224 115.283 117.087 118.831 cv
117.143 119.062 117.205 119.297 117.376 119.447 cv
117.615 119.658 118.031 119.673 118.417 119.703 cv
119.91 119.818 121.235 120.252 122.263 120.964 cv
122.643 120.624 li
125.662 113.892 127.713 106.282 128.395 98.3017 cv
128.525 96.7853 128.55 95.1331 127.459 94.5757 cv
cp
.776471 .337255 .219608 rgb
f
120.188 114.361 mo
118.804 110.909 116.058 108.763 114.055 109.566 cv
112.052 110.369 111.55 113.818 112.933 117.269 cv
114.317 120.72 117.063 122.867 119.066 122.064 cv
121.07 121.26 121.572 117.812 120.188 114.361 cv
cp
.929412 .72549 .517647 rgb
f
119.132 115.382 mo
118.266 113.223 116.549 111.881 115.296 112.383 cv
114.044 112.886 113.73 115.043 114.595 117.201 cv
115.461 119.36 117.178 120.702 118.431 120.2 cv
119.684 119.698 119.997 117.541 119.132 115.382 cv
cp
.823529 .458824 .345098 rgb
f
119.64 118.111 mo
119.094 116.751 117.842 115.973 116.842 116.373 cv
115.842 116.774 115.473 118.201 116.018 119.561 cv
116.564 120.921 117.816 121.698 118.816 121.298 cv
119.816 120.897 120.185 119.47 119.64 118.111 cv
cp
.929412 .72549 .517647 rgb
f
116.934 100.715 mo
122.635 89.5505 136.287 74.0087 151.508 80.1274 cv
164.577 85.381 150.396 103.696 150.396 103.696 cv
146.613 95.7178 127.64 97.0239 116.934 100.715 cv
cp
.4 .286275 .337255 rgb
f
152.352 81.8153 mo
154.339 82.6141 155.689 83.7178 156.562 85.0101 cv
155.858 82.9881 154.315 81.2556 151.508 80.1273 cv
136.287 74.0087 122.635 89.5505 116.934 100.715 cv
117.614 100.481 118.329 100.256 119.07 100.043 cv
125.369 89.2005 138.179 76.1178 152.352 81.8153 cv
cp
.329412 .227451 .278431 rgb
f
123.364 295.692 mo
140.454 276.703 li
124.419 285.354 li
109.86 285.354 li
123.364 295.692 li
cp
.337255 .231373 .286275 rgb
f
247.939 296.128 mo
228.496 294.599 li
226.979 294.479 225.641 295.581 225.466 297.091 cv
225.072 300.49 li
224.887 302.082 226.061 303.508 227.658 303.634 cv
247.102 305.163 li
248.618 305.282 249.957 304.181 250.132 302.67 cv
250.526 299.271 li
250.71 297.68 249.536 296.253 247.939 296.128 cv
cp
.698039 .294118 .294118 rgb
f
238.282 300.334 mo
242.947 300.334 247.198 299.566 250.459 298.307 cv
250.188 297.143 249.202 296.227 247.939 296.128 cv
228.496 294.599 li
226.979 294.479 225.641 295.581 225.466 297.091 cv
225.36 298.007 li
228.703 299.445 233.255 300.334 238.282 300.334 cv
cp
.807843 .403922 .403922 rgb
f
230.608 202.51 mo
227.428 200.67 226.328 201.711 225.554 203.375 cv
224.788 205.023 224.627 206.672 227.722 208.552 cv
230.891 210.477 234.189 210.72 235.027 209.039 cv
235.873 207.343 233.866 204.394 230.608 202.51 cv
cp
.929412 .72549 .517647 rgb
f
234.291 195.883 mo
230.809 194.013 229.652 195.083 228.864 196.789 cv
228.083 198.48 227.955 200.169 231.343 202.087 cv
234.819 204.054 238.394 204.297 239.254 202.568 cv
240.122 200.822 237.865 197.802 234.291 195.883 cv
cp
f
237.59 188.529 mo
234.2 186.789 233.019 187.949 232.185 189.741 cv
231.358 191.517 231.178 193.256 234.473 195.045 cv
237.85 196.878 241.377 196.939 242.284 195.123 cv
243.2 193.29 241.066 190.312 237.59 188.529 cv
cp
f
238.066 178.931 mo
237.389 178.542 233.635 179.413 227.75 178.77 cv
223.621 178.318 220.303 183.137 222.034 187.544 cv
225.249 188.675 237.975 186.186 239.338 184.538 cv
240.827 182.738 239.542 179.779 238.066 178.931 cv
cp
f
216.593 242.415 mo
215.09 239.975 213.385 239.845 205.453 235.139 cv
202.515 233.395 198.797 234.035 196.511 236.631 cv
193.805 239.702 li
191.823 241.954 190.147 247.451 191.911 251.136 cv
193.763 255.004 199.607 256.884 202.775 258.567 cv
211.08 262.979 218.45 245.429 216.593 242.415 cv
cp
f
207.638 228.957 mo
205.774 226.098 199.947 226.752 194.791 230.246 cv
189.836 233.603 183.174 236.033 184.713 238.714 cv
186.275 241.435 195.864 243.719 201.08 240.475 cv
206.515 237.095 209.533 231.861 207.638 228.957 cv
cp
f
133.878 114.096 mo
134.024 112.092 133.208 110.336 132.054 110.174 cv
130.9 110.012 129.846 111.506 129.699 113.511 cv
129.553 115.515 130.369 117.271 131.523 117.433 cv
132.677 117.594 133.731 116.101 133.878 114.096 cv
cp
.352941 .286275 .286275 rgb
f
134.43 102.904 mo
127.013 104.358 li
126.389 104.48 125.979 105.099 126.097 105.739 cv
126.541 108.156 li
126.659 108.797 127.261 109.218 127.884 109.096 cv
135.302 107.641 li
135.925 107.519 136.335 106.9 136.217 106.26 cv
135.773 103.843 li
135.655 103.202 135.054 102.781 134.43 102.904 cv
cp
.776471 .337255 .219608 rgb
f
144.684 114.581 mo
144.684 112.569 143.743 110.878 142.582 110.805 cv
141.421 110.732 140.48 112.304 140.48 114.317 cv
140.48 116.33 141.421 118.02 142.582 118.094 cv
143.743 118.167 144.684 116.594 144.684 114.581 cv
cp
.352941 .286275 .286275 rgb
f
148.51 105.391 mo
142.546 103.098 li
142.045 102.905 141.492 103.195 141.311 103.744 cv
140.629 105.818 li
140.449 106.368 140.709 106.97 141.21 107.163 cv
147.174 109.456 li
147.675 109.649 148.228 109.36 148.409 108.81 cv
149.091 106.736 li
149.271 106.186 149.011 105.584 148.51 105.391 cv
cp
.776471 .337255 .219608 rgb
f
136.803 115.594 mo
138.718 119.557 139.355 122.122 137.66 123.193 cv
136.602 123.862 135.067 123.791 133.852 123.582 cv
133.823 123.663 li
133.823 123.663 137.57 124.948 139.417 123.937 cv
141.246 122.936 139.841 120.102 136.803 115.594 cv
cp
.823529 .458824 .345098 rgb
f
129.416 125.004 mo
128.478 126.655 li
128.626 126.813 132.19 130.538 139.121 130.45 cv
139.004 129.561 li
132.646 129.64 129.45 125.04 129.416 125.004 cv
cp
f
135.262 133.708 mo
135.029 134.213 133.855 134.159 132.64 133.589 cv
131.426 133.018 130.631 132.147 130.865 131.643 cv
131.098 131.139 132.272 131.193 133.486 131.763 cv
134.701 132.333 135.496 133.205 135.262 133.708 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (1910.i126.054.S.m005.c13.gardener compositions-03.eps)
%%CreationDate: 6/10/2021 4:38 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj28(f(T":>Z^r\31uoUC*!A?5R=),#WN>s,R$RkRDEdeLZc.]lX"@.;@+4uDX8X=S3AFhg9nsY:Gk)?;/K;?`QJ!GorjXF
%m\Q4k>I.8:jjR"o@K,eh\[gnB_m%P;0C?ATVmD`@4Kn?C[[M-"_b0Nn?Hn7b`b)VXXZ'9YS%jPIC+hQE-UI#b==R>N9Pp#Gr$B%?
%fs+=n`DW)(f#p?8jeObO1f*o.2[t(k#/JR?m[id0WTbgI2JGlB2S.3TDK!IkUfRJ5rmPN3cp,.No@^M[qU_HkmE_r9bJ,t7B__DH
%!f"h`3&9ku=:=C[ZWO?V7'pb+Dk8#IZJes5.Q(d#WD5,CZ+5t5&<Bce27,48/Vb+8o7*5*:O])!ep@="ddd?4\#VaPB-Uub/=G\Z
%+H&5gl/65(bGN=7H9o;$!F"W2OaOb5C98K*0,p\S'V1<&Eig$46O!S/ZdP032]O>b?YP=&U.aSaBI#`XR@8aG$p3jP*61]VSo<SM
%Au%$O7L+7VT>g<GQ.5CZ."l^H,aiuMW;'^$#2AXr]'e!4G_UNffIDUJ2jIj9[c;=r0,M0#/VGG(@V:X).:BB:SJ(t)H5m1_o<:eo
%?S/[)O"2YTMk7UsQ$7jf+WsriPO-o<b&R)+YBJ#DH*:Ps8F(Fk[lsR\ZcqXAkr7FS!C8On`kVl-fIlUdJ:N$^?9BlA<p5KUCpaWE
%A@l/!FMOLQjZbk8g5Gq"UH`Lm[..`aX@-jUNK_W#(`I,Q]d$4`<@M`bbIE92Ibb9D$%uNZlFD5pq1YHg&?VDT#reBeWmV9o$3pLi
%5Hj.9GB-MpdDP?t[8kt\S5oUac[;Td4Uk?%`CcM\LFI\`OIG@@T\fUQ>/-k?G7%d*+VEt3=BcUskg<tob[9uPX'5PF^i.,<ZW\_1
%/>Vu8^XFhQ"U$8s>S$D4A,<mp-cpm\/+mTUoIg.^rL;krU.DZdc2c;(<V[MuWjUKpdP&^u#Gn(+eD#`oh9o)F'%!b(L.'(dq**2n
%"P>Rm(*9=L;FYhc4\@P2d(CL`&lo@!p?;'_BB@d*Zm?T01FSNGkOkKk;9YprlE/&plF:"L[7B]W]KK3k)*c!-$+J:jl]qF+m-!Z8
%W^H6.7,d3t$(e9t<kk'diAAdl*R%QX84YrF\;0c<qD07oZs,Xe"H5jcb,<cfYu,D"*cF%]g/cFa_P:ItAs`kYO7KrnIV71/W-qF@
%q-']g]4\sfSJ<Y#/>S;0`Fdc=c"acnq)*;:&_'-2Tr@-OB1VoQpfa2+/M2tCBY#N$O5=af$Y_q$=`480>+sj1n*Rh5nUl>:(A!V7
%K)2Y_O&f3NJ!EYAHFQ?J:bSEKRNW9K7I$8>f7VpDq28^]:_,)3_alBJ&:n^``*^brfJYm_-S](J+gl\cK3$:048fR[/_015@\J'%
%TN`]j9.sJ!lF/b#S%/f_k82AG]88S/CHG*Go2gNlr&*/3pm#4p^W*a:.SFk<I<Y=Dc5>A?o16*pY283mAS1,dZ`.Z2:##S^]%1NC
%Tg+idU6"/JZ&i@Wkd6^n"-Z1uS#uN9Bp+a/3;P2eXc]O/*dfLXW`5%J7?T8mDl:GMTX-!HjK@A"g)P!GoZ$0)UK'q'"/:h9g5[n6
%09oR`5Mllu-G#sskHQaqZt>BUenNJ:F7o#mM_HdjMs0DtOOsuqJNdlTUDZ=A4GmgjQ9P3f`c=M0[RY2?=psWsW@eMFVUKZm0R$K5
%eaqb.khHJhg7\Cgn[-H7PIY.6&H1hLLG<t"@?mq18m2:<q+[nt6#?/pQF#OQC3?E,:#'>mRb_Lk@A_^PY\%Om1qU)?5dG@n<OLJH
%l#nl=mbckr!XtSch(F8tBVsM.<4eQ52cK*UWng?f*@836&6;A9K`J0qcaHQ_)t_L#V9u/8N_U+%O`J"-X'TmIT,[N9N9*lP/S/]h
%YPU#9fF[@1V/grH/6@<JOPjiNV.9g/)W(u_C8GAc_.N7(.??a6"<6WJ*S7/X_..:gm?q>O%Rt?=VuO8MW2K8f6VHZ%rN2p[cRSle
%s/mOMF7cX2a!B:UFW@$*R05L%I(iTu+Z_U)%E:GiCKh)D3@e,79.=-RAh=F[fiAaU37`:i.TlhK3t9LLai1:;\@*$7rX=6%fFDWh
%c(LZT"s?(L7Q6K8:E^=O'ugPk"R)[)8Vfc2-km9%RtNK&]8fmF#qEo7,"abEgAYf#+QuL_f]slhB,7f3cQ[#Y,Vj&Q]8p`7af]8k
%/=L%*acpNV_9Em-`bE3?%U+i]0rSms^8oAQ!OpA6Q]E[iqlN.d0oahLOB,/grUS\9f\:,]S2;^W^hRsOa<MG7$$7)TYaf)3As,<E
%A(4rP`TBTLCaQuXWMR`D/o#.Bo(BN;P`Y(H1>6l,o>K(b6/^Ba'D0DDCIp/<neNt%BllaJP6=X=#.,2tcU/]73'FdWMO>!#k!L2f
%%llp>cGU[NAj59>LN9GCaRC;W$#Bo(+7eD:q2cIKiC,Z3eV$ISo,H$R`kP0ORe_qu)C9!Ej.##>1V`JLZ_(c8`2&=&1V`HZQrn!M
%j%6$IL#Ucg.nO@.`05`TjX(nJqAJgs,LUXrYaFkHj4[So)k%[;E(bT:^UTg(k`(ggLJAkUnu,3N?rO`lN(s4D$?JcNWiPjsmn0;/
%B!jr45U?_/?$RY<?^`fp0XHj8\qM[I248nLR1S!#o6M6S<f(7<X2R])G[=\S=fdq+k%[%1XB+XQAY?MGAj;d<cXumWs)Iq(4gUd*
%lt='D]Y"BmS)D'#E[t#_X`i$1JXM^04(3tp95$eQoc:B,-<k#cHoG3mYf5M1&CqM<Pn5mF@%REmnD+;33pP<nTru*b5.6T$K3NiU
%88,Wd#!9"^oEM5@<Yc_G/8&Jpm:E*!rB&$)RGh^hGaTFUrk>ZJ1Q*)VPSJr?0/LMhbj[AD]_mMdbR?-\_op9nEc"j)$UPV@#,IXf
%l'_u?;B"t&>EE`.Z&7:MGIZ5,-Jn[i)fqao8XX/o.kpWU$W\P+_lR7bfL3\*J%YUnOlb=u$U&b@o&LUe85eMWdL0&#TkFC@KdnGC
%+srj@cDim!!HYnJQ(4!nr/#'Ff@7P^SiP)r38I?l30!q2CQQ8Ea[M_"E*E2"[T.:pmG%8af0l*rRLd%`l*oRaYK8[WqoJ(KeN'rV
%<PH\>P%LY6AioY3ZD7I=lC1q2r/5l6[OR$o%aq``VUKW*)?29;HBI-tU9gR1j4?bMUTJ^0U?9sl]r7Nn28\)Z66[Ab4k.A96KdL\
%@*^D2Hr!#.$VA:T_AMCQ,^W'+,o4N#D<Lk+\3JYWl`='f(*im.jg5`_03;*#<36?"@e83/Q;/\Br(<:(,Q5UcEXCdm-_<^RgrJ<G
%b2Ymb)usn,Z)DXS'WQY#h@f=hFhr1/>,4_^e0\Iuq)ap"$`]]'J=9'-D7;AuGuiC46HRrR(Q"=:AgRDeiGM]EDfQ<D%!oDAP:!l/
%J/uk>V.SCY\#e@[!Z>[OX6j/eSBt59gUXFQm-RJmRgHCP'kF4C.%87G1R[HV:F;NAOADUuqfXaD=U+]GfKB7,-'OoG2p3>9@*1UT
%+J3nq4Nel96ORKDj>5qC)joY:K7(ZY-Z_oocPL4#jHIV'B*mXKn$FI%[Jmi>\EQQQ\R$WYUts8`+lLgj+2;q5;[F%KocW-#9!>86
%,YFfD2\Ias_iLd+rDBoRbR\aZFCfflhf5ocW"OS]mr<44\5bb1Q,6.Vb1fi>=8oYsT20:Q7\s,A-bT>E#k6iEa0hnRQGAu9)Do<9
%4oE\Ope6k@f$f,mXCNSk9f=:N#;f\;nd\Sa_tB7krp0;W]4LVPVrg&kg[oZ!8<D:Wde2o[X(`/*3B(ho(p6RkRCKBL0lC]'gi!jc
%`ed&]?R'(\2WnNJ5/YWib';`s)A>aMV!hHKM-4ZNFZ0Fb2=MWLg+=LWf+=f,SppVY?8IMDqj5g^FHR&uBb[K*KHWX9jO@"\lOgdt
%5lE?BbPSWMSh&B1P6'`'nY'Z=$9*Ud,f_SRek%*O^r4P<I[ejbf[Y>me0NYGj:A/ON8,a&9=lW)Fka`KHNn*B"uH5O'=3\'#)BF?
%K09%kH;J=G-2@V["N()=1jt1&rK[b\f9<$YhYqN^N1?=#j57?^%XH6^9"tUNVGY7A/jYm@j2/0W=T504go?D_r==;l7X*DG?nD!$
%(OQiBJ]N2m^\0F@r11"3hu%=><1%20;^5u=Dtj]sZY8G>bD&[LQhu!$Pp_RXf>DY%B**Z\%"+.Qho"VMj1FJPYn@6IC=;3r;LU9]
%"<6YfY"^3nbBO?"B_GN?MietFks*QDH<.58P5lbM)kYVW8UsT&52Rj!8jO)4^T6u$0$$a0(06V)L"5_\U0&jtB>mK;MN@G7('`$"
%&f5l,n$oeAPl;)?%H>Ibnl.ED-PWMTkI@s2-eM0;dJXd!Gr#RCV'&@X6Vo0FS&KsF\;MW>]-\4SIZG?lW"dF3B\;c0`(YNPeueP>
%,go@6>n<B(0`6>9H`Ki<CfE7\.;A^"`N\QpT2!@fcUh>!5"9B]#KN(t9]M21SKu9F\F"I[Ij"i0S-X?+:s9g&rFVQmTZ5c1S4df(
%1RsrnggHWS._2#+R\P]ac*lB:2lOgUrt(&&MF22Adjj&.[VE;Yi3XO>MQJ.QNi;!*C#<7)?G!/%Woj[n(c0<Yj-7lX;8*q0Rf^a!
%!)@0kmsgr"l'=4d)GpDa((u$N8bF#=a=#`d7@<GJ6g]oog<PkDA33?i=cB\I7A<L%M8o<J^.jE25]VEm88+\9QO@Vl)dN,*bS/A+
%f/cJ906GBkL"fd[.bV9CV^Acf<d&5rd>tiBp+6?R>OkeAgJDH2aW>%_VLF"kA,JEo.g\FAgM$RYp46c=2`@?l_+nU7llN[QfdFC]
%f=l4@\*FEs2pYU(;;kW_2(\i(::f;`CPfJSiL2R%s,"2ShZV^/n(;31K5,E"e`p:6jSoQO8\CgTf@=K<SeFWqAfp)mmD0e"*bHMT
%S0!i@gUu%f?nnu@E_Zm'RsgE?ns//!3"Dh)RkspSk;;):DdC=5*b\S$lItbJZVZXQ@nDd43=FB)'HLQsW\IYto67p"4uFHA$e^o$
%Ctq.uhb;,21ih<b6S,*gP#&QUp)=HWdrQro?#:L%[G-tY@G\0B%Gad`SV`Cn8[=0ZO$NNu[:n?7q;>tOZP"NLc7Bmo="e2%NCah<
%B,6KK[qL#q^nQs%%l9-`KQGk87:T6;proHeZY3$j774[](6(_OR2V"'/Z;*X$S#$OO'+9KYU=1&kjl&sFt=Vn,;m#:G?0^m5P*,s
%-.:i2E8\2pSjn(r0n!Tm(4Y$G[rmUnkl_p['RinOS!ZuDr@[>Wp0EBo8m"YS(+.ld29WFtl$G47Dl3!JoY$[,pKR:'"G5<DfCrl!
%F.R)nA)n++U6)9Lj%HVWRDLm]pgslj9]<U@/2Mu5JW?P`-ACoSQ(,Mt&^-$6A>\rmN6Z'/4alO>pt)fNoJ1lfARs+7@Ah^:K!F\$
%<dlXa2MK$I[cm&IE921n]SB_jjeGBl@nCd4)&\pfMjYJ=2BuNaiq6MpjG)dCM;?,"@/=^oR4Z\KGYA0ZceN3_j[M>FiM>Umh8Jps
%j!<u2d]%5<J:]4lB-mVbR6,J[P3!/9/W@`1S&!mpGnF"*@Hf0kL&#8Zn^U^\[D0T^:6Fl2n*2F`g0XmuCaAt^f6BODPm!XiCj"//
%S`pFca;,`&;NMF4@AULNe>ADjPQMgVJO=E,1nE(u3qUA^:G!=[Qb)a_hY#pmc16oejO:'f,i@DLOQn*#gltc<fYeS>pP'9:aej!S
%2]N`"W?5Q:cDkF^/n]L74pghk@B?(XCce\QiI;Nn:!\]n;R3g.deGH%<31a=Jsp)CjQ-'88a=U>\rLQ)$0XcnC[K5NnKp`nYG_C'
%e'#(D[@@@$\_FXf;5mS/+B+BJ\&tfr_$F=*'^IlaD'bkOc"[l&UH1jnI?7DK\#"iBM$Ui\2m07cV*BT>$+<20[MdR.Z=<&Y2@)s[
%SO/JhSC21XgSfmD?V!E`$ADrqpbNK_BQkJtAeA""j[9eunTV+n()1<(hhF[d,b(/B-/]OUBpWH)=!n$ZB9=Uk'oA*g%?W&12DI)-
%3"^M-FD@m)0_8(K.*AWWg4Zf)r%&Upd#M_C-kfQME_9e<P+^9_Ytgad1Q+]t2fIbX`M2F3ALr`<57ia9jQ<=p<6o#N-AK7rB<`k5
%-*rGa77hM[dt@='Ldd^90?l>ne0Lb,;f\5RrSahGZ%THQR(guYdrQ,9FVWqA_6'_PaJI*S>=qt<))HL1BqioCK_<1>5-9N[IcEp5
%-T);$QC"/1&\<H]kRr8XI7EF4KPoRu/ch?b#i36\kiOW^\otAZ.C9C&\(PFUGu^sdcmVU,BPC&GD]idUroB.?]W1KX:S&Sk>4hPQ
%(XE8e.TB3]e4..%\4GujQ/J0'l@-E3CE3"$,u6IP;Q4mnJ?QO*=0&0/qR`$-kjs%E+dH(9U.o__k;R3o_"t9f5qBl0f^TD$V/%"L
%_1.3lol#<T^-'TgRn(_1V6E8<n?PsjZbjHX-0@E(3!??]o*[hoP"6F"Nf)q%.;X4V;Z$5>nibpGpAnG-l*%I0CBj/TmC9mjRJ_\L
%(pp-HYN_(D?@/<\$[VI"0DtNqIelfVJ'pWYp/7NsBW8ijo^EF%5][WQ.0flj$1Ji<>TZHJgXPH93=&5cZPgnD%Si4kHiDK,f?cao
%`,&`&TRSQifDb-J])6@(O+s:k"L5f;s2CraJ*E$o*9@!fmeg^!Mn5DM.fHXFW-?ZWQZ3F8`Z_%,VsYI=rpYc1g87(R:GgUDYgGJZ
%p;(#FdWUP.Af#Pp]f53H2Z]C=(I(%Y<BdON0\$,\PI-q45r5H.B<1hDr4(FQ8I%.tZ5b_%q!i,9CSZ\%hsBrZ0IrmCD.`EY%<FnC
%$t<C]-UZScgr]JH9&nuF:iEFqAGjpp%n:U=p1bN%^J=`)--AHII\gfY1)qado1Ga[M\EA3dit..+77OO^'$5^@5CJ!,d/WQr?d*T
%T-)3P\Sgg\fhiH9dfcr/=@SIC*]kKLT.$f=9MQAMG;9.>qolMfc"_M*aPUn>d?R0$Tb0DOn1ZkurYp*'1ccrEhd4Xr6KQ5?T+_4^
%;aAGDV.0GtOE'*bNO8-.DJJu$$q`n\S`ku0]TUQ!V']T"L@;#\gG;=e0A/jmGU]oD9T=OWFFTUQHR&8D1&t#!0Hn&3dOj'G>GMjl
%gt5/]*A?I)KPZSQcpkE(Cd4iJ-4(X'iE:6:?;+0*JJWD#V2:<bQsbd\S3P);A$kj9k_q/)[^L8-H8ug1ICbI1XB5gbp?i-DGk[%[
%!3OT-Xpm:AqK^^=!=NM2`_JG>2Qsi:S'25n80W:^C=P+O6Eaor&aqn4:bdPQ<iUL'[6ui!g10jb;mOSM]m<uq)iXuc8U)7]r?l'8
%oCm;'^Eg1fI(^IN:YL5WB'.WIZWJjZ2kd3(epB1GVi@M'5?^@PfM!WE[JN_;k!gS*=?[0%4.D]Eod\U-U-2h.B4Br+O^c>FCJ!dQ
%fFtM8KmoOm0i8<oSGbG[lR7P5TF`pb`=cNj1&aCDbe8W!nKl&q=RU-iC82Jt"Xm,a@tX*-l'Z:?R@VEe\/A7p#*#D;J$76!b`8j(
%%Yt^Poq,[X3;fhFg+!f+_.bVnn=ZSX&ZL!/6V3BjWhjlkb'>Ks%oW_`>,rG+n^CfH.(79t_luui[/cP#@_;"d:9F^H=UFE"S7X85
%:XSS'Xtr.gC+jC.U^i#H1TW+"O3OG+0t"/cp05dFX#]IA/%")k89(>(9WLpSC<BUN&N_qBBWbN8.!.(6cF=iN/pkpX;6)U%q[nmG
%R2n(FWD'?qD(k\lp#e]$J0T2>WTGk7[)MW_[=&Lh^4*'teECij74no"fsB)?><gZ>#F.b1W2$9q%9+lTpJDS?kmW2VQoZgQlsOU5
%G:^Xi%3<rfVq%GH8ED!!V2SBe/M)kI8qQ%;>&^lZda:fOf](PlBb0X4?`S*X6R04_2q5`61\GAFc't8?l=Ka+&6)tMR+KctCRMbD
%BoZWB'6H<oU-=lTGc%1&H?Z"VC8dK`=GH3hkS3J#3so/gq<HM2N;NJM49++ef7/#>b!!*B1,8!p<2rXsZc:`E,J'<L9=@LDe"Ce"
%elnn>#84WtgEB7UERNG:ppaLc5IA,tj+FSmW.fL2527Ir52h($rb;oeTc7g!8iR[OD=:R=Bf&SF#cf7m[9DdL2HoCI:#uX^;0=kK
%,b!JcWtXe;<1:c?;268<&+dB)2UZSHp17h`f.*%0Rei>9%9]?,*sb6i@!<<NSd.u9ICGXU8g(eVma*%HgV%=e@=9NXeMmL*(bR10
%h1tIk4,cY8?G1._QrXWN'RRW-?]-b4g'rOdV*5!nWM<Lr#3@W5m\37JC&_gJY9EgU`%(>S@Z>=@^;RblS^.>Ml4pd\cX!a(R6!#"
%jPhU;!pY;o!"GKr(9uV/['%EA>GAH?7gRM;jfQ:4eTqmaRV<=oCikJ$CpKhk]@819Ea2=M'^81_8p&*r>sn's(Sa,XhV1bA"Sk\E
%QV&D9=(UDs]jKZf1(+=QgU!W8*]eGnN2dY;@7C'I2iUWCS8#puNcWNqK6Lkdrhn.^WotJI\Tr9RkgeP]YL\/.?.ceXb]Di-,3X0+
%VRQ%"^Y@7U7oApe]dG<L5&-X[<D*LIUR6QgC,m8?\Ohl'1fNk#PsY/i7Xqq)GC3=<rmh#Yik>&;I.+>\*Z)Ekadupa.euu#o]Z$r
%#Q7`Q\`WUg#AlH?oC:rTD"jnK.C,Mp<%F&3N_*8IIFbc].2g\o?aQT9qU^*lO2QZ]mkmutJc4<'[/TKOjqYn%i4WG&(qch6pXaJR
%_+t(1W)M(W^*JWdU*DCqopRht,Y,N0$ilJ'YF5??AAh^>gX`P#=p0u>4-2aq1ZC:dn%E=?JZZbmd2+@>XVsJM<0YZY)rUs[dcP!*
%Z+5XYTSHYe=4pWD2)($D$Yg6ERU$!^^fQP26(Wb:X`CQ>CGRN,#12D%H%]SRL<Hjh>,/!@?6p&d>%n2;^.6]Oc>iOu![4/UK*@!I
%KgXh2I!*?<7u)6B0q'B?!D0Xm]#@Qs:=B*`G'0/4onWXfD4,fupHFP*-/oqkAe[fF,$%Acka%C@OWu+rTt"E"njg#iUJ!/"GhJ57
%<hX<iX7ZO:\4R]=bHIqjmcP1[gEkN/P4.+b_mg1bG;aM=r$s=\1344SAFXG>Fh5dN\rk/%UtU/(8A#SIbYUrk]X8,M+.=h=@\_D;
%\%:bN;d0Jsf:P`C9/9`,:f=99,kG!?_AY_J;/?W9UQ&Kja^GCUDG:Y=*iO<$W-B<r8mHl(&Qu'i<;O^FQ[WtOn%R5KNk.%sD,@_%
%NYWO7Fh!K7TU+JmNjI-6j)jtMmo=(b=9<J6a\N;X7idqTRIIkboB6;BmPj(BUf5,T;^2cP"8`X[BS>K-94n!HoeapG"Jo",Di2R#
%*-^ij;9q:sHZ,EADr5rM<9hoSqY$qQ;I49peTs_d+$=r\a`k"h7r<(\gl9Kdm?EY-1/?<O^(!bb;*Ea7S5iKBF2Y#0*]28YYuqR0
%`ck@D2X-(mYFV"5e#+lV<R8t='(483nHSV=#PH9[Q2^`BVgJ2>,:#V$AuuOEIPu=L3)cViRe24Yg8@Y040E7hD6;9D,A2BFgj[>"
%'t;B\=\tkr8f&cGMQ^k"(neM+(\;t^l!#[&X+dcW8\U'c@H=@"-f=1An)A,j]';6@3iJ722_l`VG1u/,dF:#pEU$\Qg)ntR.s08,
%%lr.A#iR7=$I=lY-&EmNW9k+%W-#2_f&199OQB+70'JiR3!@mEb32,6B3EC@@E+6JoZ%-&l7(s/=\*A"r\^K]<.hup#(S5T;!Hs^
%=4`l/]n+#5/p_'e6%`1f2^h-)fA#a$*-!o\a,H[:Ks4E:YOlo"oHg60.ZeZ6R+sJ="Yd;nck(4WP1k-;a42c.lKN>Uh7RZmI'l9\
%V?mL]Y^N0[>DaZ&OH5c\iV)YF0;M00,2oi"!nZ2uN!,&sCAkmZjp^In;WA&V+;:BFLVoeM']g+pg;%T2qmnrEaGrJTm'MnYQ1D\E
%&3T3AY;Cu#1NdFJ9-%/Pn1NtJ8jP&FEN"o82Scs[XMA()Pd$oe"%qoV&E[lI!+Ml]UbBQ3Ze4Ue;;/5Z148(!O=GUUd1C1[W`-W<
%Xc;TJnZ,2)dAVM5Kf"T&NPGsj(\[aTT\^N/J_`XcN*@Ulh2Lf<<9H6Y8g%ui<g',"B-djFa&g\"O3T6"FJ1OCr^j"krN'0?9)R&>
%d5l.)UtP4F)RS<Q#?nkpVaUm3__/WbY(Yt(ZP1A>TGOtK%eq"R6g.(bV_V_gP+H=Xc;h9eVdna2+AF+$G$=)E2W::/d/#fdd<E6p
%DJh\ms&Uf.m0PVWIe-IHq@t$&m2l5;T(c/BqK5aG1?M[+GIO-'ic?-fPo/BI=lH+c\eXc:4fc!g0T*b2)T/_MHPBXN`#\-j:bLZj
%i;p*)ifZKpL>FM46K$psm8V:M(R%a&XkP_RoeuZ0I@>A5O@-$k,6:HsDJ-(DIMan6-Y55N$s3/5Dh+L>dG78A3Vd]#:fAZS%_"Ap
%TBC@SpHC5=dNQdZ0ui=tIWn;QTFH'ilhbg^]]f1^YKJ(:)=(FB?A)T"s0cVa'D7D*#N>sFi+KPi.UB;[$8XibQ+pfr-rqrnN@#fV
%-]]EScq`[XL$Bh\m\ktc*(5jY[MDir,^`q7[NT#cV962F6)0'K%e9l,7B9^.Y\^gr;*@Y@bG2T'c1SK)f;#6J^L4q8@%!c^>:Wh4
%-q5SK3SN9Ana%ft;LrW_bZW9c++/CIp?p&?e_pDc$hM46d`-T]]6pl(?FfYOG@tppiFXf82srbGSo6X`<n?/E5M`Z;XmCLc\@5d_
%jk\^XZ00BrQ??!P)VOT4o0r'GqWc])U\2%6>%>89dTEA\elR(ae>$>'RN(G9?gk/$=lIb?n]B7-2P#;AIV#\<_?ZOVc0".hglL47
%m.W.Pf#OW+9Y%ah+Ll)k4FZSNCZVkQrHB4<9+Tq-1ta\P`G+5Wm^rIdqtB]\c^Eh<o\73g`qulc=^SebI9BokUs"h*MfZ#Ur-%%X
%VW%-hI66,#A^A*'F#Q_WV=uKQ)]-cD$hpFQFX#]aAFoZcO7fnn&)YJo[-5NlfCQ1GqWYhWlqV!PcGl%ArI3mBl!?donNJA.BH$pJ
%r8[]UhL7W&H"!8FY%?b>#ELfM/Ui&Z^A77mDDQ)lHM[?S]o1Eg5.JO,`Q)1q],*61Xt9lr]m0S39(D5*_FA8-fu'Z_j3OjOma6Y/
%fYGB#lAH%6VK#YoITaurndip)TBr[4]B.@7MQXSH3&<A`r/UdOE^amWRErT\]VUg5+,92F;_+p`2jXWXA:<pgr6f&a;0!2iZA/t&
%F6f;WC\Q\&/c%A_2.^tq3VT,VS(4^'fA79,XVdu1^@8X..s&(oVp;&a\<]q946L_i8+guaEktmV!;a..X6F!Zm:DW:[0O6(O$D2M
%NIqICGnf[5dqGY'G:`aTn^H9^qJ#?Qek>8B\[_<,7Pd4F3s<Cg[Du(8DCld[BBN(?5jt;GXVSXcqT?;#?87GK^L9X]:p5ipm3R/E
%/4#nXEen%q`GP=>NU-rnG;a8"Z^d*%pO)*_qu(O.D#*1RXWVk5J&=9po6TeLp>frMp`eV>*8Jm/AW@35+HUTXI(2["'g?NKs7WPE
%4s^6d/nk30fbr$bV<cI&9D_Q1SfMY_pdf,S@,^Y)H`QVrQ7t'gZZW!,I_0%%J!!s=f.Yu_.sp`VnL]$0Z0osJ5$E?H;>%]tSn@`J
%j$t13Q!>qrU1mXM5AAC*Z6aodHXX,)?e\a]#(#R)<nCE6Rs-[/0:K#DVqH-\Z(m@ts*ahUg5\JJI\_mihP4g+qI+:@6#C'%_E%P(
%FfMQ,b(fTcU)"e4=`(?1:8E:X]A&a;(HTIhg=!GM;"eH]]CXhf'GZ^6oo=Kc?Y9#HDX?ICcX(jbrpmFXgFSRR0I?+-&)/$LkK1?]
%i(e@faiBD(a7l1t/:samFbKYFmE<&%k'F]F@Uj.c/+9K>fA#%5:HpEh[qg1`IK/i;or@1K<d.(tg+5.>%[527:C"nV]q+>WIBA5S
%&'BRSLC4*f]uNoTI!cONHN'=GRRp<<FrtQ[:C?4-dC0qFjl2L"S.'B1n@=`ChQ*6O^HLE[Ea.DdpGC.K@r:OQqa>1'Mq(lumX__8
%Sh@b=DriX%4G[TW6n&:+VB:23\4a4"ahu>2WV.asmre,i8DuqZ4hQ$(cFj'o<2"#8'Kt`#Z@;.(f\bK_ENFAhO@KheB:4N^]3)pY
%/pFU?kCPWZ"Lo'WC>#LJ:EpE9LW_<q'79ZiZ.87,f&C]K#p&*mGD+uEmlu9t`%h(%k%JbJZ<8`m/mraEd,d7ao&]J>gtJ(-^e]57
%kDq+@s*/I1DPQhj9B3`MFV&]g\at9p>(:n1llJ:hE/;9c&6(l>C-K.K5D,T"C#NdoR;4Gr*#f:[^M!?ks5d5*[h!0k1iMq<oTGO+
%]W%NP%5qb(baQ<6Ge/;g^Zn#^>,A[(S9)&Q*8n$P1s4EEI=$#o6a+2Vckkk(1%blCH'=q9BPi+:BO9dDgHWe:]KfWNdI,K8nmHHd
%Ii[Q5jU!Zq;]ZB8*UsR*Veb(AVEouM+R@@JF3qAW#j?)b1!L:gnsZI2:-LhbdA#OAr0T0jcKgj+^N3$7K3[Rli&>o#U[d$i5;!cH
%gF)_PROe8-2F931Gf%c(R!Peh"0[pGBYUuFdj/1I#)d`_F^@k8G-6m=^gI$-6)R?Y!^6E"\2i@:/jC(Q_SUQ=cIR7@C0Pr9%=La6
%#/A6Fg/,im74X]JfA"cqlb#h2KDS([puGS)JBcAGBc=)IJ@g!el?Z`$X0\9ZO=n`F5j?`-C.5aC\;?mmDFCY(%C4U&OUctbN`gou
%Y5=<QnXeJX/)0F$r><2G26"L\IR=Sg!baSe!)smE#9UdTr?#L(CMdH]Dj-`)$3XlGrLg0MCeqYkR?icu!Oj/aThZG_4lA-W':-8`
%?0>k?ai@SNGLMtW"$pd[Gfn2Q]$\TBc>X>V$Wma1P=%P%^pu^L)hLOhn5_Ja`p!N&:kYFXW3LZ*YE."fa6g\mr\^DO$SPfKD>K4$
%bBK0G18`It9I4b)G5dXmi0UhmNg;\Sqm&P`ka1%FgF!+9p:M%PTN\P^eoE._j%&F9g;0?#>ArC`O'(etrJnr$`?Q_AoI>%SY,oX!
%N($(Mj-VHuqkRT4gi+<tLq<)TTCte(n?Uj"O1Vr]H$TDnlRgpsHHZ_U=+-dQ>>'le<qbX]+'*cXNKZ&;=?1\k3GRuH[iXujcZ_T*
%d58CVJ$'Q$6&,ggKi)I7q/lNZZbO%jckZ]+?"ZN.1PEa8]uC1!G;]E_O>VX90+P<AlAr[P)^AiWs0@i6q<moG[C/#8QeRMuYc^CD
%?"\d8MpLXrVN^GGks2Og9CPM1*K9-lDn^lXZY-H\8'Al(:B[Lu5;kqh0TE]:HB^?(TXsd)7*8^:W3SFg$bXgPkHa"&SST(V43O[;
%jgfGq`#n5c-;VAW4l+"B'an:3#]`Q"4t:uk3niK=K4p^LWmEuXKD9>IWBu^gj?.230qN"'QPQ17%'RpRhaj?oJ%0dopqu67n`c5P
%F^K5c:^T9SeYPB6&d"kM*W<\;j:7dQ(!s&E4W$>*"n37W``=95&5@4G$[V;A+MNI8#L?%]45*<9WY2pAs"\u48R!Z,c@%d"l=[Rj
%\7ZbI$X3gKR^$_sooAqGcGJan>#dEF\(B<>2ijAA'/q=U#qE6(%;tA;"oGn)i0)stH<s#p2u!!gUO0PR9'_s$kEe=9J[NJobF^mU
%^\_L#ot`]Vk!Ss0Z:hPgb[k+q3dR:=/ek#b*LO#ociDFZXj[AhpZ6+kUYGO398npupGOZghcY7&FSk,EK!-hA]#40`NQ]#UUk]q[
%Fc^eN7\[(*Qc>4Nr#c()[L#<*.?mID=Nr@dq8^=;Rd3YLe>V6WLJAjuE%V%bn[#^@O(a8XGCB/GLV'AP?JOf%(V",?BY3c)mcI*s
%=FYD4n(bgEq3DTonBU+2Z\q;2Dq]\8oTc9sL0L*.DJYlno[EK`2\4@l)kUQ*m]N.h%_cS9hZP%:#hHFb8m:ZS\k+Du^=9%1]uCl'
%PcLAbU<@kp?Q5!b6U>-VL<4%_.ull)_oY$^Sm()M#E>/(oYonD@XuS`T5k;EV:Ai%rb+ECqVfVmX$[@O:;GG[lk?XDG@R#QZ$UL'
%*U/J_2LS\0>$lRJrNa\SNh*emb,-q3&dU,?IT26YjnGhAd?-U\2=opfnEW$'C-sRl48VF.ds"T(0RmT-]`6LLP!r\[)uD5Y,G"L9
%A*`Y0k:C4plp)YcagloiLBhnpb.Ab7e[+G:kNaYeF*"V6KI)H%_*;KH^:*gQH-V&_R(;L[c#;_2AtJG[j(^KRmI.?2iS<1!]Krld
%I<iJL\$H53D/&a3R,>7I>:3V99D7^3Ha^=ah.pTgous>9r'>%j7uC3aeap=EU9=K$\$>krD<?(e*Q[Gc`Uk\(?^kE+0DV`o_;XsO
%Q/Ym6N%Y+cUU\Aibj!5)!R:$WP$'u`adoM>/GIG)4T/-SCHfLc6i6C)+*O77b$#\O[!&%lT>+Z2D047`nbjP&\bW8?d.9Leh;'eH
%"17kU<r?]HUK#giphjDDIWV0am!i,EXnhhDc)Il$ch1UG*t@\E;CJ(7kij:9o5Q4[q&^^@2FHX_F.<^3NKSM3du;6f`V#Mpf-LSd
%MV)0b-$H^ZahRjDaHPH'*$2<`kQ)6_k$DQ(pggS5^64rnS7g.EmEJ_%DkFE`7g0ZD`VcY#:B'`j_g5rPYMB-/HZt:0BWlLK0:qS-
%cTgT]8igjZ]:Yl*gg3%B0CNQ!ZKLtr=RJd5]h*6Bn^3WLcGD%2n'g"-rOERAq:aEao#FqCZUGYl*C%&`PWQGM!1G`]o'tnFYMYgp
%2PaYBq!I4pl,KLoQ+b6#Vp+]$K0*B.nnb3em]Nk#.G38fimHW-gVW+SJF`VEDDUm<`5hPApUTYMZ/)j7b'O$0bgpdRoafAsle=ms
%[^i+)lb]AWo`An7TM$jf<>LYM@bVQ[e>R#HlYB:3ml!cQm6R@!_Mu`obnh>MLV%Jr5P]+Ym'g'(S$)-.q6+S,q=Nj0dcJb)dS70M
%E<LC7X5K$l@'?+G1cFfbqXDo$%'ZIQG@#j&/UTNkAmTr5$aE'Jo(#d(>:BB,?#,oWU;)2'hP%qUP,mImlkmmR>qnZm+2=h)B:@tt
%-tQ0r($GMNDtUMCVGt+L<o"h,@K5E2X3KbPfp=ADQ:6<[?6:c\[e-p%ge-_uDKM`Dk(sZi00;sMRAV"L>g6l!<)B$q6B+SB$ZnX@
%%RF4Gfp=dE2g`nbD6\6Q+h+U3:[$dgVn"mM(3S&Hhr"t$+:L$?&McQA3g's<5*+hB6ihFkh62r.DLJYu_-G70n!#X-`TL=sEnQ)Y
%UYK,!,!,<J4C:$+5$Au&<2,KTF@Yt4f4;la]!n*$5L7s5QI6.hVEpORgTYsQVCl*8<D:#KRBbm5hJCFq:;;=PkZqM"fpC8lr5eUt
%8A+S'^beQn)ofbJ0op=.:cs,&J7AI4;n^h5`2ZfVTY%J;#A&Z5HPc=`h$BY*Tn3(rZGFr^B.+gBgL!'pS'+j6IrdRCKg9&E5)Ui3
%q<G'MA^gMmCGFaql7>tWNtrKO&ritQdPTNJlp=terVTm]<chZ\kuJ/'bSAH_h!3nT5-"T^5$fb0jlTofqseH6G^]Pd*ZgPJ\36sb
%M,%bEGL&4jGJ3H"!G_RY9qc$Ohs`JkbdG5lID(,l3GQ5^Y"Bg[4hFWF2Md3,PbAfR02#(.gYSGb==Vs1=ZbEo/*u-YJ*2reiVD$c
%r75TTq,1#'2VrPe*^=oDALmPaF*FDWpd$!nh%iPQ]m<K+?&XI`oF09d5"p$/]3m=*-Zk^$+8m==I-4LgP('T!I%Pc4WeDBmCP.i`
%;TN@J4*N."HULWX>G[>Jh[e;E4,);]fM2(Yr-StqhAu-?AP,7V-)Rg,K:P*Oe:$H4h1!5CP&Ta]$@ok0bj.bHGu3_LHs)LDk817t
%[e"3[XWM/:fTJI*H1gj;Q2C:*-j.oAG,W3s3&Ec)2`e.i1lUsF(j"Em-Xmn\kHee3CA47\bN>#D8L_=mS#5t'nXOKmn]5#3qY1=+
%Y/e5"@kL_S&e_8g@m,3Ap%<M^Tm1+\m7%bO&L?]0"Rjq]$h*Or?bZ=+,9*e6^"[[Dh^md?B/QD/T9l+6e,9MCh\?1WRnjCDoB3ZJ
%k*Mq"qSVg4gW.qYd3>FGJ@P:KdY11)/oGTWoSu.SSK;G#A^B`K`==3[:p;"'UJ8=QC8l"%iYu=PlK6'`[3)s'_0Ts0YL0@nRh?b)
%L[H6ro:*R-p/,fin#i'_iRZ&USLo@WACBOF7tgb03O#P,j"7+r_Jle47-pmonBjDup3\leD.VASqO5?aLJ-<*-*p)]olsp*Ecl4j
%aXg`XZ*!VfkhT,%\BkOXko0<hh$n]S\%G^Cae$ODVg<Z::E?c&^,MItlL$Uol&UPA%W&Ao"t.+SE,Bf7n]SomHJKun4M,uI`/m2"
%l-2^OZD[0/6UJD_caQ-/e@mZRCnoC.UK8T`b[m#YnHi(bV;+53rqcFHP)5bB_1)2i,HgLMSo4\1esnZ(Kk3U(2iG4,I@dh3f8#:;
%(O+03X.=%aT$H(4B,P:o\[c!iA^KA;gk1[NQ0_ZHb@<Feoeh+Ib.loOUjTi29%Udh?@H/K\j-6]%M-&>Xh.rRrTE=JD_Ab+c(-E"
%?0Rf^4j`_"oa2e%O7I/Zr$(kH/q'=gmhdop4&c+*=@NkFIeHG)_nF]N[7S3WMr<u/BE)8[p1k;"pMpeRkAnnbDq]LNBi+9dVmA#t
%hm;?AQ^[ZXnu%BLBJn+8>P[[hh#7VU\@!pkq%n7'p$5L+F1gb/OChZ=/UVgMYoK0H-HpTJ-j,n/RFUu\05ic(b0I8`rGqnVa;gJr
%Q_VraDB'>r&W:G3i@Y^b/,*Fu\(6DK9&FpP,F65e?51_Vj/!8.NNG98)p9%_6?(gHIoiQ@5"A2G%=PR-kL7>Na,fdUZJ,8R$F>-W
%cK6@BoS)jA;?l!JDSt6jVjm_\ZkL.**?gg3HAdVh,j.DZPY*N&0rWZ%Z-NIuc:%"8AVkZSK5Bu:\6^`T+V$_&hh0iLh!%Ff\/KQ1
%oo86u-18AW:PTmtMSnpG^>OGPYYj"H'ips+&'^g3>/t&&(Ld=<,&Dq3TH9u!(L]qt/uBOa/VQDB_FggO'et;4$MUpCmmX^>E8FR@
%^r(>oBtHE6RS3E4H&@?hf/<'$C+E:7dAtei.P);(KU3j7Sd35,W`YDX;DA_c9[UfG!@kIQ<3qI5nmSQ>3Vu+B'ZbX9:_YX_8IZ51
%I;Ij=QiW(YA3"k:1RQCfk+`T+dAj6[SHT`IWE/*n+0eKMJ5%-eNgWA^f8I$K_>;QUjFTkm?$Q4S)#fr]`hi*9Z#Z8*Df=aD@B8>/
%>8pk948o!oJl6]bm0NCd/$Sdo<'#&/i8!_\i!^Hh=)cXtLi1a5/:kE*m8&tHX#*h!@o/2<.Y1!Pg<r2Q,?i`+[8P7Ve>q[b9:%;=
%S%;KbU2MO&oub5_-;,hA4ba&CJhENY9o?=ogGpnb;b4L&H,qmu/Yh2`]I^M7RgmHU8R?mhf\G6Si7DQgLZik^8aa;!=D]>AAD8(U
%Ru$-tebWhn*B%_He7fp:`#Nn76613pI>U)rf\>U>Lr2J^JMYm]_PqXnoPbF#!%XdB0a9ma58`C;5+0l73sFtsf?n$#8PgOnY?+MP
%k&0Z=XS5a\)@j).k_T?-n=9XGL2:rkB;S&-+c),!lm12o=fiAtom!B"f3:?f[M*!\JDlSFR);KgpL.@DmZDbFs+3^>OQjqbgVlLU
%Qq[NXd_.Ie8Qk;?(Z(K4>!n>[&39s6#3?<gMRW&k^C):n#Rq(s`,59GY!HQ,DnR&hg`q..:m-ff`Ep%qXs=]('Z;-und=IuWZap<
%&tJaeeW0h*]J6dNmkB.QiH?qX)Tj9Z;:#`403[Jd8l.&b;0`k]*62fD-]e="Y32!.Ni2O\kG?g0%kH1cMHr`S;d=1IdQ@X@,nq!g
%M^BZJW8:.CUsRO7TcT\?KsN_s%1-q@/ndn)<@CBc1sEq($<+X/)W>tSH=&5Jd*RL_D!Mec9Bh`V[mKm=dX6Z7._kh9bf*8T'U>J0
%Dtg80*rFfBcWA9Pn==Wr+8ulL<]W%t5Q7FYn&WZgjgC?=Vf]gL)7E8SfP')(rSp-6qEer+_PR?;<PP_<T`k3aCB!9I;a4DUM1%ZO
%U!@T1V=*ui(&<(ph0&OJFaRD0TL<2^$eY<t+90_d)>s1,cThEXir<enIJPJ]BXB(5nD8.9gND]bgGW=Z5?PLt)*\",lE4X-.1gD*
%BpA7BCY=%!I=PbeHt__Nq!A7`oUX_89G&B'97?Z2V$__!_o"_<@l\G\0eFo`Ug(:"p,(T"Q)WH5a`ZM(AhWP^VOk(uHr/5^\BR_e
%RV#EdR5T$XBX?-IkI[]U?FSCdV=CLMPI;LT8Qh(;efE"'Rq\\SW(h=A=1(&CmA2^P;3js)J7bA'8,M&+B$[gneXP^?U1jLoX!TTL
%+&*Mn;d6QVL-n2rR`r/%bM0BMeWiV5F^DdLBBm#[Xi[>\>10:GC"Ej0:.o^]a&L;I@>O$tF:EUeNfhme+"u(gSn"fZK3$"hZ-p4]
%hPE:j9XPsghf4WhFpfgpBl)Udg2tO0;uQ-?<cg5*]]W"8:Uba.-H0e;AFbC`LXiR(1D(VTP%^Hr6b[!V^V4WS*ar#OZV8Wk!K*?3
%=_@R:6an)^@=YZmK20>gBUCthWUC3/).o>15Zc45:=kC^hr$#_"&#+A!AVhoB5=Fma&".$fE=3^3GA,6c).'hN,(k#3u2g$bFi9;
%a&00f%NRdKm\U;9U,CU(*44+'>IE]*DNWXXbEFiR:01AtHYLt'Hu>h;@?j"sLMq0jLASEic,":sc(ei`FG75DJm(2FT%g$L#TQbO
%oWFtGp._XD,k,nM),\Fd"^F`VJAL6E4U5)?[t,/%GP-&#RRq@&g@AM:kL-onVG(kVW("$c1Z=!=JdFe^_P93bYome&BF3H`58*eM
%NEZOeNi>OTgU=c_Gb1u0j*@*2D2)rMim"ib:W`1oG+,qD)su+PI/l-QosTXX@reFrVOGJF4B]:u"0O14Omc`E(1!B0i4qt^2@'Pq
%fnLl970cLo/!KjEdkK;E)VgNG,l1rMA^^P)G&7#kQH<j#SmgiqF/!&smb#o>>naCT&F)"_Xke,B!b'iW"1CqScbQsXla0=*O'];?
%EgMkR/VoK[f6(u[M+4I&>)"\KduJgr:qLgTcfN8s_tV\6M2Y=GO\(`IaO7:5U-F$C^be5a1`Hptb6HKOFOd8YZ.h6'U">_6;IX`S
%GGM9n"7c3F*8co&$+_)m(J2Xk+@EIILEKj\f4e+#QaiG+%N!1kB:8-6RL!G*1PJr[gU9o-6VVH56JcgYR:%bZ?e;W06+WW<$kIPW
%6rk*RWY8dg.7^m;'Npmh%#IA-EM[7kc9.MTGl`\PQE&%bBE0l'VB_9<+@2=/TT%KCSiRmJNAZ8`cinJ06+4c)Le'KGNS:69?GaXu
%!b0?(&1]"]c@f!")(fjJbi(iH#uWp/*<n^n_QW8nP'"5E@LP5A1hd:2Ld;XM:\CKoS'2\)37C4s']!s>)a/ugT'>HPd5:t1a:^nS
%%2VE=[gh3rOZ*T)BiuSC-F$$$5$Ts2!s(EQE#HoR[iSHQ"4R_&)\du3$F^UEE#fkQ,[itThIZcM*'+,S):<.Z"Q"lA'$RmS84qB*
%f1fq14#H.2Be_Fo]uHQTD=eT8'E-K=PS"O1&sLbFjG]1$Ws].hpsSE^8D)k\U18:=86h`W>&=bjT<uF0L7T>m)aQ,qSG93VRl*c6
%+Z@S>3_1C$d#f4tpu$BjgGNuGV@,k085I;lKENVn#B[]8eY3)\[nRgB1d1739_IMoM:O_jB<#R1(fgtkDL,@5Q$A6RD8[&E:KMCd
%eM@#e4*,s\^['1$6-rL(>4Oa2$-2g)#^1(*A\$KZ*sh0q)re0RL38<sEd>AdLr"9>+k*h^FhS(09\c&X<7+UJm^Y_EM-:Q\\C-Wr
%f%4l,,S/<+d7)JDb-;W8ld>AD,[01O$q&Lob8sEA8-[Z+EgqbMB6I[7*GB>4j,g,%f$hPl\W'`S%c!a&'uFfiOJOPkA:Q4dq3te[
%O=0:IL^:7T\Su"WL??m>,Y<6h5TiY!,l%e[O>NWr2GZ^bWpNs)E>!'s9tJaf&XtR>CdF):0%k:\ML2!qEgZW"\HP7m+GMZ\\002+
%#qV56N-'].jNG923B56*cto-NCMNHgAul3!)Q'BF1IXnZ0n>(YiC+^[%$h&'NCY\KW@%gD!C1D*^e2sC(rNu%AdL9TD%e`cC:8Op
%?IrIhO(T&a[4H4D'V8-j%FI0h-uRa4b\7Og%73ft/r9gl&0r@_i!C_E%*s,s57<>h?7.1oj@pk6-Fk:R2A`*Z)A6L/g?:)_2@Y%8
%]hY@q9k=&&_Bs@2;j.BIm%S3-,77oe&<W&`lCKME'5W5):br4he%t*AF'LM9K1#d@UC.Gg=@A=_6/bPi;QU'2+=9KVe/?Xh4Jjbi
%:t/E&@CtgS+e'qgJa7H8NA43OH.f\"W4,+s%%'MG)dSO9<>ZRPGV.fLFIX\b!n12p"S9!G_ID>#7qX=677^2;jXEG=V,nE9nuHJj
%>*Nrg^ha'b/V-W2dsTp32U.K0,^=GTf^\8qN@`aH2&frT-BUOEDXULO3ae,6@7T>iC<0Zt+N$[ulsN;HKEmQ["<NW")*0$X1SA\(
%$IME5Ogg0Y3=;s'%hKuLQ2sJ'P>2sUBgm-VZ5GnKNYenb:lAEa2$bO&+:6b,?Pid"E/m:FO!-(Y>>Y5T"\0h*Oh`;[hdGllgP.Bj
%;F]t+_>3p=gq8eT1l(0_%4&d=6*fbS1g6$]>ab?qKGY4l.*/nkBLd04agfUt,0T7>p.S:!ODtmU4f(o),XXF5Z9inJnJ&UaI%oi_
%F/5p+n4n:tYWm_Cdh]20Jtu%&Fp1!V7Msns.?-5m&g7NV7-*+P+U?sk>Z#\cDuk)S3n%(M'Gq,^U=4c!Je\A#Sr(#<kc\mgL/i_o
%p20XW"Zd\DOpI7CXlT(#TQ6E^H3E:[:HGrH7pH_]$\PWS@^$'5OL_5'fibOP6=Cic*Lt@mW<Q@!(US<jf#pV%+[T\m^[\ZOE%:;@
%Ykc,nPLXbU)b`0(!$sn3V9&p<BWN1.r/_!&c-46\Sm88I&-uYTl$"++H<$VENkltIT]147l]m^/MtDR4&pt,-03q7M6m64qi1`VT
%Ln)&V+%[f>89[+W+;X!2ee5fmkR'n?A<cb\Bj&_Hm-(dSh4"RE(M4MRD4_;?4)CN1'*6?57Ar"i^aH_gRa-(S>JrXY;]gCVq&!(%
%+tj->VfXsEK+0RiH&s^rYVjfDQsqQib`s8<(aDrC`g_2L%t)9AGG*l(LBMS#@mXuX)XOdk@eq"8#30<.cY^X]2fD!/'hC$OW0hCh
%"!Ds)=JL\TGd(HT@u.Pa<B@c568G;0VLj4,$GGUjdOAHfA-)4n=>J(K`:QWgCC!*:CCm6Wll1t'.XV@;YpGA]^sJ"TO*&G,3b.<*
%]%>KP_MSQ&eVlGR7.VT[e*7j&/sHoJbc+uU]#A]j/iH+",`)&K&-L[M=<U8pK9=,]%GQW/0AEBrTsI,6&3M/F$fR\"G1s94Z5A2d
%&YCGb$a![o'gZ'p+QgS/BH&]PYs&u4-'ju+9hh<00O3>GM!(3Wi].dP@n8X6U=,'bo3C+<,I&u'&frot2X!R+>lCi46VSBZ!kBA>
%aui=!L_%=Um@ph\GT&;/[-<T9Vha#\>iS+P&MS=3CNUIHXDVM(,<.'udU5?6**.P3RHb^?0aKR!CYO@G,%YR`_t@0$g^p.^O\C\@
%1qF>f]l$1(l$'k2"0UY+X]_WqU+0kL%$Cunon<JK)64QaqES+H-l`Ao!o$Hi[UE_mFEc_(J4$accfde6#g9@fo)uDdPeo\`K7QMW
%.^BC[AO@`dRI+UJ<,c^3N(2?";hVk1`cP#b"(n]bJ9/VKdGL9X`DIu=*dEJL7pKe*b?S7/Hba7i*B*OB9(kPu9ghm=<&_SV1[Y^Y
%)Zj^Z>U0N!)C0V<IP+D96-sZ)[Lsaj97ihV/BNH/9X[^E";(elViimq\LaMkpL.:7Vj[qAlkBFNZ@2#"2s<4lmP%pd]qG`jG!N&6
%R8==Fe?":]^dhjZRN7COY`FHt9c7G`=JTf=VOF_qX0+/0YU.qQObce8LRLjaK/Qpg!,AiKj&<:BUs:<*[KJsY'[%MdG9I:`g-'!R
%2T,p#Ho\?O,UF-[YXJU<OV:O(CkF-%Hn[sHj>K@cEp3EY1GT'e)V_=O#B1l*'d9'mINTkUAls.>OVc+1@m1C2TYhDC8%oOoB6Kp[
%WSq)n_h!#d#buJe'iebI#>d_=X%'R7kj0M??+oV`n1?#.#AE,>^en40ij$Zq,M=@hXpj3"%g0r5i_kIdcVb5u#[<arAj0`57q[m@
%X#]Q',Cu,n$+B<GjE)fYV*%:4bj;W/#F(ZBNS7W9M``-oTi1B_3asPTiG)iu6E>#Rs!"!7r(:r&&m/7NRC5V@$Kj%XOe^W88(mi4
%]<L+)6_4_l&eki-f@>[(/9L@d)h*,LcPD9gd,'u<)2)B@JFD)*eHl]iO,0KSc#%I0kV1a'Vqb5mC,*W$=gQaL%C`#2T[)*t>9)Fe
%!2-KRZc_N-+Qc-1AVi43X[_<(nSH*SVmi_Kq<Ag<:iC[d5_tpd/pn/uXrF5tS*5"PL;O-PDbEfB__3.!mXc)Z`A9bh*)gIY,9ajV
%2[3@Bpp)%9`gCVHTru=WG_9ho!eRjm$VF;Q6)5[l5Qr2URli9?ZRdbe/+>iU2?aCD?(>1)9T`-_i#Ia1?uL/j,s@1^.ssI6,!,3q
%b@ql^gD5":-Up"1dY4+tZ=-kpGpDDc3gdQToZL.1N-it*;[$sF3]Rj=duW9R*[&=G/./O&(X=\DJh0t*Y9HAVd/^A(h=Uj^+[]<p
%I:/*`jA9=ih-s9b5u&5$d_RY/3arVllUII#YRo/RcdSX9%hOAAd7CEQ\!r5?Vt_!&\_o:]aJFmI+&-Vk^(R_/nc&qN-5?$\CNTLD
%.`,-.6]0n<D+9371mDWWO^$+Q^k+;$X2l4?/7=J"72@kE+9u-*PhG;^WCR5s&"!PGM0`H_ko//@+;PDXW$W4HDTFcM.%W_G8W:RQ
%VDn`&jlnIno&<(O6;2q?*m(Ti*<Fdr<Q3hZ\LgdG"@lTW^aO4K)\V2(I#<ZT$Pe:fXdcEK=IsOU_?L;DL1N_NX@O.KlDAe_,NBIt
%!c0*#IVOl`Km2`!0$Z`CO5VT)6W1K9q,;.bMtd_:(OW,'IH"&Q^i+dqVA>SUEC1^`UjTgI'4O0THffkib,F>fU1`n-^t>?]Bc-.M
%2Am.'JZXR<1869b).<Q-rIKlqXb$mFa<OrC1Sqc0g-0"e3u#Vb$&tG<p)MWDBIYD1Q7lNQ"mF_m>Sc%@7nEk@\&!.7q:fKa`MB)m
%Z>gD[?bR`aNbO@NTm'c-3]nd'F!JW]5UC[pid@4aC1-ZNOb8%7q?n-KOf%Op1.'L"/Us-"WAibHZWL*K<0*CO8bWcHCm'^@jq#^C
%=0Fu$1Mk#C=@U>g/DQhY5SNR55"o7E7JIZD(VC2W0r"=DV_%6kJ8&j95[6Ufn=Cf82`N/(i\on_6Q>]^",5<9#Z!,s5N2*>*g[EM
%G0%QV!Gj"3@4SqU7W]MgV/Qd%+>=M@l=NGa9m?h\g:EtH>g=Qo:?W3YXe\@F2'AkQPnbr%`mt_7duX&,<S(0;)JHaB8--fr2X0+r
%_:l9taoqSQ&IJAC75S:1VdV!Z&-F,ph*VE'@OCSjW3AMD<3-KZKW*G(7(0U?gMqWEk$@kaRaPj8S(1He.K"8I(aORT()sUbK:!NZ
%<)%A-Ri4rL/mD:<d6Z]D,,T.]lUW`_pol<u:qe#4(./dO"@GI,A:7Ig+Q,BSFnT4si`X3U5X/hl+An]m@D=pp!%p7-R"55]NcGQ^
%imRQ4LuXBePQXW,Ei%IYg;ASVP*W,<EsDQ"*X<$SOfo@JB;XnbQHO0FaNk37(#3K2lKLlB>/+RZ@HIA.)j\Di`Q+o;_DfYQK0oK0
%8CJ@O']Fr`;`Wh_?m.Ac,S8c<-?\,W_iP1;Y@pA_s1[X#9@5Lg0pRA)^pVPhI/4mqT+et[2p0"hk8O5'pD(a\a#Mge/Ff5sUsV=8
%*q3FZ<,3l+emfARjpIW2rThVMcb[6Yi8>o3@iYb#?_*\j=jB_64854eK!;^X]M$$N-t?fhI*W@76DUC^"@E<\Ou[2+*h3'Ia<VBO
%iA"cLA:$5!pW.LGYf.1-R%+sZMub@0Nj]IE\d6b"oan,d!#7d2RKRba#,k(,"E#.;"p;-'o@-]?$&I&cf%?+Sg,85q)3JBA,3dKT
%9a3ogd%h%3K./&-<r(H?5]bI*I18AX%eu+k=UWSH8'p_KD]%@ph*jFQN#]Ft8t`e/Zf)3u-[H1QeR<Le,6f$6&?R8f%Ikm]0CgQc
%T7OL'^]ajS-'#90Ms^NM]98g\<['Y_7PVll!KWSq(D+u&)<,do5fhn05T8NX9dF-S>S'93'a1`D&B.Un&JYk)AM1b@5XL/L1IEd]
%aBVu6B=LeeMIs6s)Nbt,%!5Vrgo1L)iVVtfkfk[S/4d=k2>k?5#o4^f\-SYF*BAXe/KP6hs'UWSOL#P[8g#qddEX;Y5$nW5o0qno
%mu[\XR@oDc(GU1(&*$+fAK-E?le0[N&BV6.7JSjYQsfgc"fXMX>Qrg5VB>J0+nH,u7c[C^2AiqUAT4P/0g#bFEstpq&@hsH;-0LX
%,4q?:WHU?@>-<]YeV;DLcb=>o;Z8tD"H84m(53:8IoI1BTqMP^&GZI-[cfOVh,CsXK9)Duhkh(W/).J&Lc=#H@0"L!&Ub)NMQ8?0
%dH-gS@+-.d.smpPT(3$r>ugW8adpd)lN5WCB0k1=nkP'P`.6B1`Q:F5Q.uD=W&f:bC#oC,BX;O0OpD2e`?>fEZL!Ap'5?X1L7-'.
%7H=LJ;Cg1W"OQ>]2CBdZ6gc4K-0=icG^oH[?jDs,-2Ik=Mp;1VZ<T[OO3YP,GVIm7UF$jDnJ-g(+\^F",<(801b01S*0/gkJ1C!i
%D2p9n(ku>d/=Dq9Z4C9e*YD2U\V!<[$$K>=$j_^-7,VrlEp"PakXFi0P:Qs!75ncA"=C^_7l#_5O@S4S[V&E\)gC0]*3P&b4ZG89
%Xt,P'&?6,>FGu#<O=7%6c)0%'YggP9BhG$9OHcRb()&PaP(c#&nt.lKdMIidL.ha!(NsC_J/o%jN[mDdY'BFJ%_r,?;-9\K][1VR
%eahLMK[TCT^gLE[VQnDuc<s)K&Wpr;OGT.cWB`XG_LtTB;=%8sSPMqTPm*q_Gb;6I3\\)Z4,U%idf\PV3"8TE52GBI6",J5(s6s]
%D`Mtd[^r%I3Ago!/P!ZX4Ym_'FC](CF[CFZOTNQ:o*eu`+T]):-QH9Z#[hn?p8"t2gkkIKmbFf!mnT#!E:m8&_7+0s7`P=I+dj4"
%VFkTHJ?c2L43/8'Mmd"<1a4J0/\uIB[UEV+GVhq=`Mh&P!9/FPrMF"T_uiaaE(CO[P^S,h'TeZ+)(4-`&AJ+']F1ceN;Q&FYhCh6
%T#rtl:DNo.JXr!$_Sc^T>I4tXCP^jG--0prp4ePt?0Y6!]^[9%'CiCi#kkFJ37(l`i<HS+3LE@$OAh=!!S[KQFi+VdF*(Ml@0kee
%"TX;f@qQU?K6$$o('d?p$]VKSmpJVd&aZJJE>u'4I0c6%F>bD%RT;K_SqA!gf6l2.10Zk8l/rQR6mXmdA4oQH0<Y*A%"g@">`O@^
%;XC>?\jrqULT!akUbg^E1s$f]..>#o_1U_>;IS*6o+SrOK:S`!.`kFDiiMunF(k=Z[]d<SF,_\hkn4ge/R.d9*SR,3Wduh67'VDB
%9,'@ZBXU<Fij=f2W@Nj\phr`3JX5W+"j2S]6;ed7Fl5flRH(<3'G;<1%?35-V8\pC'_t?:Pe9RO=@=\K\q>I`-+@W5h.lue\)ANq
%pdiJ/Q7^L*\hnC^0NaD'`,dG"D02Ol(t*B5fnTM2TjDosrJt&q&"q;<gkJ_&lY"]ED7j>GdZZduUguGoRUPk^',lgO<*b\q5=ZB>
%"K7Lb>o!o"'tYtd+H1mtG[K)^dPDnGAr*eHVD(3P?qE=>"AS+c$.)Ub1`BZ76l5p;OZL:7"/[@;\d/9\'S/]4g;N*M8T\&U44;Lr
%mDq2AZLuu6%7etIIC)oLE8paCX.(h#Ob)_0Bs<i\_qJWL?L&e)P-&t<q?-JBli>D^XEKg4"Eo#?=U%r?kcb;UDEpQ?P9.,W.X21B
%LFmNfY*q-h3TT$4<fNMTnR7'+/oh#6K42U5linYD`9q2XWi"+Yf6$0W.5[2J&9do#=[-llGGgp_Y5dbns-seCVBHMnMu9(J'Is+`
%2J/)oOC_0bXsDF4@Wk-C"^Meq@S'/nls?J&MPT@OS1+,e<"7JqT]k%fpk<M)E(.Td<2_?7CFgdp+mWFP6sKcV-C,O'*$K/-"*1o0
%)u3SrZ&>lRjA![RI&\79A,C+`./keA^Pg1Es0(q"4rYrobn)Oo72p3&q+LmIbj1,r\LaEt+%R(&4YlmSamMX)jbn$p8S3eY6<]@_
%.1$h$C2aTka_e")i,VkT#g42tU;CF]HJK7KW4PA`@=e&Q=Z+pAJ#QqOo!:l]0Oo+]Xt:R"8tH#pYU]g<<Gjml_Gd`ul@13N)l/)W
%OXtao's,3c!^0rlo_!daIdembiP_F!EtA=W]qQIc?rEhKcFJ+'KNYO9`"ZPn*LtECf'W#[mEh=t'IB&9DsHW)3%0nL.;YHYEna@,
%e4"sM1:l-!]HhL0T]"VLfm?T+L^"c%l9BB)./L03f-UAMZ&8h_SE3.-%p['QQ\CRf.L4"*;3R?')A*%*5&2OoL]C%!$8mLOVUU+N
%iCesc6(iL_o^@:$2UAhP8.>%HQB'BF1uY-ii"4Ft'JHL-A^1Ts+&l%T/m[O#_9um<*)Cf%9GiR&Ik.OdCYI0m3Yl3;,\1n#6Zb3=
%ZGE4CN^@O=E;_2+7l!*0'FVYB5)]G[UWts:Ot"FZ_YYor@W8TT-<P",VpUV85rMoh>'-,eEBFF<:IL@3C5U+>L8^.Y-3>AR)E\?d
%*g-gL9tX[YDo#b-,c4+X*mc3'2j#*5c3*'*(f;Rja'sl_J4gf"L'gUCOfu`DH+^0s\m[JjT-q+s7U8ef1//5ZocdJI01i#fir50j
%^iT1Ibqe5F6>WG@r[r.+AHIE6mRcpLg_cR@Cc.F'*b<H0S=m\EN25qC1'"/`"Xb(DjU](LO)7hrEUgDeh/G[maU=t$2-=*q_h`\"
%*6g#aYj6&`=S%6VL^aIWW.W<!=Uu(f<8oJ,kY^?>Nsl:K-P@\]p4^.eS$OoD@%4a$PYhM,8H4j$UI^Fr9qEl$(3\,@,5<9$hbjV"
%JB5g*UGc%L?(hgM(<P+maoCs3=JYPh4Et>/\nubURtl5uA7j1/>EY^<a,B3spmdf[Mi\d]iCu7q+95)T`I4WDP(5\$^!\5,R=h)9
%k,*Y]b84N:B$!@2>LQEjmCKlElR$j0oHHdO$6_Ju=bkZ%WB!gHW"3BsAGN983eSjP+9a,"H^%O/\LiB5ls%m0-t@cQ8('FXNRE_o
%@G)+/0dO=U8g"HL;B&q4Ge@r_AU@5q/qjiNe+4ijO@uWW36m!=+3Gl=Nhb.;`84"cd;eMd"sO@o6Cs7fV!*Ig"3M8"dSW+hQSRPO
%H!a"VU2lH"0[NM'(rb(k2Sfk.cNr.`W)%Ztftf:pXSC!k;:K#toHauNK<u,Z*gs(;MYa-,6I9)SV%5GU=NiFG-a<qcE#gSn$MQL;
%&2)0)qj,pLJ&qR:L#GZq%ba$ub&Vb9=,Z&t*F"C_TNQK6,QNjB&J(INWAZe8Qna[G?q'<,XsRltc:i#ofn(mL>NJ[\jH)<N<Ut4H
%o"7MtZOnt8k5`tu*bAug-O<dLdU3dW88Qo?2Tq3a8ik"=R1Y\I]#mms_>[`V6:6G81M-u/BtDge!ubl_&&=p(.g#e5,MT'P6AM%%
%YE(>YO\nM(190\!7F>)G&LS>s0LT$Y=BfXs2,,kQ74l/#Ku;?7S0=B,$oc=DdYL#]E4Wb9ENl+d#hWU>Z.f"HRVOF4ERL]k2eHu`
%PNoX&iBY5f;hESr-h1g,:c`?0Om6Xc,7%7A]eB<R+"&q\OF$pZ?9[s&ZN047?;t[cZAH\i7A2IF&[uaS:_-sNolVe5]c7^s&4_:b
%Bo(5n*eOPb&=)J1.$<LF.AVYG@Uu/8)@_K^;,\Vb(+opBN;pIKYYct_)DMn,'bK>T($M1EgLp%89`@Te0r-WFAg#eNa5au7XgW)@
%`XElANG(&'QpK.XK&=sfl"\o@!@eukZ^pJRl+JE!12oFC'Gn`k$.dIX>"bl5+AP$C$ms-h3U1_teQrXoX]%Y*@EZLW?=!F;dsmUo
%ng&Pk;,+2GaNd%Z[]^d%)ZqCX4=e!Y%Ith!FAE6LJGZm?<sGAL<AcXiCliO,-fMiAX$nomNe'VF(J>BG\C.+FBE\I+Pc+Qq!IWZ#
%(4*kLJ3Cg`1dF"eq@[:unkl9[@q%)P$OQk@dqKV46neVp\8[.pLTLrfB'5&N&kpsD`>D,.kc:9Znk]=HNemLi8;:nJE2#A8d`]0Y
%HE,j`DjUV,&s^;e6O=r,;&$1OBrW-EOPk^pokZ]FDfW,sg)T".Z<GnBa:s?Q!`@cP"$27S@;fb"3j]u1:rY475VXPR'QcYf?uoaL
%KW+TKk7hn97K2OdI+Fa&fE9&WlbLIM)4M<O4:t9oZ2IAhgF>&C7d+*01b*%p3$R6($,R8%bZQ.2X4ii5TtV\LWEe<)P?_M9Oeb^,
%=hDdi=h^71OC_kb.ao0d>/D*&Ca86bZ^OL46(=iHVO&m2FL_js31KluHG_c%Zo>L=1e:hQ^W+>]X4KB^B,%EKj-Tl+>L!gb_ob7!
%;.-UZ=_s*FaWVXCk=EmSJWsRr3aAhuTpdPfp2dO-M'R'C`M8h$E&h9`bO?\r=0a5KK[m"VRKuBE!\]@MZ_cTWmRU>SgQHkT=4_`8
%-6,ngFcP@`#rNS1/^':Yhs_B8%$=CB^"!Vd&BTT$''5ri66WET!9UT:O1$T?of.^6;/s\:<QWBg!1>d%E#<"?aQbLAos!+Ep5.3p
%#:KC>Z"hD9EdO9-^oCr-EKLX3HAe:?<rPr"Q>Mlb[W&"81f8#;5HUK:<&Is*,=o0]WG9DsSiTrs_RZ;[#I'pB0b'73pq\[I1Z#"7
%05XE]V:o2U[#T6F%r#u&IXL_!TE.o15m%8#\iLX\-,pap#1kQKd&*%tCpu-Y5oc]Ph%Li3eJ=.sBBM4"7BIt\$`&Y+;]u44Q!>)V
%iH\Uk"E#GMG#oDdO<do1<o?VJB31ouU1/qu.J[&'XD^^'ISWE+?"nFE)&'-naon&rHK!Y4fIP),Q[Cc1P8I4N2(sYLdHmTT+Hd.%
%YN>Zq8'#rD/oQu[&2Wu(hA:bC5A,EfWRb)=GGB[-h@"'uE!E,d/3*]0TV$#FFIF%o!St1#mta8O@=.D3kQfRZHJspSQ":6cTcTPJ
%a%h?)!dlk4nt%F+c)o^j$J'=,b'$iF$6AOCfk9>()saD>kb#JSi*EauW;NT.W)OS_j:XgCCh^-APU%7&[)B<\K`W"E8n%tUF@c^)
%b(O8\GHfE?6aasMH[mZmEKs?d#<<JJ0+ZVu.D4q]P4>>W&1pD58q=cK;%fKTk:0'E3_HlGqN$$!95jd8&713PQ?uGjd:GnmZc-AU
%ql,WQE=S!$N$t6QBTOfC[$m6.7U6X*MOfRhhJHokTi`!U;VDO7of1fR5bS(+R/F\'qcuMeH1<SU;AC+9BH%>6a2X2bj_RUWfpmL1
%s(t^HXIV/t1bLQ*;)C[l+f]Tl#s+GQ//;8W!H5`2rGtqmK^lnY@j(6D/C$Z02^3IA`W8l68g7`)G\E4RLM/Q19o:''6`$2iZUtPp
%i6F'QX-dH1rTQ>B`JWr.3CX\aKh)aig'1_pp$n(=J&=??$gPZ,+n#`STdgagF%!O-l?=:.H@>9CMrgO?:4,pI318/md/rf&+qK=9
%0'>AMER^B;Z-1SUd[b-lL97q+5ZIS+$G\Y7EoNKnPegc&*))2"HJ"ACf.jD9LX8!00`^!k1H<H[O!<spP['lt5m0Mb8[8Gb>9iK_
%.iU7.2$7GTI*tK)0i\o.a2"VLSAl!g,QBa0)?Pt.7GiEq1bo$h,Rc,NbmGH+(iF@q6@VfEb2ufG/lX!2;9](N7PI]FYH.0TXu*1%
%F;1.i?rlB@l)#=ubV:tR_K6OYfC8_Yh2Y$jjuDb30Q=TLXCbMF:^6f#qJGJOPEsl4-J!>^6po6.+)Na&aHsl^Ia!J-csVacMsXBM
%Y\\nQW<Fp9;B.K%ftCnQ1uAte.PX,V<IBrH$sP-\a41q2p'n/b@7K76&IC-\8$pcDJ,THRZmG]a?m1,t4)Sd&Zm/lr\Ni\\QE1fh
%3kJ;;dX_X+20!L(]_Ip)9`j-:%!?MOHlkg(AQukuSV_gdI25NES#XoG`G)-rCn_2nbnFf_KRG()`aB.*GSs)/^h9K;8,/`g7:gtr
%X<Co3P9arkj:Y6r8R'Nd7jNe/rF4SUCjP51gLARlfPmX?F#=>%IECBO\>5#3.[CDD#\lkX=)\jT<E;V3Vdi3DS#U(oU"58O?bS@L
%0+Jg?`smUnWgCQpgur<JUAPS$@61FX[j<g4S8DShqQ:-.**\[O2]rN#[0&giE3_97#jDq_5eTtdg[YfGl4$/>kR@6*:oJUX?`_pQ
%n9)[+_f7?@qAp!h90kCaAAR>C!8!EZ&u=[*Z]-kI'l+$]Bdt&<5rU:-"r6WT,u!>i,ng?IJ6GfT$<?%*<$G\`;.6Ge'^0/.]PEGC
%I+n(@%nJ-Ph"K8%J8KnV7_p+NH64U\=#b2on/eJ!._=)ON@5F\6<HT#i2bWZS/%r"i+i=QCl7O#+`+(&R1?u[*MLM;1%K+9-X,RN
%5R<R6jLMQ!cY9rtMfOqd-,^Y2.[p2HLl3<8F$X*M7'nuD5BE=K*n<1!a"NOlYF<#qOsQ@MA:'b%Ze-U%40#q<T.&oqMWfuPn3%@$
%'j:?EF@R6s![WP0[Zin)E2$c?"+D*/hZPob]#5J5$CZ(9ba4BD;CB$d+/5VNe5/Q]<72N8,kDq$2%9J!_UVR*EHD&S,a(gU)fRYW
%*Qk7%,^/+a'F[^FD3gebAG.uR*7:+-MU%9_%J^tW%[mt[;1UCC8X0C157OA::kEU]O$;O^6U=VCABX`1Qj(#ie4QI1j94Fo@>:!N
%;/+^^cYN;BAo18l8o!BK.Kp-5e,r(EmRDc8p`-$D%4?UTU`2j['f#dBQh0JO<K0c+RcPtQX3\M7a5nL(h'He)>"XBaWfJ/drNa(l
%HAYeZi1`67'n&cuPIt!]&6O0WZR#cY&J)r>SR_CNiUbE/Yp1r;:#UUIb!TJjdqhlPcjGQ8g]sen6BiLnhd^\9\YHY&_t!Q'5nI,I
%#C-l)l6slh\uhGc3N2!Om>a9g%rnOo3U1Z0pr4;2UFAIT*BR`.RL0PfoE,+@Mfi&\jut$InDaI>/e!UF3d/FE]r3!28K1JJrdgkS
%Wi10lo2,-.AE#%o5oD)-K![P*dhYMF;r9M7JVVdNo<Cg">_H`[a<hfIROuQpT<W%<5lp>1eTRpa-f7h,jD,2M[7.S0lX,<\^"^,4
%Lp>TW*6D>9o!hZ3Yc6uI*#%ZeW<.VgDFBO^(J;(RL,r,k@[eg'<qiB!>?4'n!LC)S%MdB6,Eao.A3m>?;pC!==.MJh:b0Y[[[NeG
%\4YF2-R,(pEjYPped\8,c)=33njs!0"5SoZKbdT!2%)7pjl>sgG(Q[=[;-nT\PDe]09XiP84t[:\@9^SmF'NAS;;R(pmqSs=maho
%C9LSf?-7)ip>T9Cch;(e"TP4!/hE,_d4B%<4KboC+tHtFofK/h/4Vn98f9mF.Sir`I?dD7D$h&YIKqW5=Ko;IZL90,'j*jZZq*&2
%%E[=UG$ul7La3#N7tWcHWK[U:CfGiAaGp>U;8,i5&=.Z"Pn=K@'g]HF1Ydf'lMT<QZrpQXKlceL8GBF_8DA:GW@b)]8`i>q"$Bcb
%87M=@:F]V2+;^%%HZ!%6e"*p>VAY]P&l$W0Ft!SnY+E]6DsuM.osi9th>73J&*kR/:?MAF]7fZC!YF2Pc:3"u[6`/m/Mnm]ZKr_6
%Ib-Bq4)7^S-]4)>5lqn-TnUUgYH$aT4cFTD0APT[Yg/o`>F/LFIti+>bNT_^hR.C4\V8VO4#cmNN35RA).^am,TcX3crL"c-JAs+
%8)aYSJi]jPfihu\KA9Biq>Q-DbRtbF8RuJ7[.7r=eGd7&(1"mAPZbBDi$YYTQLp\gZ**<sdn&Ypc>YL#qTL$!@27e(r"DW$qU/4K
%e$W_,W!XP4%+MW0.8mY0?VW!"R$1?L*Xm:?I'TbqGSP.N,gK*n-8tEKA#XlsqRD?kc([Y5g0?Pmc'9<>ilfBkfT_^m>iUHLICcSG
%V0^gE59Z3Z$[`0bGW^J1,%'rgncUOn!IRaF'QHUu$+RLgS+meh11Qr;CXiLIC,K*Z863eBC^TR)$eL2Qr3(l/n4B.tYJd8\g!a:0
%)Fe&o>%jO8aS/P8r9)gsTOA7mP8i't@L6GIZoaSP71PU6Z%Y0c73\_0FhcO2`#K"3B_qo<X%3A3dU/CtOF2j;0GIu9=`V+>Vc!o2
%O+s+C;Y=%Lk`3/o`&.SA76B+\2K#+EB&XmTKSR#-KJkQeVMQcdr:!MM&7A&4?0JV=m4ZD+;t?pa)C:9C;0s/YfF*+DZc@db]PJ#\
%F9b42j1^O=fPC@A3M]a4J^jk-A$;1DVm?T(L\6?&5VPqAEKnriZ_c^rN+Sppa3@jhA4I<anTN^3RtQGs:O&Zd3UsP;6YRm.;W:%c
%J,0s&SR8a7/uuTPa7OL"a/AtVa"K&13i[27Vd!(XUKfMi"..Q"dAq<!kP<LNC+23bMIRWLOu;[^Sq25L[BQL=oM!Pp^MF:](ibPI
%9iu-&F=B`YnjM_F89<Wr!pQo8-<&D)h_(5mprgG9W4\bg^<ooVFE$YKfBo6\">2<sEHWHr9jZ$*M7-rW%[@?:.aH+O-WA\i2p7Ke
%c,\S%j>YR+<7L>`KLn9%V?Ngfi[DST.*Hl51(GP@(c*j`OFJ&ERbKSSS^a(iOJZ=cjr'\J)&'ii8c4J?SAuM&_Z0k-#9WrehDU_b
%c9Db9aD9u#E;$)*egP]TkTb1*6n-d<(Hm.hWZh57NR3Jo*n8?;bSc7S(/q`?n187agn?N3jQN3!`Z/1s?VRNdCVNb3QB&iToOL*_
%&@>:uB,/H.2dabFO!Y!-T-j[)0h!W6?COk9\aoCN]0Fu\=XgiR'+CV0@#@/N4e8%:CD"crB+'Bji-H7T$B@q?O^lqFc6-$%??:pd
%*imjaPPLEmZN(rf0ki\259<_#,P@#GG!sUrd>t/I=mDMsD=l\#-O!TdrXe^/oA"eCKi\`"lroF;1bnR24[gP."r*)m7pl7L4#cj;
%&e.-$/AK.a5mjuGlGrgpNG9`=O%24Y]nmrV+q]NSC9?5oB5cE[P#aZA+#oD<O%$sk<AJ\0rQ#0b*>@8bk4*f$A$p'OmVk+)Wi7!O
%M>B2oDT/?FLJ.(`-mqTL@V=g+'"k>0q!_)BoYHYrZfUe<bWe;S`d\#!'4+ifP&^g0]Q9?2%uVu[@&Z[$I'pRl,&1pS,eQ:L&E>4a
%]<?=jll<Sbqs'9/NJ[>)/Mk%mb,kK6VZ`J/rFo`0,2q>8)6*0<g^M[f0hCZHp/VQ[,Wl@AGkdg8*"Udm.eSk^EQZM!$rHXXqahE1
%\t2="U-5j>otZZ8YTs/Q%Yt1i;61PY)_E1X:QN*Ye&*e<Q#p.b^YDV9+C`,srn17"pL4'=5>&qu,@pDPb@8<nEcK=LB6P#QXUk7r
%rn353MF,?QR)nf8:UT0h!\R28Wu/4/]u1R6.8e`(--,!O/0X#MmCI2i"IVj#ITrV-XX6A/la@GC^S/5noJP+![,CW[i_3Jg,]U7S
%1,\`%Oq6^)6<:<.,iAt=:O3h@Ghh?r5Q:.Jn'tA\0DHm.7&oh3\tBf9)6pDP7J.#G\oe)s]BIOn-I/VYiU6l#N'B/OR*d)OJC2tR
%E2$$Z"l8V/QQCon#obTAcgFg`;-[l-Ie/2aFsQ%-cPUB=1ApEc;@I33)_"]lDO-3-l[c<*(NDQYca.aN(JH#9-)J\,&)OZVIa_ue
%7K`T]Z>bYPY*Y3!qIL4]oJq7t*]I/f>fT03?-bBFL'rtO>t6oq62]]%LWL\fGRCDP)tT+P/]M:JfM$`=)tI]*@I_kis0c;4q[hJI
%Kp2]"]W*Hr@)@aPU@47&+D6V"hD=fpS2DIs$'S2n5e6g#h2b6QENW.^&f:I(!7/!?q?_Gf,65@CN4jZ;dr1;oh0#5;E0aPI`q=qD
%0d_7;YeecfopXB!KpW]*MscfXgWg'1,5>$NN7rHT`SlIPits,P5!hHE"!d-@=l%>)5e:l6cI^6\Eb)q9^8X(c!*qp0%PUDZ:%[s+
%SN2CXVD$SUJ=q)I<`LJc=e\7aPZrln-+pV%/c$af&`2nU\2;,!9_%KB]c"*%.3g!//$1r(hdg<bOr.BZ2lXsRRs?r:.A*)lS&gBZ
%V'F)Yi"q1l3@5X9$@1OgLbdep4dZYKMJLN@kCH8hO258cP@$lArKN"+aQGOL-'8ce:#<AnniGCG4o30JNt/frrGF4A.H5A/0J?"$
%>amqPga'2K2SW=4i@(ej2;dd\"%AO)7PkY0h8TuF(GW_LS2DiFURTJoBBeI_\="K[Km`G0o;hq]/qj4oDl(>)gqIkk&E/E%YC7tY
%lR$i=IdYMP6TqUVeq3;p>U9R'@_8qR=`>96ae9'F@9epnbUTN"N-DbgPU11i6+I)S,R$j+llYlPlSG0T3^j?Dn#hCE4hOB8%eOud
%Z'XEQ$;KTUJ`i<(h)B39f)hX`Lf_`%XOl(2_d@Lr4EJ"7(X)Ss;n4iIkfu0:SQNKukBfsUE]n!lT,nsDq6$(18qtJKcPi;;HUYh"
%$\WknVQk`(11(#5(&Y"[J,JkM#G]2GABT.63p!Ln>7Ssm.pAXnP:V0$bDl7bn%TZE!q*84HQ`N3c2S4!bhNF@M*RqHL9SfLb%sR6
%1R#1r,Fb#-`IYRBp\(SQ7CINu9EN[ja[G@51>sb./c.QVD7u5ZD.D-0D2U(QD/t$[-E19&MiYL=jU_%V`uk>Zn*/n=;fF1WI.d2T
%-UJ';HrEg40&&K+W+UbB4m44DS:3nI+V%=ZZ/j(:&hK$p=<=ctnsP0_?PuQfVt+Ln5tRT_WbZ<R.thXImrI/n"kV163fGGpLY\`C
%.3gO3"9#H6f+s21qL.8(/$D<ROlYLFeN-bL?U*VGGbsZ76a"QEN-KE_K309;pr^XLrCMok#gp23S>bal5.^F;f3`t!laLfIrmsBI
%H1,WS?[hsO2uiN^=9&-ZX0;O%eMk6gqrZZ5p?LJ'+8V]'oJcgAc)\<Ln,M<I?iB$:DgqZ0DuTI"hnD64?J#/3mskArFYDVNrq6<e
%\$,gNY0'Oio+0`+pVB;unBKSBIJrHus7kWThgG=dS+#@bCM&\j.HB@p]Qj%mGAk4okOZ%GY>mU_kfUYioC[$OGCC6+B=-M:?221L
%rloZ%HiBJS?i<dX^&%H7pV2'R3:,&CB8GEZHHe(MSb\,'qNp5eHo,+.q!-U8n,DeYs849;Q(-d(,o0IS-;D)h;)1.eloE!rY$HZ(
%`j4UP%R`3rjJ?ql?B0)QJh&(3$,YtFJttTofQ.B]#0SF8^.]hpP'rN/?6!U%Wdt$BR;P"j[GdnO`*?b)(bh$HDMeF`hgBF(%UWq!
%g^KAj"P:"4Rln?P!4BCDYiuqJ"4kRFeKUW+"En4&fBl'#d+7KRkOpf;O2^#7&ESlQ/$1_0/YLnO%`m+%Wp]%nWbRuh5Hu1@@.\rk
%eLq9CqR%j&Q<c8]#jc$@=O$C,9b__Q:CjU<&)buHC,8U/9E4R)Hoe5bNBade=UNlS#dA<#E1oLrkr>(p22uiA7<rl7U4h0lKfXoF
%:)c(!=n:PC>^%bm)<+oTX^IlEN"[R3$p_W6:7U/s0<a;bgFfh,4*Sc]p8JCa$ri)C/rbf7,jac\o):1.LCXF6:oGf5FS]EI5FjhB
%SU?[='d[<F815U9r)$_*P#VtGI)`b9:a<>QW\.f7$?;"d3O13%dr]O''GRRLH?Lb*TB!:=rc11bO8NC"qlI6SFHh9fIZM$`oh:]1
%lh*_7;2FOW8+>)!Nl>ekLVhSS(/#.kP22Z:VqRP,:8^/7Qs]h6G*.`dDH841j2OaT-:^p-eYma&&I,<<M;5J%XMo"$NVDn]o!+QM
%T#G-!lZQqMc"M?)!0G@cVb(p\&MT#W$'D@tQ]3M[Z`uSFI.CA-8>KqGg9>;?!"@<`*18cG:TQ26,3Djd\UN$GG:-`N3ouW6r??d:
%2851"6L-An*C$#P(!W9;K+>4U8(rOcM[]8afZ'VnLYi)m!qWs%mk,9'nX@)6N\jak8I%Qqo>4.G)e=VaOhf%I#ur3.AO\tW(0s(P
%7T]Ud:M6["W"fEkEKMfHQUhu;+d&8&d'c<MK7G[WnUo,sH[7<1]t!l3*-^(uh4/L>7k'OCi_c'*P(tB1"/`5]rch>T]-h1gbXqV=
%:L083+TTj=k.O!s.Hlb-;AICa_FQ<9EKN.%WBb+T[QE02=2Bs1m`l63I*p,;[\d,lB!m5c[+,]sAjf/"S)rMl\?PQqRtC;!bb@%:
%S%A-tpUkmFNiW5P=s'Z&=`6.daeiKFqB.P2-$r?0_]@$F2?Gjr3Qu?a`n#WQ1\g&n'PNQc`IP*Q6=0"TCBPX`8)lHo1\L^L26cR&
%-dtt=PDcbuXLVeqB%*/fL]A"0W['9*K3?+1f!_PFCaTNPP$tmV7#YSo)+Smi@C`!UDhT;2^[+_FD-f9e`j0tt[W'3p#hfB-J+T/$
%X@jTI:g6.MF5[pR@1W4oSa?GZ1fV"@S/"aX"=k*M.^cat![-&X=ofQdFLiY8i!^!Qk[E\5l2Z\YPd\OtQt\=uIO2]',/XLAb,\&g
%UY'"RW>P[e<7':VQq_@c\NE"US`&G`%Q$N=>4E]fOCP[(\[]<04o"^a5/[h.0@&nN<UW)S2]fr/[hNYh).CZrYUIgp(J-nr26osG
%:rOSlC0^B.?8E_J,RFNUi?Q2-KHr\d]0ur.%KR+f#`@k+\s8W+(]NC"rr!3Udj_0,rkU)?jGHrcXaFi&4=$?B#m.c_o&[OMVTem:
%#fbA6_FDdNZBb&9.[tBlergJA(87ApefKAsWW?5!'GU"ZTHSs#gssX">40h@%5I9.Q7?#VkF=%J>2b/EqL:2g:aBk2i_2ib3FFF;
%Ol<l:*%m8PHXRd%(1,>oUtHi3d>KYh?!M$j@8UKpL<0>YI^)Y:[ho#O^_d3Ol40OuYS)1_\N!4GrZBnU,olG$<\Z*/>nJ\0Oo=+!
%(u`tJLS@dneroq#':P]MCs]u-`C=U\Hud?a.OL2J:e]M:Xs\j#l3HgC39gN.%>uj[%D.&t&X)_!b_E]MO_>)NAqV`4q#$hQ8AM?@
%e.E4ZBhVo54K@Y`Sj&oO<Z?W;@&95+2bD8c'LQl-C`G@g*8-m_s"]<:[!F_i*/R\2(li5?,M&@h6)!*I7hs5@C'/>8co-2)#-25U
%[Y'+.fV)=LBsWYgaV,2,@.;NUZ+Z48q@;Zka*e\,%a:DJARq$7P7t_G(*6ieZRO>PLEF7HR:sd^5#R%J6KWg2iPjaC55=Ep?S!i4
%=NHs(RB7lj);]F2$EWFS=D$gtGp[-WE?10!"e(V3h#sY/V7cX/$9*b\#V(.0nY4Um%,2qJG7@8eI7M9[#mbo2-EP=a>FNXTQHS7D
%9%9qS@qp#=7,.cMGXO)1guTe.^h&6bbmCoA]P]KS2UC"n:Ke"<dh)qUTl*o#RDW^-7/:OiAiNg1NsRnRRQ2JeYCKlqPtfGQHsiR)
%mVuFt7\Q8;UfoMAEnHpo6H`u*pXA;n@.IYG%,1##Q"Z>g=r`F=`@I(M;mE4[(K4/hY!Ge2=UVIi>nMSt4*LQna3Nk.SI[c)I=B4s
%+7**D=7u1U$Y(uN6c-!V*9!nret*o-_'Z2O_M;s9H^Am1>sHX@XS>*8((N])c@3O[(?(0,e,J4#,+@r?gUXDJp@P<@caNY-60`ja
%Ec*g/50G"aZW//qHYL2K!8W2DOoNVG=8pR7%orHfJ$."g"*0^=GH>J54@ti8&BC]FRm"#,"bBG[hWVopgXO;]NI8<=`:A:.r',B\
%nT)pPdN`lq"\b@j)'&^VV&p/7*.TkH?^ai#/ncFP&lc65!",;)m5>r:J]S+=Bd+W?5+MEub/kX,s+n)*9uipj-!Mfth5KSQ)=[!\
%L"eVl8-X4'4#Ss0]cV[rO/>U$'DqtShI!q-M!oKBH9*WH1_&7'/THY%`Y3@9k308ThRQ+J)7N1R+o;p5g98fKUtm6IRHdBh?LsUP
%<OsVGRoB4.E9s8q^ft9%DRa<P\.d?t;Ng;j^ldA8b-%Sr;0Io&pn4Z@f$d-!c'&*XBn:J?ZIRr\S82.sZ/jEF2XF([W-t%/W/h@:
%:[IZF-IH6l@Y(qo:FL,iL%7Fqp"+EEGBPR;1fMu^Ep]B4I6[,2%l<^$AuXNgaL;#<>r&,]_8lAC7n2=(__1E^(KTnh\!=(Ki3f=b
%%N/+YZdDYO"*""NA*f10KPTud?[uh,$9%2DhLM^XXno_4:b:+JIIFq'es"(On$dQ6YT)=Ookf@L3=NkQFR<>=@+U]cHR"(+:!I10
%JH\u/W7rMGs$OkaRVM0%mpOj&o=55$#[ibP<tAJEEo9RoL.!DYZOfiQE74ITpeh(jrG6U+6Z27uB5>[:_\CXPcbP?XedP%bobFRE
%)PBT^eD'ol:nKcf_6,ku&J]>2hM[;5K?.qfMC%2L1NHS:gHK)]0]iCS;&j$dI&-[ienqJJfVWf$%"eh\X@4eqThU'nTXeAKlP75?
%0Lr034YpSXZuEnC\MsHPPh)>5'F8*ZBTT)%55`k52bj-mj7Dr*:B=n]7]iKEnh-4,pJO/gmla4j[@GrnE?VFI:aG:76<t'7+2J@[
%Q9gQpR;SO0"-fu@28[h"S/]$H.V7dUG@3T8_HK$M&;@sg*]mR:J<s\n6dS$O%M=><*Of%qXVG%h+BL\EQl"k0?J+X3KsGqf9W2G3
%j,`>]\Ur$MTC_!YO.#OE;98CM*&j52$A;gl&JA<Tn1h_%.F\]'K&`d:#J>\;XAXupLa\WBl7I^VVm,l2]^n[bNVsRQqM&GkD[>GR
%Z?(R@:>8Ml,C1i_&4HffSogno736$1-uY#1SAY_&b\p(PmTEqX_scW(^(6<t?[#>ca.B%Z2PeU_8K?VbhJ["[c7&&[AI;#Sqe[Im
%<_SMA[h>N8>H,YZfLfMNbn&Etl7`At-3o#8)R!,gOnr43,U44e2W%"F@R/q.F'sAX#KhKL#n5]:UDh'VR8P!,'Ed<.9@16OGB[lY
%Weh@H`%7:2iTiPU,]a(d=#5^%l,ZACrq\mPs7f$7[2>OhL+NSJ.5IbOb2+]b_P^AUR`NcKf-'Gn![&35N8Q<4WUB=KU,+eu<<Zp<
%&mZAcLe[rH8mVtJ@u:+@l8AHA^!8KSJft-%7[SV7Ub]hmSAfb@)Hl0paa(QrJ7ftP&kfGoZZ?+jhDQ`q)oS4Z$XjojDaDs7+C=F9
%"dDL>Q4D8\>T\U'0T`:mc1P38qag01\A>+/$0%!!ZRB?(%.b*8ZDM#8^<E!ZhHrSrUKH`M"T"F@8OCKi!ORuC9:92MmU=;TO,&^?
%D<fCg^c$;fLcSUAUlhN#U*#Bk-dsm0M[D4[?_TO[-iVWm"ft[HNTPkP/WbjfGF!Mib5iq`C(`MiaHm0W5Z=s\#ijKX:anC;[86nm
%'Grj#bbek:DR;F<c*bj:PB<\NJNTadMhc^BRCt;4WX68N$272TVM:BhQgKT&PYdd/]18NXaC4XQ!jUFP(27Y5g/o@?RS]A,Gm>"2
%*K1Kk@277,Ho8t]l=20,NpiPbR%gbTRLRfqJb[Ejh;qJQh4T]P9eO4KEI>q;p>(f3oQh#E!X.E!Dt]!J`F2B8?1,/53btX^n()83
%M]XHoAItC:"8-??5@$qRT4FZsXPF/MFRa7:J.@3U3API,os!5W/(K:c'7U"qCFNI-iQKq*VqAcV)l5);1p\tT+9=#4pac^]qla7*
%9/'OhSA]poEqD'HU>b&@<ZE!QS@$\E-frnYAK%J#')8k3*[",[lD4':Z]bM/Po5&Cl2PHVQVXO]ro17!Fi@r*/AcIl^1@eM-DhH9
%:4q06eF:?jZBn3N`n$Zsf8odL!lhLbfrUK.ACD1"EJVT,H@JI*!MV'^1LBW/'3V"kJd[6ZZK=WF;F9'JFKb%(8W$+]q(t@BRtK0$
%@qGJ`,!rY'Fq?$6FBGMOfsdsiagBT:ajk7\'%8s9Li%urbe'qjC\-#;BQ2F:+_\H_KRDo2Q8Ubk@4[(>L\MFA])4e[h#%)"_1KmD
%(!dI3(kS`6YgL#!T:c6C=OJ)RbHWJ$Nk1A^8]=Wb/MNT7$7.O3Tkn1T[OLr)0ooG^C?mX9',51+fU-[OT'&nEm(_7);&_[SRoG)?
%N'BH:G;BJm)>0EYilbp9R;;8)]?K:4o]Wpe9+2ZIM.G%a9F_BS^5GA/<TmT(,R]UF#5ZWd;f["[/W5)"D5;1=V@V*lqeXW3W4/!R
%S!SpNbA/mL7a6b3"?CLmkL+eOfpsBcO2*8[*@#_^/QHX<4@$8N"r.'`AL5Rg?e%D685NOd!AG=)&,;Rq-,m\-U.N``/>!&>lo*DJ
%KMJA-osmh?G=Jc[G#^c+gDb<4&+<opASo9p]D.Qu>Q9!2L4Xf]bG'l"F+a=e30k`Kkai$Sm8HiVi3aD7Z5;aPlI5=giU,!#g'a#:
%P._WR>dS&m=d$'Dm641c3^$_"Hd%Z\kUc6s6u!/!DHMmA`28t8!jQ)62+A:M!&2HNGk@:$-&)Yf\))N5PO)cQH5@QsZ209mc?=H"
%E\sK%K+F5Q[R1l;p6I[<;nJNCk%'u7NBNUPfJ9n9*,3:FYAknI^&=V1$fDOm(#P\Z%XqI6_8Q^Z14Quk(P!>r^J-\^<$DMWm%e=&
%k7lZp\$o&c9eBC3Zd7Za%p0f?(-^o,qBd-QW7V%?n'iViFPm2uOKXnen>_S"U2W`(g,fdkE[U=T44?L7W[f3q><+Oqe;-*+:0BH-
%l*T!^P+/t'LaTEcJFcG.aCZD/Q0tJ=*h=)ZDmBTWobf7V^gfj(5aR0Y3VHoghDU`Lph'qRK[2nL2rS_4q<ZPiKdoVKh(J9rHJYua
%XID?*3gZuqnkr=-l&>u5X<<:p\V5`E0XsSW>#0f^M#:@>3R;gu8?=*kjSB#,W1?aYNX$#n"R-AW]Z)RJ<=T5.EIIP"Vg'+j4U3kM
%iY[m#6hKS"-#"U%d6q9sHq4=d)F6!ZUANuh$kmTO+uallq_3'#X8O\XPH<e;c]A_BV7=;eBG$_&FD4BS<ZfX5HaBHAML%dC%:if%
%q+T)/7Ve^9'_1/[*37^_F$[X,;j@-?&3hAsJ/nCl%hR!ib&PUEG]2(@3G+6bB)<.Q;qN9FK%MYEdXdA=\^)%Qi<dkRJaB'--BHoG
%WFm_e*+lRbn6P!$.DC!CBp9pR)Up??o8M*lcq-LDAK'r]/g^A>\"p>j#N\[-Fe7tW:DiOh_do/rJRkei.j@+=FkZ,ihK(EdQsL*Y
%52+R[kA(8oVMn4)?9q1CQ!5NE`t?X0$;J;"a6M?LCU)<4Y>O""V08\keSNME%p50s&^>$c1V<h72]aer4_6Z@*Boo[SmK>EHCPrd
%hlp1q1JM/3BEV>ebRfV6/^H)m+1B+hn/m&uYfrjRROCO_/gS_<*^RA>`OAc6LPDXI^fD/Y8bClb,Qn?)]IG,Y.Q[4?5lE3efLUO3
%o,cpo)6/XRB4EA[o+YoQFh1&LD+I<6la<8KY06+@rS$T'Ba.T^jf^Ao-$N;cjXD\STE5ueq#0LT^Y0BrA!KOr1^))&EpVt;@Y8el
%cqh#uG:`7K[i+guSl!q$JN/fZA%>6Y<@IRpjFkucXRrcr.D)rCC5gNV[,eO?n'PDs=i?@Ad[4+derV#"Bsu!CmcLe6q8j%P=`drm
%N/&KMV3ke\Z=^LVjt&ocV&TIXcs&TA6TfNA$>*![^^l!V(c0EUWgJ:\_2cY5@]P,:nmZ@Z(2')3T:96HC\H4%&o%lfWgI-h"\2!$
%Vg>c7k":G-k#_.b:aOH#Xg3bIW2a!!$trXIG8(hp<SGGTiS(Q.=ZuL"`1=;?<H4LB=)ApEU82$X9%?tf=6G&4k2a%IK;u>+1hi,+
%(.#j&1MMNII-iO^&V1$dJ0Ck1:^$I4/6#JZ%^@BO>H'W#QTeGl-A:>Z_`F>812D2FO^C(8#TiJhD[juF\N&)"]QEaJ03P/DZQYmj
%R2;'To4SKMj<E-Hasggr-_:[;J&EG*p;A:UFfNYfF;pI*W4/o+8)$^-hh9cVChsIsn?#'(7L4iq5!-C?\1P)O`rrS`/Im1*V3I^?
%\3i7=b++_nc\fq4<T`Dog"B4oN:[he8lLUF>3<93Z6W1jatIDu3N'Mp]C0&MmcN4$>^?-q;f0Jn.k4R*-krkVc7?^j.H)GgIV]sc
%#3hip=,GH^2qgH&hOWPGF!nRlgRS3p/nX(i_(D/bIOVe_(nr"T5`j+qGtWl84AX6AWB^aqE_<!;0,@f/;DDHio>dhUkrGK/cct'm
%;Y:F2V6b_S!$@9a;Tpo``X]*oILC$i]`'=LcQ17sLgj^tL8'lj!24RlH-Y9@Xc4He`F?5?%*b#_aLJoYMf\,2+fDkS5>P^iF*Eql
%<hoI/J?5DZ1K5QLU`c+">Ht<%2N`TQ[\UH(F%*pp1#(^cC/Rb6,=Q4=6mSI0L\g[8=PUB0#gWA?IP)Xc9F:l?GK8k$?h_`F:T<Yr
%@1CnhBO7<t*G[]MaCBF!#0o)""NW?Ema5:?r!XF@7m33u6<A#&la3L9gm!7EeFi<>OeNFH.u[=NV@l#ZoNMjB;B1C!E&1eTYd7\k
%s5;lLR]F(3G/n\/,KZd,0Tfh%+Y;kKJ!O>5:t."XZ4Ht)QG3s]0sL.iQiVrM'?.fVY7[fM=S],$(C;p;XW9#<MnLTEZUP'A+`[m%
%15Q@pVJnK6[]7?r)`]*@8\%88=1f>?G9Y6ri`=$1QUQG5P-9GbU^97Vq:IUn?S'L2dsN+_]Eb?NVUf:M94`(k2W@\&6=u!%Q-!pu
%)cVeYRm!,QC\I7c6X##NS8"`"pjNtpat`\p3gO7>'Z[BGOX*-Ee.s>g)"Fs"qrR"#^Qs(<DmVRn9pBl]&c3<O*J>'Y_X7cDQ[3iE
%@eG&dh+,Cb9:0`+'M1=D\!@ahs*,a,'[,mIO7<4:7/%)lgm)e=+m`m28oRYW:^*[c<fW]U?q^B=e-S8e333MRChLAH3C;h-]"%oH
%3dXDG5,kKtk"p^,no-lGp0]ZL\FI&+e>DO<BYOD#e+Wj-Fm1g^7W!*-:c=[b]caOep=c1(.&V(bWckHBf<q,UU^gU'XnL45L<k(-
%EU>,@,u"jpN`3[Dj^?ci-MGLToV9N[.K+Wh%\Snu3rsFc93,X7@kqXeO=/N4Hea);2P;SnoOC=1n>s^j7KG;"Uucn*IHEQp/22^C
%DTks!!9mM7PXe(7DQ>'Qj+CJKYmS-q6Sp(7flVJu+'L&,f3%<IT_0ahJ_@h`F*g;%Yt`7I35I^l93E2hn>F"%D<3E>1&4DH:[9pL
%;E>s'9[GSX(]L/mgoZ:'82_kB,4!i[4/e/p,Ip?ciXBLDa@\bnEL)0_ZY=0pC&ro#8;L-fQfNq&hG\:S6'O\PL\6"1aRWm5rU<hU
%na*L-W3)tE4Ks2)oLS(7="f*-&s;Yn7Xt,BT%gOAl1R\u.6eL90^,5(MSMCqj5\hF-UgBEpR<pN;6+U>rYS3TXLd*@N7:&*=9_Uu
%d`jf3A4=>MJ9U@*VG.\4oYFKf!O5=G,>N>LQ/4O0ZOIpM>P59i4bW:unOjc;\nk!0*O$Y<ZA1:<BPs[o,TF0['[*?%EEMdq,af?+
%M`@8H`=YkW<hO"Y+\"^4<'_ep=4P;!DH#Mgd;S$LI)8K+b*?YY1_n3J/Mjf>LX@HB"1QP6'3`e\Q-Ws[NX/Sp@LO;P2F&t(EkdX[
%M%c/3,c_8a]-:(jeUW%+8fVM+o,@s+>4LF$I;_ObWSU.3g0"Z""S\q5>esL.O>Vq&G!114J&tMl?ECnh\Ias5C`Gb5:g`>:H5Uj&
%KuD-5OMHT$PRbELF%MK%'7iq[ODd3[Y$Z^ai5%7-q6a26<5N<Q"FCW?XG:N51hShaNo)&dO,snaLWL-*NsU2QM\Lp6A(W-d&Sa?c
%ZTPkSVWe.>A+qD7m`VV:B@6hef5l?+-5E`4ojeGHSrhCf4[o_^[WS$Od9H$#5Xubj;;-?7MJ6iPTA)kZglCNuA[%44P+L/[Dj7'!
%B9^<ZV`RC%kB8!gKfcC8arRbgUnd[P$`+`(,&mi\A^V[GMZVZjq%`k:[&Ri0GskkC[@H"+hIeH_gc=(\3F5@Y/?P0J;j0Zjl@g%'
%o2,%Eoo<Y39/fX6fjs8Q5PRWNbN&LeLQqJZ4:3SIM_K<TCr6!!"Pg*ZRUu=R,J`I2nXX_$<\YXg4&E+=:U1M?`OdO@!(oglrq4'1
%87fZ;L=Y)ch5PcOP'oF?c#WTT%)tHt"D9bQmF>[a-TEnWm\LO6MVoR2c;?o1/BtfO6=lI<eIR[[h`QPSM\9f>i`,_K45*(76Z=1(
%n\S0K@S?'8p%.=-"Xmoc9G+Ih`+,*She]OE)6JU9T_)Q'o\3OZ/qd99i$bZc[0?OAj1+Q(mOh?MM8LJK5=/-XAA\Mt_m(Omm/8'!
%[XC`Y/`K0"1PL`?h3tA@KDIRO"X_JRMu-]@F#]N`iC#_8rI.Ss8[+)I2:W0<3Di0"_>+\o2oC,s*!e3!;/G^2MU.!r2OQV4Su1gi
%bVS\4Yr0@'Yt=AWg<^k,J6HWWd!.X;GA5pV3DpE.)dp_Jd!,kY"3?ZG&NQeOmHLPeZVr&08WuPZ#ffSTC'W`mDSpo"G3VUo6B#/H
%m$4?F'tb&THF]QSZ<KJCot8:iFc,>r=?g1D1&&5\3NknjX97RLC$IC57,jZ<*:]>*X7l,?_l:pLOt9RGoV2nOC4I))4,Z&:nF!$b
%+L'd:"4G@)Xm"eE9@>AQpWL@1<d+f=oeN)9=M'jneQf_oM*@G#a4S^7K:i+V+ZB>F!<;-6f>%pu'J?OQZ(8*1`>.?VNpEo`DsZtR
%S708J)c)d$Sqh,?OlGYX8DR<>O8PT&W9liTbl^I1(2Gn$:t6>V?s:o!i[M@IO/('S8.TO-J:n9f\'rpd5aFbLJ_8IXd!GVK"/>%g
%S1Q$u=+Qa^'_2R7e_MPaUq$@a'9@iIiO'4sHa!YTEON9W[GR_1f8/-(M1"Z"^C$B/PTrd*m3A>oS)7O+?np,jgG&g)!=Lal()`!p
%,K.#qbc?;:0qGHlfCHdW6!d(6-U\,F]%N)EcY@Ej8/B^K!S[5UV1]@,dP8_:O`QPd7GZn6Yg@Qd"iH'G1Q$ipF*DL<$>2kPE._X>
%;pod.q)SH.7U%si.#s3S0o?BW.pR)JU]X-))XWZm`4r7ZlOQW*nOa:2g1Ikn3'+m\-Zf;5@.9hR70`<bcD>k&^JR"uT;n8_\%1Dp
%8VB00GRM4QF(q4cq^hQWDNEsV%k9M/0<)^L*BJ+'YMsq%V^j6;Gfq(A/sq6sSX47nk*S-0:)_D9n5B,B[#(;"bcu1$R4>6X!\C4!
%G;rFc[N)4RZQ2+40(lF'mU>!]O$PYO:/R$rTU@c$2@/"B"[AGL-\FfogG$G!@Y5E\$bnJU"DTfW,r)=^Z#g<\NIhd/n25:B8%=OX
%6r-,/9Hom<*QgC)#g'YnWGP$C$,^66IVrL.AAADKoUDH%_Gm3C.9j>Cmrgm;+Dp]'040@EP\*h<qOmY#%Amanlk(MQ>h;aYrgLO\
%maRBZp9bmTV##rCT+p]l4`AgUf"H6fY/@#0YaKRCWD`2lAVgKkX@mal6_8;O2PD-$i"WIH6/Kq71:SI"RUd0D6FbTGcJ=qo*fjU4
%05Wej#_XHPpniK!\B1a/<!ir:k]K"!*28ei7?Joj$KuV\I*_-VJC$*5k0e>;Fh)0IM,24"7l2#`ng01Nn.H`Cp!/CB)eVF$W`#3"
%jF'AT<tSEh^/P=Z[tg$^RK9t7A#^V'qN<PS#`SUr"h$'rINjNgA/\%dHL1>FJ4@$0h<l+lG6+,#EI4]6bDe*O9h#6s!?XA'S!bE4
%8C@a!RXqSSk;nd2[#*baH)c%*mf@1+g6<hY7QNs+^7BBBQ0S(]=$bS]/MoU9FdBO#VuTdJiCj;jD*A+;$0Ve74h3XnUdP)!.PNYa
%0PY';crYCcCF9kaMEHrPKM>8hOLC2=CGU2\.H1p?I[+,m3@d#,iRmg^?gX(Om&*?Pl(fcs/N*nPSO7iG9<:PIhT<:=A0!d:fi..E
%@:hJ?e`0T]W_FnA$5,63g8[`:R%S/*_u+*Q)gRp;qR%E9m0'FbSHD7XZ(JbfS$\=gagGWG0#M4l7,KaHKkA3&\o^a&ag@o36sk+"
%7(67(Eme3m6\%9*G*+8ckBl-,BP7b+2qeb3YSkLtDr,JmO;p7A0AAu6ai$<ZLB0\^DSJY[oJ8oSO[cahnkaa+^eAU-[NtL2"6cFc
%c,X0oKWg&@FDWDc3,f4Lp$$Kbg^jq@$hml@/SM;OPJ)'Z?qY2T+ChG(=NYX82PdR<k#'>V/dZimWW9D=(a6><3TJB%n#XsUFeEPB
%\>>lAr@)WOXcJ)bfmu@/35c#K<3JB[;YH5<5/bqbX9L)LrcQ^e..9_sOW)Ji&j(_*T:3b`W5[:k5BrV\]\>BefPb+88#kAAiEr+#
%+"Xek*ohEP[GBV<\0<bYA3H,bN"U5m:e27P6"#6^Fa),$P"4$6"3+)k[Ch0co+#8,q")0pYH<0s%>T<jJ<T<7deaTiLX<gG\SO89
%=b>4IS0(K#,Rj)Zo>!?)k<L'Qh!'3H=E9d:=J@2)+jta6YUNq^7G$k-X12sI^Hq:8\mkBNBbV3hoT/#P4THVnU:&K<E]$`JJJ6`r
%KUI7SY-PbrOQnqQPmj0s"NjY0JjfsE+:&\f+(&;P.FJ4K+>l;X'%:WZ8sYdN6lou$D2+[6c"JKb]Kdm[2W+s4LM5PM)0,&<2G+<2
%QkQ30^.SIKN3sfDP<7[YOAJeY=a(c(C(7QSYQ!'1f=5a[O><Gg88'.%i_nGB7_/aQXU?:t?@@iU.]"MrU^ph@E-a5h$uN'%[DbXK
%\WZ7Jn<!>G)^Fll2o4Oq`]p9pd@s?kaVOt8)s>?NVC1;23<GWid[:tlYsYNeBQQWo`qLk.ftK?c^O)!PV;8e4.407(`/8eqU9t20
%INc/u"9I[hmB"R`i_);5HT_pl`Q;6,OEN:\)3[8&T6:#<@sd'q96u].3YG/aW::7<Q]:W6*J,F_'I)=[e-f<6!gC?.J8oG,R\5Cm
%=dV^HE$Cf(7hVJ&&(@s3&^YiS"K)a[K*:FMhODSh`Wua1L>^7IlX7"4Y3!+3!Wo&Tms`GGT\lWbLn8;73OYcb%;[rY4p"T;r6NL#
%:BAkhO.pj;n;^%n$;/1'9lN95d91rD!/]>1B<>+fBMh'aHW2?5jsLX6^nKK*_<+hRK8K65JOrOgO;U(.BgZ6Dp9m]3WPZZu?CrIP
%#$>YeKk.OcV'3RNFgdqtmc[uD`;#F#K.dDHg2fMeQ`oG#.lKXd.N:?4os;K6gW&(]oZ[*`2'N#kT!Y,:pU4c>F1O+/^eic:d?YO@
%*al;Ih:;Y,^uf>n[[MPJ3_TP:gU#X8KSF`q3e1;s=e)"5Pmi^WLt.a8],0I`!f3Gp2R2uIo$gb:=,3Z:2i$d*75F,If""p.o1$Lf
%YTNQ0[]YA3T.\Y4&_@(AJFcefr+sQ)AB1s_M%L3'D+B,;eAP!=pCkrn)PE`-e?"9f[-a[Fo&H/1*8aOJr$3uTNf4QF:W5PWV_t;'
%&+OR$mSfql<$6B4EG3P3RjsMJ7-KssPHV/Y4lk9h'54t/gfj%Aj>q?]b^%LMo2;tU5VUH<Gr_Fgqj,uape`P(_L5;Q%W[kHCkCG[
%ZT-CAd9refpO.Z@bDCJJLss17.O<<"AcmT2'r]S^@ml$h9_ef#>'R_G/@-Cn:uDf5CI3jBVbd">V&U(r.>6Nf6GOT#OuAP1n4]s%
%lDLphfHsl:p5(OOj"sh#8MXlAHtM]fq2Q.FG:a3r7?%7M@QQW]'GGolC<-)c#5I\kp3M)V/%)<Opg>kJR)Q9Pq6-I:`SU-!RJS.f
%Tijh`MIT&fBpV"h;'7&QTfB&%UBGasLt=\g6Lo6Vjim%W]\OFj<s)[-]%<T5+f:Iga\l@oE=#f-F$1t8,YKgA$!j<C+klWNJ9g,"
%O(%/m4l!@0g(<2ni?a-3,g#cHlb%Qnl0KcM-mS8Km`cIU9Z$p;)5Nm04(98L@m$B/.7*!Mbd`_eH)><D,;k*,&0%=)>b6qBY,\He
%2_e@g&7L0b&367j_2@Z*76XisQsZ%s]qaaH%(-:A2h2s.iaqEm<mC#$PU+=Z.F`Wg0Pk5goA8[+WL[D;rgo1K;+12gcu")5dY#`.
%+Z+BFC6GY_^b\eO=f`7a!hi%jn$87#P!hP8T1E$#gn8@O-iqnMim9P)]-oUjTV/l^<QB"a*fL6X@*Af`s(-W\Im,m"8jJQ8<A*I7
%&Q3$oT2W.N@@e2#SG.j]@,2I%UN#^IDC1F<>OrC[=$gBl/.>[TZpba"/BjEuXCC>_dN2;@olI]U"LKXKp?gN^0m`4jPi]RRZH\o@
%-VB<*,.Aft^@]A:WT/r]>l"$F0EYFoi8/biZt@<LX%Wr[hDI.5pg)SXkiWa:%>)g@oY+?J2?kLW'U9%8q656$D5R#O0T"*I;QR?_
%TeM?IeS`[Qe//qiba,c-XdAC)GnJ[U,!3c%jg>sWm`:FXXX:XkB#8Ch&-fWsHXqp=>fKnI>L#8T*@dJPVb9a^9h7Jl[p>%E163C[
%'r0AV5]ITI=@Ts6(beTVO[td^95qnqFh'_],IpF`Z-C`e>ZpReI)dC+MGo_\@<m:1!%M5WmXW^u%[AoUDiU2F!YV%(Q@%ug-<)ZA
%JuIlA0goYM1"XIg&8VTnT&G]C@Gl!BE=%",H_PI\6S#j@/2k,3`BY<ahUcTd-?!<6p3D*qOr*iaLcLZm\UHArN^"s"YgXt:R%tW:
%W^J!5?$0u%:u*=mejg%Ic_2]>g<&35k9'Y-C82/DTp-5g>?*sEe2m"?DU/@5(]k&:5]1an=ud;9RSMp<A=BuPN/inPfB>+:7E="s
%mp@,GNAdWP'GB/E$s^YDEVE55\E)."Y%#b-P(JpVqF[9G1nDK\W$h^<7HQrKAutsnB^ld.MShR.UJCl9T;%J\`H0Gn5b`_j,ZC#W
%5n%RjQ6&%)HcZ.jR,g?G1EWeFOD6T'><V;5:tH(F79)/VbFe3Ll/iVT1B_]O)psg.S&Z'CkJ8E)nU0>WmBGV0]Rk?FT$shqkJq?"
%0s"6E$mTdi<D,6=l<!,<3@9u*Ep^7B8KGYI)<!h70X?s8VsGgg(Y\g_gg"KUMs>9gOu#KP1?\jfP&^*"c-nLQb`AibB:\06N-oiO
%Ok[#ph+#a'D!43>`ks+,F#X5kb9.l>>+A^>2*gF_UaK0d*3ke\8UqDF<0a]iDrJ?@pOT*:!+^.ep/@(Td+Vne_J4t^ja,rNABYgY
%FRMdFjAhhYD2/.J4L-+0K_1cL"gt**ZE,XuGpq]`=*rnb<B%W&=*-oG)`]E=B8>tKc?S`t-j(8e<;F?uneCu9_l[p$)to6s1hnar
%7VgGX9@l:p@Ng6`Olc)Vpa9N@US]rM:V8nqS6JCaX'4sa:)nr9q#Ji_<:`FhKWM!X'1nQ5hC6NuP,m\t(rRMX<n=SI&&]f#qN$.8
%FWOSKjFg&8CkY&$\?q+P>n@m;AQGh(B<]ApH(h7U)A9>`@7n1G[F>J!`N'YRZS:>P5'<;1=**aLne3]:R1rVomYMcR5KaT[hqG/r
%Q.tI9ghmA'I[A9/^.ASQF9\mt^G^bB[dBKL"htD1cuRHZa&(TeK=n!jj<tBo+6bJ7WV;51bI5na?^n?LXAG'(\qr8)aY`]iW(T]S
%U+_.5BbSd&*Gt\sM,gnD&H(mN[a_/H;tTRpV,jQp"n*nCK&QBF<t!7Il,f9T=UB3gf4J$%8L$EhPL/#V/W!]K>27l?Uf(O9d)h0E
%.E0_ukfo-\i8sX=dn1e>98hOUf+lZf7F'-g(t(h,jRCGiMOj'tTme#8o#Bk%S.'#-D&TFkV4/;4RKRp#N6k@\d$^L5&GhSYpl-D*
%4)1(g,p9s!E(utC[,oqh=[dD=)U3sV(0Q9$'EN%[moiE^p;gI,@S58>A6_LO/L`Fk1phEgUad_ELSZ]9R]&O)+_IZe5%6Ji#[V4;
%QM=.Z&DM'NXL_,$8.-Ja/28[8D>)C-`qc&iZr$a>;4EJ\X0?OtOX(q3l+(B0FRM&PLoMY^7K\&f!g'1ZcZ/8)[TZ-W?\\Lle[]Bi
%/n^3<DB`s?hKu[6/%g/o442"m:='Qf#AhPd]#dA!%V']YYJ2A#[G;R#o2^&[0LiQYN;]nGU.pk&e<q4#:m\J05nMpLR0(WBjAVO@
%5V#,`P'jX]'YfJ$(e#Lq_c.#4d=YD^MnqNpHf>9/"-eHmnP=`>>!_"p9ue;j^OgM]o=+)]]%Hq[L!VUGk">J6lr]X>ZY;2J;1uo^
%XZHMQqI$P*dcP+5b3.]5i4aD\\8n#^Jqn!UOp@+XWDAQbWu#,6;F7_+NkWS0!!0h*,.c)5`j'jm0a<V9-aPO?.t6akaL,sL4`lq,
%LOl@919nY306Y.s("1`1*b=rmkLfS%3VF]<=S\(hD#Ep8XT%j%XPV!"=mqnkp#C,;ZhB1#Z2+4YfIo>+eiCaafK!PaX']t1eHZ=^
%I=.-A#7&r.360=4p!_3k?ZqBncTB.hHcK6<5/um636(7T0p]Su3S+5jca!2_ca!M[KC#+<m?a>QlgrH-q/ak:iEX$6M)9*@Yb;m=
%:@',sUB9kU&?"&.>TrWX(QaPp8c3=fAfSY:iD&O`=nVUs#:%pOV#&fW1gXfrY#A5/dP^LVpo?o"Ubn@_g*+,*S:kf!L<^R.pLekA
%!BhPS+`l,g+W9M/p\\@HC[4`$qu6HKQ-,hJ7qLl(bg?0K4J3loRcU'6UI=_3@/!7DX,eHEjN[8Y_rT.!ae'*-59D5%5"p?kLi^G^
%aOulY9+AO1'?Tc7qu-&aC>!"*KM1BbiK#mudZ4$0GujaP\U'*[5Kd%mM;ZKMG,*=OWMk?:p&/K:cZUBa>7&jNIN&Z99S^R$f8LZb
%Ut>UTc^kb2U8"?dp#S/+rk'KTGt7f(Nqct(7hiYsNog?u"`4m_FB\uQ6X/c!dakG+?]44Co=aV.!RA=O1sSm307'j<^&BdET3<.6
%*>Hr7FRP!C$Hf5X8p%GqR&C@7To58LjtT\,X$+<b*%6LL>f(/a$/Rtr+\d2aa/IU4,s0&%XPX\NJF@@,-Da1BW\?9+dUerMGa]V^
%Jb.YX;/Es(2BGl>>OI]THt'`%V'=0.d7Qc&o\cKOrs3+_.KI*["3!H$.noBtiX3,<hOO^7?79;4$@u,SD^hb;%Bpoq(.*2R]V)d`
%E-f+kXGU+QXU)Zndt93G@[8[K*hJ^R$]JEG:X2/i816eoqtH*TArHHZ3D`DHaFq-PNiDDq)Hg<qRBdqWIJ5c!J%jJ]f]$m$I!8Dc
%&P1_Y%PEn[M3X\A+/)k!o?Ts1mZ<8nDg)?O'4o**76\[YB@E[q.PBue[\,rA<O(%*aJs!TdusI)$W4$So*X6kP1-@%T[^qR#$%ob
%.\l8XM]ngbjWkBDPoD<.Ur?Sts8([&5<79%%ptXPkKA_^I-FH1@#GC67HXe@.cW;'^[LV.5!kW;dk$Qa&1ILJ`LL@F@*5B6J50k7
%1UOIhhCb9Xh*dpC[H+rd2fpVt)jsB?Q=3JE1a4Aa#Wc4)injK^DZ.3ceK<!`T7R&TNM96*6tHu][N.kBJXqTT&YQWcZ#dYK0t9hl
%I\C2oC#@0g,G'J*S9WEJ-W]j1c]KDH."`RKS[94<UkRV0].amKgUO*DCWFsZQsAAeFVH^?-V!V&Yk85(O#&*&QZ>QkcjCE=5Sr9H
%g&q=OQ&Mr6_3l2uTMqANf7P-WWqR?a7[?mr!/P[^\g/eX!hG2bC2[H?#aFA)]?EsC@IXD,cP.90X84d]NQm-6H$6_p#&-n"4KFHj
%J7J,W[]lrA.qYd&;i<Fr4aP@[^.CY*]%>nZDp:](elo\>-o^'O<GD/IMu-p`MQG9/1d3*pS!EtQPL5?u@'ce)%]:WD6-)#r*UFhE
%E]2l2dUg8+e4#G;NeSgU\LBe%0utQOn][\1I%0^tOfE_K,:"[WUfnG;.65ls*e!ie&&2Ln""Beb5m?Lp[18R"d9F_#:H=0k5hrFP
%5[KC_@lp%M<FXYf6e'H66X3&%NTIHJl*&1WqliT1HTfduoZ6rh*YH;,R>99hY,7(o@u+7Q&9g[NYH1Zj\moMEs#0OK&6qa,9D7`!
%TRoW9q!as:md4_1n>kp'*<_EO4TTG.C8I_gRWg=YemQ]@7o,nS)Tj2B^n0p;qbU/E?AES)XKo=1I[[&I,^khCZ8Q"HpY&t49Wt,W
%Jdrnb%spjl&ohgcD[!BL;3UEb?bKlkE62ZVcDW%T>d[4I3fn]&I.Te_RB+L[[)8/2Sgn^%iaD51W4kNDAP&7c4FjocLe4$GK7#K:
%YC8.IT>c"YrAH)a?U[Xt4TLrBWB$f0\EM'TXI5;+6OtUQjBu4jg#Tg7mcuL0*+13q.;ndVg&N_P<nBH0R1\>L0;#XR(+!QiY5RFU
%aT=\alBl?MZ7S/>Vj:V4jAl9BDeVXU1F=/hah"+H[N6(46FL4n_BVU!3#Ts!7!"8)>#9L__c<*AjOD!A[!P$)K&:e7IaK4.%tcPh
%RDupq+%GC-7:T&TE`:^fi5jIMk_IBmNulJ.>9:ShK+c_O/Em^N01"Kql4H1NM@"TK+IEkCVEb><8)EhdX9+_\0-;;o.Or'0_:>So
%^sf9//]_t5f"TsL3nO)3SfW=V-OjAF_dU@X;+((r5.^F;f3`t!laLfIrmsBIH1,WS?[hsO2uiN^=9&-ZX0;O%eMk6gqrZZ5p?LJ'
%+8V]'oJcgAc)\<Ln,M<I?iB$:DgqZ0DuTI"hnD64?J#/3mskArFYDVNrq6<e\$,gNY0'Oio+0`+pVB;unBKSBIJrHus7kWThgG=d
%S+#@b\PSH?i8N&k]Qj%mGAk4okB$%@^Xop`keb)aoC[$OGCD>@?Fr>4n:,rdS*th#r%X6sqObKKp$HtlIl;-0f,j\MnhW]&?VZFo
%i:?PtO8>4']R2P@s7km6=7?.X"98:mbB(orP*6^bU.e/n-!)*\QUana$J\*k].lLOV]Eeh3Z#X.KdlB*'HI=]"PE`Iof<Ng^Lf>(
%lXe"7ipeX6Sal2_?39Xf(*jn]L4lpd:?e7>U'+9#KK8='RpIOjdU"!)C8h7K+8>0POb;VRa9'9ik'Y[m9u9m5&?!BK@N.K35PXY2
%0@EWJdY5+&j,9--oO[sukTXRFc,\H7]JZ-cOaI"\5HmUCWF,8[s8!Z4"c);f<jR<tk]jD3&]@R8r?9i+3a?.rPuk*>]4p:Eok-YX
%DO-"&P&#%C,.O1\V6,/>U5mbB-JgK30k-#@&gSPX!<G0,/^F+E8rtICCgXVS+`Z7_ppSUofORomqo9fXkLKCGX&HR=:RsCVF]R,c
%s6/b73#n!G`m6k80B;[PXA3r/rqML,\N7XTmCeUP9&d]&+K/SD=fGT4]dOGg-%*60cLKVbo.o^a4L0`!.0k29VL>]+6QRY287bC`
%#U"[d+_DBr+b[jnCIZDRoO,"!b5t,NU1uBj(,8\RVgks!hEq_6ZL"J?@%;rKXBnunH@#4P-WY:+"tWu/;%:AW[NXqOP"8Z=h6(Cc
%,(eSR&15ngh$"LQQ#bpkf'*5qM@W#?+DFI52Ag@&]INTH&Ha8)(<SF<\4R=Sp5#8;Jf*cUe=+5rp/1QQTub:Qr+J(F,p2c8h8-^u
%RS=g]M%@(0JXt)@b^KA"e%",+W@Ic,ecb1eF]_^l8atFUrc+RD^;j^p:glI5jg[kjSpMpq.`./=K*pPclLX(YF9-tu3EiGGK5sEN
%6dkggb9G\8g.Lc['W`o/@^;\(6o3P;k$Ipko7NZaq`V.QqC$GOnV?7g_)\[%e$?MR2[Kb0lPVL\np::&cj3WOl2d\-K$YC=f#h+S
%HN`:+Q=d-=dqQPY6?saY1e\c<eZX[]Cr<DT^ks&;'LgA*?R)I:2hMS.LON7q@EP+7b=K:,-RCQAT[G.G'LME/U0+d^)YCP$5<.;T
%*1,+'DlpV-buZ*S/r:lN6gS9/,e<IQ`K)]JH2<=fK>^'W*\(JYdVj'[CoT?)-X&BUh'`mQl4LQ%\5QnGS]#B3KGL9`'@(_lH;g=d
%^g>EeXZO0dI]ts7Ti"b!VR+Mkn822oJM+aN4*P`X&"9ia#\:eGYHN$7\OoD$#'f+1$[:=!cIG7pGrgN%k=KF__lnE,:RUqUP^3)J
%VT]EDR9G$Na=FCe!?kF,[R"HV,S).lWpfW%UL*d`6'p#MM$Oeq8e>]Pi;ej[g8IusVBV$PkFtVUNeA%C(5aLGO%pKp'U;aud%qG1
%f'+b'4e0JhS/A8=Zf!nARlO?*a.V^,6k1$ih^M%`4Aq$5=cuq%0,qoJA/nig<N*EMOM)cs8Go)d?'-O)%$d"C8"]c*M0(u_o5YR1
%2o!EQ()Qla`+kV>$9WSdIuI@9!)>BA$C[SlRK1tq5:f0$'U+IDZV$eGRi:PPNng3`N)q>R8#j-=#?%oNc![!,,jjh'r=Te1R^>*/
%b*Jb:$/;m`pB2kD8DKd6.[F*B6*/er`er(`YR`tsMtcYIUCLc=TWCFFiLN1e:BgDWW6D*P:sr]f&6_$A\S"t^PL5mPKWF;o$cW8c
%lrcaSCa./`8i[@/p's3cN\b"=j>=K`1U&(f>u-U-5#(o824rOYJej`C_)ZbH#5-q;E?:u>i:[^p-Z`I4o_4+_re:7#41pfZio.-:
%f6fF&WX/oEm8=]RZ))b&6.Cb0&6+Z9a(9;p?U)9`cK@,:]#3U5M`3tri!CWj'i1]k'V_S7Z]SSM\Du&WkUqiQX%+l%)-@oc\!k1\
%n>#1"CZXhjTg<%"-6Z]Cc5iWchuE%=G&JZC"r5$gGOHX"s$4)9(BP:M9o&et`R5h"9H^)Y[X-GFNDcNg209JXUat!:'LMF8DP_bI
%F&Oq+LbHP\m=:KeO1QhSF=L=ANuEUZ/-dsfn=YW:ls$7(k#OC7Lr9VtCm&ApX?Frt#l%i(nq-pJ<bF#VUG\\E?q/h#3Ald+0mHDm
%MR3-+9Cd74PZ9.f>q'YN1`hmZ9CB?%jQWGrr/m+oWOJt>5Bl1;Qu\j7I-NT6Ikp3&&-"'5:A$BKI_rrr:]L?^^\j"0IQL5VVuQb>
%li\k>Mf`VcFllPE5RUP^P[LKqFdjUHk8[Kf_L.;pMn9CS)u4a39I6R8=Q<P:QT*E(8gZ;s^d(4,Oc=DdW>I-F1m+/dNFY%Rp2\_(
%lY^;m>A:A>4FfU>1oE=_6LS!&/=bQ6.m4&V&GR[&q;X..OhDO[pLWuHp5j]38l<j]C]/&bMiU@-O12C^$.,Ym_KEFPOD0XOg(2e9
%'sBI7@7OrS]H=\/cV$r-s7VeDf</M`-0L-7RlnZ*V_U-@&p.s\[#&!OdVi.9\YS<?8]g)I!^"MTH&Hkob)]-!Y7S34OZPjVJYb3s
%@Fsr#],&Z)e<;NK:4mK[l0bVoFO^G]KbtP<W^*r];BZrE]H<C=hL1jUa#)0H9cncZ-`=kcWd&ANrX#7)?Odds+Os]4$rq4F1'9)3
%O1$?bj;$ohb2T/#+[[CCh4U>k.LmgK,-omcS=a50$\7.lIa+anMk:uO.OI`fa=ZK"Of8Ac$1XbnP!^j#BY].F:qUE1!""QA`uS9J
%4+rFCTp?p62(36"M4ni%Qd,pQ)"F9U58q<`ne7ASqtAOWNG'jgLfE[\3d%J"E+/HqrV>]?#=j/E2Z(N^bkK2.RH6G:jQqY:^6@Rg
%GXp")Q=jjb(RIpJ+AhG/C(/UkpKNsZ;"P(dAM&"mB3"UejIW5"-C^>iAjY6tpgLmq.n?\;$7/"9ifbV\$+ZsYp*#\s4":p9ROq]!
%R\J^:)Mf#_'L)<]+((Nto]n_fEK4.4?:]42+Ta3DU9t<bp8qOt^9KJa#jT%F:?lh5hT[p=A_jiAekXNrJYf)^k_d$4!=<I6Pd;M`
%eYP(/TR_6kO9GB:`Qd#TG"FO1-blI`]71M=@p@s"%e?fNC(<rV=\'HVA8([6//G<8E5?8LoDDaHfB7)fNa&\%+8dn16!m$4k45A[
%qt*ApBIcIgJ&:FLioKpC0hJZ-NiDDl?l.@rPLA`.[TKCn1T3_)U"D^7-,d$[P$B8.4<)pILXmg;O#PDa1rU(W)s,jMYk!Lom<MGp
%dUJNlk#oCR%-O*6N*^5S']fJ/rY3/oI$:^OUn>/;jT%ZI?su2]qXt_t*2*H2r:O!\D4^dTL-Rm>_sfM>"i;]`DM/+2rEm.h3-a*u
%!+7MbZItVuoSI"7==\LU3<sk@*+4ethLshdUu;#ZfFl$rNaLR`SDp:H'M(fGr:K2I5M7,*45]A1D2D%J(5Ni6oAd0JPtsIW?XR0T
%_<d_b6A&h.1sr"5Db68(>VV.(mpR,9m4S.a_7X')h]eMqa8+8M"l!QT$jJuuXIIpEmE^00Onbg-@os!;]JS06@Z5=!5F^PAl]%>j
%Kk+VN5deDu)O^t<[1uEZZ@u7&p%<9/5Pk(Lf/Wh:K_jesc\(&lbs+GiVquW$J)#VRn>;P%G;]<c5P5!EfAHMgjf<l\oBi`1FZ'*I
%5JI!]S,`6;='r^joBfoa`GbeGl;)>i?@DDSc[YPif0;Fsp=hNUq!Rn6^3TRmmsb:TZuFKB_dEAmYQ+M"o9XssrrXH2p1=~>
%AI9_PrivateDataEnd
